[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T14-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-T14-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-T14-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Travel inspirations come in bits and pieces."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "At the start of every travel planning, we often only have a vague idea of the activities we are interested in and not a concrete schedule that optimises our travel time and satisfaction."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "As a result, travel planning is often a hot mess with little structure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLust aims to create an efficient and organised way for travellers to plan out their trips."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Every pinned activity and travel plan can be quickly added, modified and retrieved right from the CLI -- an extremely streamlined and quick process for the CLI-proficient traveller."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Relevant information can be retrieved right when and where you need them. With WanderLust, travel planning will be simple and hassle-free."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103-t14-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103-t14-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [About Us](https://ay2021s1-cs2103-t14-3.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Acknowledgement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU](https://se-education.org) initiative."
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 22,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    archiveName \u003d \u0027wanderlust.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "lyeyixian": 2,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Wanderlust was developed by [Team CS2103-T14-3](https://github.com/orgs/AY2021S1-CS2103-T14-3/people)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Prof. Damith C. Rajapakse"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/damith.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](https://github.com/damithc)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Lim Hai Shan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/underthehai.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[[github](http://github.com/underthehai)][[PPP](team/underthehai.html)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Developer (In charge of Model)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Lye Yi Xian"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/lyeyixian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[[github](http://github.com/lyeyixian)][[PPP](team/lyeyixian.html)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Team Lead (In charge of Storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Integration, Deliverables and deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Teo Jia wei"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/jiaweiteo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[[github](https://github.com/jiaweiteo)][[PPP](team/jiaweiteo.html)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Developer (In charge of Model)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Scheduling and tracking, Documentation, Integration"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Timothy Ong Jing Kai"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/timjkong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[[github](http://github.com/timjkong)][[PPP](team/timjkong.html)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role:  Developer (In charge of Logic)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Toh Xuan Ning Jeanne"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/jeannetoh99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[[github](http://github.com/jeannetoh99)][[PPP](team/jeannetoh99.html)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Developer (In charge of Ui)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Documentation"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 15,
      "lyeyixian": 15,
      "-": 34
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Purpose"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "This document is written to describe the architecture and software design decisions for the desktop application, _wanderlust_."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Scope"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The goal of this document is to cover the high-level system architecture and design. It will also cover the implementation of each feature in _wanderlust_."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Audience"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The intended audience is any person who is looking to understand the system architecture and design of _wanderlust_."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-T14-3/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete -activity 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TravelPlannerPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1. `Logic` uses the `WanderlustParser` class to parse the user command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a travel plan)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete -activity 1\")` API call."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "![Interactions Inside the Logic Component for the `delete -activity 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* stores the travel planner data."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* exposes unmodifiable `ObservableList\u003cTravelPlan\u003e`, `ObservableList\u003cActivity\u003e`, `ObservableList\u003cAccommodation\u003e`, `ObservableList\u003cFriend\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-T14-3/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* can save the travel planner data in json format and read it back."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Changing Directory"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "*Wanderlust*\u0027s Ui supports navigating to different *travel plans* or *wishlist* so that users can view their desired"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "*travel plan* or *wishlist* easily. Starting up *Wanderlust* will show the default view of a *wishlist* and users"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "can use the `goto` command to navigate to their desired directory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`TravelPlannerPanel`, `TravelPlanPanel` and `TravelPlanObjectListPanel` provide the core components for the display of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "*Wanderlust*. When we are in the directory of *travelplan* or *wishlist*, `MainWindow` renders all 3 of the above"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "components. `TravelPlannerPanel` highlights the directory we are currently in, `TravelPlanPanel` displays the `name` of the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "directory and if it is a *travelplan*, it will show the `date` of the *travelplan* as well. Lastly, `TravelPlanObjectListPanel`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "displays the respective `activity`, `accommodation` and `friend` list in the UI of a particular directory. Do note that"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`wishlist` do not contain any `accommodation` or `friend` list. (The UI will not display any list)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Both `TravelPlannerPanel` and `TravelPlanObjectListPanel` make use of JavaFX\u0027s `ListView` to display the list of `travelplan`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "or `activity`/`accommodation`/`friend` respectively."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`TravelPlannerPanel` utilizes JavaFX\u0027s `Label` to display the `name` of the directory."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`TravelPlanObjectListPanel` utilizes `TabPane` and `Tab` to display the different `activity`/`accommodation`/`friend` tabs"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The class diagram below shows the relevant classes involved:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "![GoToUiClassDiagram](images/GoToUiClassDiagram.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Navigating between directories"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`MainWindow` and `CommandResult` facilitates the navigation between directories."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Firstly, `MainWindow#fillInnerParts()` initializes an `OberservableDirectory` which **listens** to any directory changes."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`MainWindow#executeCommand()` is then called when user enters a `goto` command into the application. `MainWindow#executeCommand()`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "initializes all changes to what is displayed by the UI by calling `Logic#execute()` which returns a `CommandResult`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "From `Logic#execute()`, `MainWindow#handleDirectoryChange()` will navigate the current directory to the one input by the user, changing the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "UI to view the new directory. From `CommandResult`, the `ResultDisplay` Ui will then output a text specifying which directory"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "has been navigated to."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The activity diagram below illustrates the flow of execution when the UI decides which directory to view:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "![GoToUiActivityDiagram](images/GoToUiActivityDiagram.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Below is a sequence diagram that shows a scenario whereby the UI navigates to a specified `travelplan` in `Wanderlust`:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "![GoToUiSequenceDiagram](images/GoToUiSequenceDiagram.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Design Consideration:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Aspect: How navigation between directory works"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- **Alternative 1 (Current Choice)**: Initializing an observable directory in Wanderlust."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  - Pros: Main Window will always be listen to any changes in directory, allowing UI to switch fast"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  - Cons: More work has to be done to sync up the UI with the model as we have to create an ObservableDirectory class and"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  link to the model manager."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- **Alternative 2**: Passing the Directory as a parameter in CommandResult method"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  - Pros: Easy to implement since we just have to return a new CommandResult which has an additional parameter of Directory."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  - Cons: Break the abstraction layer as Commands (Logic) should not have to be aware of how the Model is working."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### Editing Information"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "underthehai"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "underthehai"
        },
        "content": "The proposed editing mechanism is facilitated by `EditDescriptor`, `Index` and `EditCommand` which extends `Command`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Editing can be done to travelplan objects such as `Friend`, `Accommodation` and `Activity` or to `TravelPlan`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`EditCommand` uses `Index` to identify the object to be modified."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`Index` provides standardisation between the components to refer to a specific travel plan object or travelplan within a list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`EditCommand` uses `EditDescriptor` to create an edited object."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`EditDescriptor` provides method `buildFromSource(source)` to store and access edited fields specified within the user input."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Each object has a specific set of valid fields that can be modified."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `Activity`: Name, Importance, Cost, DateTime, Location"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `Accommodation`: Name, StartDate, EndDate, Location, Cost"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `Friend`: Name, Passport, Mobile"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `TravelPlan`: Name, StartDate, EndDate"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommand must have at least one field that is edited. Any fields that are invalid will throw an error."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Hence, child classes of EditCommand accounts for editing valid types of field. Each of the following classes extends `EditCommand`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `EditActivityCommand`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `EditAccommodationCommand`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `EditFriendCommand`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- `EditTravelPlanCommand`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`EditCommand` accounts for duplicated objects."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`Activity` contain duplicates when two instances have the same name."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`Friend` contain duplicates when two instances have the same passport number."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`Accommodation` contains duplicates when two instances have the same name, startDate and endDate"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`TravelPlan` contains duplicates when two instances have the same name"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "underthehai"
        },
        "content": "When the editing of an object results in a duplicated edited object within travelplan list or travelplan object list, an error will be thrown."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Given below is the class diagram showing relevant classes involved"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![EditCommandClassDiagramDiagram](images/EditCommandClassDiagram.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "underthehai"
        },
        "content": "#### Editing a TravelPlan or TravelPlanObject"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Given below is an example usage scenario and how the edit mechanism behaves at each step."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![EditActivityDiagram](images/EditActivityDiagram.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Below is a sequence diagram that shows a scenario whereby the user edits a specified activity in Wanderlust"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "underthehai"
        },
        "content": "The TravelPlan Object or TravelPlan by calling `Logic#execute()` which returns a `CommandResult`. From `CommandResult`, the Ui will then"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "underthehai"
        },
        "content": "show a message about the successful edited object."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![EditSequenceDiagram](images/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* Note: Due to limitation of PlantUML which do not have an `sd reference frame` implementation,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "underthehai"
        },
        "content": "the image below contains further details from the `execute` reference frame from the above sequence diagram."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![EditSequenceDiagram](images/EditSequenceRef.png)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### Design Consideration"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Aspect: How edit executes"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- **Alternative 1 (Current Choice)**: Editing in the current travelplan directory"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  - Pros: Only require the index shown on the UI to identify the travelplan object to be edited"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  - Cons: More work has to be done to sync the retrieval of lists of travel plan object that corresponds to the current travelplan directory"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- **Alternative 2**: Require the user to switch travel plan object tabs within the travelplan to edit the specified travelplan object"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  - Pros: User will not require to specify the type of travelplan object to be edited"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  - Cons: Still require user to specify editing of a travelplan object or travelplan"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### Adding a TravelPlan or TravelPlanObject"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "timjkong"
        },
        "content": "*Wanderlust*\u0027s Ui allows users to add a `TravelPlan` to the `TravelPlanner`, an `Activity` to the `Wishlist` and a `TravelPlanObject`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "timjkong"
        },
        "content": "to the `TravelPlan` in the current directory."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`MainWindow#executeCommand()` is called when the user enters a `add` command into the application. `MainWindow#executeCommand()`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "timjkong"
        },
        "content": "adds the TravelPlan/TravelPlanObject by calling `Logic#execute()` which returns a `CommandResult`. `Logic#execute()` also sets the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "timjkong"
        },
        "content": "the `Directory` of the `ObservableDirectory` to the updated `Directory` after adding the TravelPlan/TravelPlanObject so the Ui displays"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "timjkong"
        },
        "content": "the updated list of `TravelPlan`s/`TravelPlanObject`s. From `CommandResult`, the `ResultDisplay` Ui will then output a text confirming"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "timjkong"
        },
        "content": "to the user that the command was successfully executed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "timjkong"
        },
        "content": "The activity diagram below shows a scenario whereby a user adds inputs an add command:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "timjkong"
        },
        "content": "![AddActivityDiagram](images/AddActivityDiagram.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "timjkong"
        },
        "content": "The sequence diagram below shows a scenario whereby a user adds an `Activity` to the `TravelPlan`/`Wishlist` in the current directory:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "timjkong"
        },
        "content": "![AddActivitySequenceDiagram](images/AddActivitySequenceDiagram.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### Design Consideration:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Aspect: How to add `TravelPlanObject`s to the `TravelPlan` in the current `Directory`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "timjkong"
        },
        "content": "- **Alternative 1 (Current Choice)**: Use individual add commands for each sub-class of `TravelPlanObject`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  - Pros: Greater abstraction and a more logical implementation since there is a command for each sub-class."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  - Cons: Greater repetition of code."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "timjkong"
        },
        "content": "- **Alternative 2**: Using a `AddTravelPlanObjectCommand` class."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  - Pros: Lesser repetition of code."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  - Cons: Lesser abstraction."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Deleting a TravelPlan or TravelPlanObject"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "*Wanderlust*\u0027s Ui allows users to delete a `TravelPlan` from the `TravelPlanner`, an `Activity` from the `Wishlist` and a `TravelPlanObject`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "from the `TravelPlan` in the current directory."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`MainWindow#executeCommand()` is called when the user enters a `delete` command into the application. `MainWindow#executeCommand()`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deletes the TravelPlan/TravelPlanObject by calling `Logic#execute()` which returns a `CommandResult`. `Logic#execute()` also sets the"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "the `Directory` of the `ObservableDirectory` to the updated `Directory` after deleting the TravelPlan/TravelPlanObject so the Ui displays"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "the updated list of `TravelPlan`s/`TravelPlanObject`s. From `CommandResult`, the `ResultDisplay` Ui will then output a text confirming"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "to the user that the `delete` command was successfully executed."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The activity diagram below shows a scenario whereby a user inputs the `delete` command:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "![DeleteActivityDiagram](images/DeleteActivityDiagram.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The sequence diagram of the `delete` command has been shown above under the [Logic Component](#logic-component) of the developer guide."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Design Consideration:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Aspect: How to delete a `TravelPlanObject` from the `TravelPlan` in the current `Directory`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- **Alternative 1 (Current Choice)**: Use individual delete commands for each sub-class of `TravelPlanObject`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Pros: Greater abstraction and a more logical implementation since there is a command for each sub-class."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Cons: Greater repetition of code."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- **Alternative 2**: Using a `DeleteTravelPlanObjectCommand` class."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Pros: Lesser repetition of code."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Cons: Lesser abstraction and the logic will be reliant on one class."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "### Copy feature"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The copy mechanism supports copying an `activity` from `Wishlist` to a specific `TravelPlan`. It is facilitated by the"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "add mechanism, except activities can be added to **any** `TravelPlan`  in the `TravelPlanner`, referenced by their index"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "*(travel plan index)*. The copy mechanism adds a **deep copy** of the activity in `Wishlist` to the specified `TravelPlan`,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "not the same instance. Thus, if any activity was edited in one directory, it should not affect all other copies."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The copy command can only be called when"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "the current directory is the wishlist. Hence, index used to reference activities *(activity index)* refers to that in"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "the `filteredWishlist` in `Model`. This means, even if the `find` command is used to filter the activities in the"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "wishlist, the indexes in the `filteredWishlist` will be updated accordingly (and so will the Ui). Hence, as long as the"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "user uses the index as displayed in the Ui, the correct activity will be referenced."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The following sequence diagram shows how the copy operation works:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "![CopySequenceDiagram](images/CopySequenceDiagram.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":information_source: **Note:** The lifeline for `CopyCommandParser` and"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "`CopyCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "diagram."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":information_source: **Note:** The indexes used by CopyCommand in the `execute()` method (after parsing) is zero-based."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `copy` command:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "![CopyActivityDiagram](images/CopyActivityDiagram.png)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Aspect: How to duplicate activity *(deep/shallow copy)*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "- **Alternative 1 (Current Choice)**: Using a deep copy."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Pros: More flexibility to have different variations of the activity in different directories (e.g. different dates/times, etc)."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Cons: Each instance is not synced with the rest. Users have to update each copy separately if they wish to do so."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    *However, there is flexibility to extend other commands (e.g. Edit command) to update all deep copies of the same activity.*"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "- **Alternative 2**: Using a shallow copy."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Pros: Only one instance of each activity means users can update all copies of the activity at once."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Cons: Less flexibility to change a copied activity without affecting other copies."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "- **Alternative 3**: Have variations of the copy command to allow both deep/shallow copy."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Pros: Best of both worlds. Allows for flexibility and convenience at the same time."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Cons: Harder to implement. Users need a way to differentiate deep/shallow copies to avoid unintentionally editing"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    a shallow copy. Potentially more edge cases to think about and handle."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "### Move Feature"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The move mechanism makes use of both the copy and delete mechanism."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "### Find Feature"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Current implementation of Find feature is facilitated by `NameContainsKeywordsPredicate` which implements"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "`Predicate\u003cNameable\u003e` and has the **test** method overriden with a custom implementations."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The `NameContainsKeywordsPredicate#test(Nameable)` is as follows:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* loops through the **keywords** (of type `List\u003cString\u003e`) and return true if there is any match with the `Nameable`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "`Nameable` provides the following operation:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* `Nameable#getName()` - Return the name attribute of a `TravelPlanObject`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "`NameContainsKeywordsPredicate` will be passed to `Model#updateFilteredXYZList(Predicate)`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "(`updateFilteredActivityList`, etc.). The filtered list will then be updated according to the given `Predicate` and"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "automatically reflected on the Ui."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The class diagram shows the relevant classes involved:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "![FindCommandClassDiagram](images/DGFindCommandClassDiagram.png)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The following sequence diagram shows how the find operation works:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the find command:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "![FindActivityDiagram](images/FindActivityDiagram.png)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Has a need to store their travel plans in an organised manner"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Has a need to store activities that they may visit as a wishlist"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Manage travel plans faster than using a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Removes the need for a physical travel planner. Increase the motivation to plan travelling by making planning easier and interactive."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | new user                                   | read the user guide            | be familiar with the usages and features                |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | save activities in a wishlist               | use it for future travel plans      |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | add items to a travel plan             | note down important items related to my travel plan      |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | delete an item       | remove unwanted items              |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | modify an item       | edit any last minute changes              |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | frequent user                              | have a list of items    | easily see my travel plans              |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | be able to switch between travel plans   | navigate to travel plans easily              |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | input accommodation details         | easily remember where I am going to stay           |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | input cost of activity  | track the price of each activities easily                      |"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | input timing to an activity         | plan a schedule for my travel plan               |"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | record particulars of my friends travelling with me         | make group reservations/ bookings more convenient.  |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | sort items  | view my items in a preferred manner            |"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | create priority levels for activities | rank the level of importance of each activities    |"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `*`      | user                                       | have a feature to search  | find and filter my desired items efficiently  |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `*`      | user                                       | have a move and copy feature | move/copy activities in my wishlist to my travel plan easily  |"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `*`      | user                                       | be able to switch tabs | view my activities, accommodation and friends easily |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "(For all use cases below, the **System** is the `Wanderlust` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC01 - Navigate to a specific travel plan**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User requests to navigate to a specific travel plan."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  Wanderlust navigates to the travel plan that user requested."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. The specific travel plan doesn\u0027t exist."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC02 - Navigate to the wishlist**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User requests to navigate to the wishlist."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  Wanderlust navigates to wishlist."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 1a. User is already on wishlist."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 1a1. Wanderlust remains on wishlist."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC03 - Add a travel plan**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User requests to add a travel plan"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  Wanderlust creates the newly travel plan and directs user to the new travel plan."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC04 - Add an activity**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to add an activity."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows the added activities in the current directory."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC05 - Add an accommodation**"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to add an accommodation."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows the added accommodation in the current travel plan."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User is at the wishlist."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to add accommodation."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC06 - Add a friend**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to add a friend."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows the added friend in the current travel plan."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User is at the wishlist."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 1a1. User requests to add a friend."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC07 - Delete a travel plan**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User requests to delete a travel plan."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  Wanderlust shows that the travel plan has been deleted."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1b. The travel plan specified does not exist."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC08 - Delete an activity**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to delete an activity."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows that the activity has been deleted."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2b. The activity specified does not exist."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC09 - Delete an accommodation**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to delete an accommodation."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows that the accommodation has been deleted."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User is at the wishlist."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to delete accommodation."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2b. The accommodation specified does not exist."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC10 - Delete a friend**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to delete a friend."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows that the friend has been deleted."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User is at the wishlist."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 1a1. User requests to delete a friend."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2b. The friend specified does not exist."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC11 - Edit a travel plan**"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to edit travel plan."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust shows that the travel plan has been edited."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "underthehai"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "underthehai"
        },
        "content": "*  1a. User is at the wishlist."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2b. The travel plan specified does not exist."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC12 - Edit an activity**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to edit an activity."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows that the activity has been edited."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 1a. User \u003cins\u003enavigates to the wishlist (UC2).\u003c/ins\u003e."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2b. The activity specified does not exist."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC13 - Edit an accommodation**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to edit an accommodation."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows that the accommodation has been edited."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User is at the wishlist."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 1a1. User requests to edit an accommodation."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2b. The accommodation specified does not exist."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC14 - Edit a friend**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to edit a friend."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows that the friend has been edited."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User is at the wishlist."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 1a1. User requests to edit a friend."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2b. The friend specified does not exist."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Use case: UC15 - View activities**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to view activities."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows the list of activities."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 1a. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC16 - View friends in travel plan**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to view friends."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows the list of friends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "**Use case: UC17 - View accommodations in travel plan**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  User requests to view accommodation."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3.  Wanderlust shows the list of accommodation."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    **Extensions**"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * 2a. The input command format is invalid."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "**Use case: UC18 - Clear the travel planner**"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "1.  User requests to clear the travel planner."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "2.  Wanderlust clears the travel planner."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC19 - Sort activity list in travel plan**"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to sort activity list by cost."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust returns sorted list of activities by decreasing cost."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC20 - Sort accommodation list in travel plan**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to sort accommodation list by date."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust returns sorted list of accommodation by date in chronological order."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2b. User is still in wishlist."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    *2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC21 - Sort friend list in travel plan**"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to sort friend list by name."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust returns sorted list of name in alphabetical order."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2b. User is still in wishlist."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    *2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC22 - Find activity in travel plan**"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to find activities according to keyword."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust returns a filtered list of activities that contain the keyword."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2b. Activity list do not contain the keyword input by user."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2b1. Wanderlust returns an empty list."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC23 - Find accommodation in travel plan**"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to find accommodation according to keyword."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust returns a filtered list of accommodation that contain the keyword."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2b. Accommodation list do not contain the keyword input by user."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2b1. Wanderlust returns an empty list."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC24 - Find friend in travel plan**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1).\u003c/ins\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to find friends according to keyword."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust returns a filtered list of friends that contain the keyword."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2b. friend list do not contain the keyword input by user."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2b1. Wanderlust returns an empty list."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC25 - Move activity from wishlist to travel plan**"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User is at wishlist directory."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to move an activity from wishlist to his desired travel plan."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust transfers the activity to the desired travel plan, deleting the specific activity from the wishlist."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 1a. User is at a travel plan."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 1a1. Wanderlust shows an error message when user request to move an activity in a travel plan."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC26 - Copy activity from wishlist to travel plan**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User is at wishlist directory."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. User requests to copy an activity from wishlist to his desired travel plan."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "3. Wanderlust copies the activity to the desired travel plan."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 1a. User is at a travel plan."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 1a1. Wanderlust shows an error message when user request to copy an activity in a travel plan."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC27 - Help**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User requests for help to input specific commands."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Wanderlust shows a pop-up window, containing a link to Wanderlust\u0027s user guide for help."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Use case: UC28 - Exit**"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. User requests to exit Wanderlust."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Wanderlust shuts down."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "timjkong"
        },
        "content": "1.  Should work on any mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2.  The travel planner should be able to hold up to 1000 travel plans without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "timjkong"
        },
        "content": "3.  Should be able to respond to user commands within 1 second."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "timjkong"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "timjkong"
        },
        "content": "5.  Should be a single-user product."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "timjkong"
        },
        "content": "6.  Users familiar with JSON should be able to read and edit the storage file."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "timjkong"
        },
        "content": "7.  Should work without internet connection."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "8.  Should not crash when data is given in compatible formats."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "9.  The app should be accessible via the downloaded JAR file without any other installations needed."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Wishlist**: A list of potential activities"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Travel plan**: A list of accommodations and activities in a specified location that include `name`, `start_date` and `end_date`"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Activity**: Include `name`, `cost`, `location`, `datetime`, `importance`"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Accommodation**: Include `name`, `location`, `cost`, `startdate` and `enddate` to it"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Friend**: Contains information about a given friend `name`, `mobile number` and `passport number`"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Directory**: The two possible directories are `travelplan`, `wishlist`"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Navigate**: Use the `goto` command to move between directories"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **View**: Use the `show` command to provide a list of specified travel plan object"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "underthehai"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Run jar file in command prompt and enter `java -jar wanderlust.jar`: Expected: Shows the GUI with a set of sample data. The window size may not be optimum."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Saving window preferences"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Re-launch the app by running the jar file in the command prompt and enter `java -jar wanderlust.jar`.\u003cbr\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Deleting an activity/accommodation/friend while all activities/accommodation/friends are being shown. We will use `friend` as an example."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Show all friends using the `show -friend` command. Multiple Friends in the list."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `delete -friend 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: First Friend is deleted from the friend list. Details of the deleted friend shown in the status message."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `delete -friend 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: No Friend is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Other incorrect delete commands to try: `delete`, `delete -friend x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Deleting a travelplan."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    a. Test case: `delete -travelplan 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: First travel plan is deleted from the travel plan list. Details of the deleted travel plan shown in the status message."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    c. Test case: `delete -travelplan 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Expected: No travel plan is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    d. Other incorrect delete commands to try: `delete`, `delete -travelplan x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Expected: Similar to previous."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Adding an activity/accommodation/friend while all activities/accommodation/friends are being shown. We will use `friend` as an example."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Navigate to a valid directory using `goto -travelplan x` (where x is a valid index)"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `add -friend n/Tom p/E1234567X m/81234567`\u003cbr\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: New Friend is added to the friend list. Details of the added friend shown in the status message."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `add n/Jerry p/E1234567M m/81234561`\u003cbr\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Add object type is not specified. No Friend is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `add -friend n/Spark p/E1234567A m/81234568 i/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Importance parameter is not valid for Friend. No Friend is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   e. Other incorrect add commands to try: `add`, `add -friend n/Harry`\u003cbr\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Adding a travel plan."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    a. Test case: `add -travelplan n/Europe Trip sd/2021-01-10 ed/2021-02-10`\u003cbr\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "       Expected: New travel plan is add to the travel plan list. Details of the travel plan shown in the status message."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    b. Test case: `add n/Europe Trip sd/2021-01-10 ed/2021-02-10`\u003cbr\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "       Expected: Add object type is not specified. No travel plan is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    c. Test case: `add n/Europe Trip sd/2021-01-10 ed/2021-02-10 c/1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "       Expected: Cost parameter is not valid for travel plan. No trave plan is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    d. Other incorrect add commands to try: `add`, `add -travelplan n/Europe`\u003cbr\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Expected: Similar to previous."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### Edit"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "underthehai"
        },
        "content": " - Note `x` refers to a valid index"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Editing an activity/accommodation/friend while all activities/accommodation/friends are being shown. We will use `activity` as an example."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Test case: `edit -activity x i/4`\u003cbr\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Edit activity at specified index `x`. Activity selected has updated importance of `4` Details of the activity is shown in the status message."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `edit -activity x p/E1234593P`\u003cbr\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Passport parameter is not valid for Activity. No Activity is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `edit x n/Ice Skating`\u003cbr\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Edit object type is not specified. No Activity is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Other incorrect add commands to try: `edit -activity`\u003cbr\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Editing a travel plan"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Test case: `edit -travelplan x n/New Trip`\u003cbr\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Edit the travel plan at specified index `x`. Travel plan selected has updated name of `new Trip` Details of the travel plan is shown in the status message."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `edit -travelplan x c/123`\u003cbr\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Cost parameter is not valid for travel plan. No travel plan is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `edit x n/Europe`\u003cbr\u003e"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Edit object type is not specified. No travel plan is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Other incorrect add commands to try: `edit -travelplan`\u003cbr\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### Show"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Showing an activity/accommodation/friend while in a travel plan directory. We will use `accommodation` as an example."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Currently in a travel plan directory."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `show -accommodation`\u003cbr\u003e"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Show the accommodation list in the accommodation tab."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `show -accommodation 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid command format. Error details shown in the status message."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `show -accommodation` while in wishlist. \u003cbr\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `show` command is not valid in wishlist. Error details shown in the status message."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   e. Other incorrect show commands to try: `show -accommodation c/20`\u003cbr\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### Find"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "underthehai"
        },
        "content": " - Note `y` refers to keyword provided by user"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " - Use the `show` command to view back the unfiltered list."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Finding an activity/accommodation/friend while in a travel plan directory. We will use `activity` as an example."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Show list of activity using `show -activity` command. Currently in a travel plan directory."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `find -activity y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Find all activities that contain y. Activity tab will be updated and display the activites that matches the keyword(s) `y`."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `find -activity`\u003cbr\u003e"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Cannot have empty field for the keyword. Error details shown in the status message."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Other incorrect add commands to try: `find`, `find -travelplan`\u003cbr\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid command format. Error message is thrown."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Finding an activity while in a wishlist."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Currently in the `wishlist` directory."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `find -activity y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Find all activities that contain y. Activity tab will be updated and display the activites that matches the keyword(s) `y`."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `find -activity`\u003cbr\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Cannot have empty field for the keyword. Error details shown in the status message."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `find -accommodation y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Accommodation is not valid in wishlist. Error details shown in the status message."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Other incorrect add commands to try: `find`, `find -friend y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid command. Error message is thrown."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### Goto"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Navigate to a `travelplan` or `wishlist` directory."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Test case: `goto -travelplan x` (where x is a valid index)\u003cbr\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Navigates to the `travelplan` at specified index `x` . Details of the `travelplan` is shown in the status message."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `goto -wishlist` (where x is a valid index)\u003cbr\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Navigates to the `wishlist`. Details of `wishlist` is shown in the status message."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `goto -travel plan 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Index is invalid, need to start from 1. Directory remains the same. Error details shown in the status message."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `goto -wishlist 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Index not required for `wishlist`. Directory remains the same. Error details shown in the status message."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   e. Other incorrect add commands to try: `goto`, `goto -random`\u003cbr\u003e"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Sort"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Sorting an activity/accommodation/friend list while in a `travelplan` directory. We will use `accommodation` as an example."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Currently in a `travelplan` directory."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `sort -accommodation cost`\u003cbr\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Tab switches to `accommodation` tab and returns a sorted list of `accommodation` in the order of decreasing cost."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `sort -accommodation mobile`\u003cbr\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `mobile` is not a valid sort keyword for `accommodation`. Error details shown in the status message."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Other incorrect sort commands to try: `sort`, `sort -accommdoation 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "2. Sorting an activity list in a `wishlist` directory."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Currently in a `wishlist` directory."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `sort -activity datetime`\u003cbr\u003e"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `wishlist` returns a sorted list of `activities` in the order of increasing date and time."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case: `sort -activity mobile`\u003cbr\u003e"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `mobile` is not a valid sort keyword for `activity`. Error details shown in the status message."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `sort -accommodation name`\u003cbr\u003e"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `name` is not a valid sort keyword for `activity`. Error details shown in the status message."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   e. Other incorrect sort commands to try: `sort`, `sort -friend name`\u003cbr\u003e"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Copy"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Copy an activity from the `wishlist` to the specific `travelplan` directory."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " - Note `x` refers to the index of the activity in the `wishlist`."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " - Note `y` refers to the index of the `travelplan`."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Currently in a `wishlist` directory."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `copy x y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `activity` at index `x` in the `wishlist` is copied to the `travelplan` at index `y`."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case:  `copy x y` (Where `x` is more than the size of the activity list in the `wishlist)"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid index provided. Error details shown in the status message."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case:  `copy x y` (Where `y` is more than the total number of travel plans)"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid index provided. Error details shown in the status message."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `copy x y` (When in a `travelplan` directory)."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid command call at `travelplan` directory. `Copy` can only be called in `wishlist` directory. Error details shown in the status message."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   e. Other incorrect copy commands to try: `copy`, `copy x`, `copy y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Move"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Move an activity from the `wishlist` to the specific `travelplan` directory. The activity will be deleted from the `wishlist`."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " - Note `x` refers to the index of the activity in the `wishlist`."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " - Note `y` refers to the index of the `travelplan`."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   a. Prerequisites: Currently in a `wishlist` directory."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   b. Test case: `move x y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: `activity` at index `x` in the `wishlist` is copied to the `travelplan` at index `y`."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case:  `move x y` (Where `x` is more than the size of the activity list in the `wishlist)"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid index provided. Error details shown in the status message."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   c. Test case:  `move x y` (Where `y` is more than the total number of travel plans)"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid index provided. Error details shown in the status message."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   d. Test case: `move x y` (When in a `travelplan` directory)."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      Expected: Invalid command call at `travelplan` directory. `Copy` can only be called in `wishlist` directory. Error details shown in the status message."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   e. Other incorrect copy commands to try: `move`, `move x`, `move y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "underthehai"
        },
        "content": "      Expected: Error message is thrown."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Clear"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "1. Clear the entire data in wanderlust and returns an empty travel planner."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    a. Test case: `clear`\u003cbr\u003e"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "       Expected: Returns an empty travel planner. Existing data is wiped."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## *Appendix: Effort*"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Model"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The `Model` of _wanderlust_ is much more complex than AB3. In AB3, the model is only in charge of the Person class, which takes in simple attributes"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "relating to Person objects."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "In _wanderlust_, each travel plan handles a total of 3 different objects, namely, Activity, Accommodation and Friend. Furthermore,"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "_wanderlust_ also have an exclusive wishlist that keep track of Activity objects. Essentially, it is similar to one large model"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "handling 3 x AB3. Complex attributes such as `Cost` is also implemented so that _wanderlust_ can calculate the total cost of the `travelplan`."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Furthermore, the attributes of the different classes have to interact with one another to ensure that they are cohesive."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "For instance, we have to make sure any `activty`/`accommodation` date is within the range of the `travelplan`\u0027s date. The logic behind can be"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "implemented in many ways and we went through a variety of approaches to simplify the logic."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Lastly, the `Model` of _wanderlust_ support higher level features and commands such as sorting, moving and navigating to"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "different directories that were not present in AB3."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Logic"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The complexity of `Logic` was more advanced than AB3. _wanderlust_\u0027s `Logic` supports"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "many more commands compared to AB3, such as `sort`, `goto`, `copy`, `move`, `show` commands. Existing commands from AB3 were also"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "enhanced to handle the complex `Model` of _wanderlust_."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "There was significant effort placed in creating the logic for _wanderlust. The `Logic` of _wanderlust is responsible for"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "at least 3x the `Logic` of AB3. It has to account for the logic of `travelplan`, `wishlist`, `activity`, `accommodation` and `friend` whilst"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "AB3 handles `Person`. Furthermore, additional logic was implemented to account for the navigation of directories and travel plans."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "For example, `ObservableDirectory` class was created to keep track of what directory the user is currently on so that the `Ui` will be"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "able to display the correct `travelplan` or `wishlist`."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Additional efforts were also put into validating user input and ensuring that _wanderlust_\u0027s parser can handle unexpected input smoothly."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The `Storage` was extended to store more classes of _wanderlust_. `activity`, `accommodation`, and `friend` objects have to be organised and"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "stored in a `travelplan`, and all these data will be placed in a JSON file in an organised manner. Essentially, the JSON file will contain"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "data of various `travelplan`s and a `wishlist`, and each `travelplan` will contain more data regarding `activity`, `accommodation`, and `friend`,"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "with each `travelplan` object storing its own attributes as well."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Furthermore, complex attributes such as `wanderlustdate` and `wanderlustdatetime` have to be stored in the JSON file in an approriate format."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Significant time and effort were put into discussing and planning the best way to represent each new attribute in the JSON file."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Ui"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The `Ui` component took us the most amount of time. We have to redesign the entire AB3 Ui to fit _wanderlust_ design."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Alot of effort was placed in planning the structure of the `Ui` so that our user interface will be user-friendly and appealing."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Furthermore, additional logic of navigating between travel plans and switching between the activity/accommodation/friend tabs was implemented"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "so that users can use the application smoothly. We also spent a considerable amount of time in studying javafxml so that we are able to implement an"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "entirely new UI with icons and navigation options, making it a more interactive experience for the users as compared to the single page view of AB3\u0027s Ui."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Overall"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "All in all, this project was a challenging one for the _wanderlust_ team. We started off with many ideas and features that were seemed"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "very appealing. However, we eventually decided that they were not suitable due to time constraints. In the first iteration, time and effort were placed"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "in brainstorming and coming up with a concrete and feasible product. Throughout the weeks, we made consistent efforts to study the source code, modify existing features and"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "create new features for _wanderlust_. There were high standards placed amongst us in ensuring that all of us put in time and effort in building _wanderlust_."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Rigorous testing, trial and error were fundamental in the process so that we can deliver _wanderlust_ within the timeline. Whilst _wanderlust_ may not be"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "the perfect travel planner application, this journey was a memorable one filled with teamwork and perseverance, and we are all proud of the end product."
      }
    ],
    "authorContributionMap": {
      "underthehai": 274,
      "timjkong": 37,
      "jeannetoh99": 80,
      "jiaweiteo": 581,
      "lyeyixian": 177,
      "-": 242
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "# Wanderlust v1.4 User Guide"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLust helps tech-savvy travellers to plan their trips in a structured and efficient manner by providing them with a holistic travel planner."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "It is optimized for CLI users so that activites and details can be added faster by typing in commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* [Tutorial Guide](#tutorial-guide)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* [Directories](#directories)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Parameters](#parameters)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Activity Parameters](#activity-parameters)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Accommodation Parameters](#accommodation-parameters)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Friend Parameters](#friend-parameters)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Travel Plan Parameters](#travel-plan-parameters)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Goto](#goto)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Goto a Travel Plan (G)](#1-goto-a-travel-plan-g)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Goto Wishlist (G)](#2-goto-wishlist-g)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Add](#add)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Adding a Travel Plan (G)](#1-adding-a-travel-plan-g)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Adding an Activity (L)](#2-adding-an-activity-l)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Adding an Accommodation (L)](#3-adding-an-accommodation-l)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        4. [Adding a Friend (L)](#4-adding-a-friend-l)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Delete](#delete)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Deleting a Travel Plan (G)](#1-deleting-a-travel-plan-g)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Deleting an Activity (L)](#2-deleting-an-activity-l)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Deleting an Accommodation (L)](#3-deleting-an-accommodation-l)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        4. [Deleting a Friend (L)](#4-deleting-a-friend-l)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Edit](#edit)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Editing a Travel Plan (G)](#1-editing-a-travel-plan-g)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Editing an Activity (L)](#2-editing-an-activity-l)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Editing an Accommodation (L)](#3-editing-an-accommodation-l)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        4. [Editing a Friend (L)](#4-editing-a-friend-l)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * [Find](#find)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        1. [How it works](#how-it-works)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        2. [Finding activities (L)](#1-finding-activities-l)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        3. [Finding accommodations (L)](#2-finding-accommodations-l)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        4. [Finding friends (L)](#3-finding-friends-l)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * [Show](#show)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        1. [Showing activity tab (L)](#1-showing-activity-tab-l)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        2. [Showing accommodation tab (L)](#2-showing-accommodation-tab-l)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        3. [Showing friend tab (L)](#3-showing-friend-tab-l)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    * [Sort](#sort)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        1. [Sorting by cost (L)](#1-sorting-by-cost-l)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        2. [Sorting by date (L)](#2-sorting-by-date-l)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        3. [Sorting by datetime (L)](#3-sorting-by-datetime-l)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        4. [Sorting by importance (L)](#4-sorting-by-importance-l)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        5. [Sorting by name (L)](#5-sorting-by-name-l)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        6. [Sorting by passport (L)](#6-sorting-by-passport-l)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        7. [Sorting by mobile (L)](#7-sorting-by-mobile-l)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * [Copy](#copy)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        1. [Copying an activity (L)](#1-copying-an-activity-l)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * [Move](#move)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        1. [Moving an activity (L)](#1-moving-an-activity-l)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * [Clear](#clear)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        1. [Clearing the data (G)](#1-clearing-the-data-g)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * [Help](#help)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        1. [Refer to UserGuide (G)](#1-refer-to-userguide-g)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * [Exit](#exit)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        1. [Exiting the application (G)](#1-exiting-the-application-g)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "1. Ensure you have Java `11` or above installed in your computer."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "2. Download the latest `Wanderlust.jar` [here](https://github.com/AY2021S1-CS2103-T14-3/tp/releases)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for Wanderlust."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "4. Run `java -jar wanderlust.jar` in the command prompt to start the application."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "5. Type the command in the command box and press Enter to execute. You can find the list of commands available in the [Command Summary](#command-summary)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Tutorial Guide"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Here are the steps you can follow to get familiar with _Wanderlust_. Note that this tutorial serves as a simple guide to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "get you started on _Wanderlust_. It does not contain all the commands that _Wanderlust_ entails."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Command | Description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`clear` | Remove all preset data from Wanderlust"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`add -travelplan n/Singapore sd/2021-05-05 ed/2021-06-06` | Adds a Singapore travel plan to the travel plan list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`goto -travelplan 1` | Go to the Singapore travel plan"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`add -friend n/Tom p/E1234567K m/84329182` | Add a friend name `Tom` with passport number `E1234567K` and mobile number `84329182`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`add -accommodation n/Lloyd\u0027s Inn l/Singapore c/200 sd/2021-01-01 ed/2021-01-02` | Add an accommodation name `Lloyd\u0027s Inn` with location at `Singapore` and a cost of `200`, and the start date of `2021-01-01` and end date of `2021-01-02`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`find -friend tom` | Finds all friend with name tom"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`delete -friend 1` | Removes friend at index 1 in the friend list shown"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`show -activity` | Switch to the activity tab"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "There are a total of 12 general commands."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "The table briefly describes the commands and its usage. Full details will be given under [Features](#features)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Command | Parameters | Description"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | ------------- | -------------"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`add -OBJECT` | `OBJECT` activity/ accommodation/ friend/ travelplan | Creates the given object type"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`delete -OBJECT INDEX` | `OBJECT` activity/ accommodation/ friend/ travelplan \u003cbr\u003e `INDEX` Specific number of the indexed list object | Deletes the given object type"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`edit -OBJECT INDEX` | `OBJECT` activity/ accommodation/ friend/ travelplan \u003cbr\u003e `INDEX` Specific number of the indexed list object| Edits the details of the given object type"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`goto -DIRECTORY` | `DIRECTORY` wishlist/ travelplan with `INDEX` | Navigate to the specific travel plan/ wishlist"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`find -OBJECT KEYWORD` | `OBJECT` activity/ accommodation/ friend \u003cbr/\u003e`KEYWORD` keywords to search for  | Finds the given object type whose names contain any of the given keywords"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`show -OBJECT` | `OBJECT` activity/ accommodation/ friend | Navigate to the specific travel plan object tab"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`sort -OBJECT TYPE` |`OBJECT` activity/ accommodation/ friend \u003cbr/\u003e`TYPE` cost/ name/ importance/ date/ passport/ mobile | Sorts the specific travel plan object with respect to the given type"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`copy ACTIVITY_INDEX TRAVELPLAN_INDEX` | `ACTIVITY_INDEX` specific number of target activity \u003cbr/\u003e`TRAVELPLAN_INDEX` specific number of target TravelPlan | Copy the specified activity from wishlist to the travelPlan"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`move ACTIVITY_INDEX TRAVELPLAN_INDEX` | `ACTIVITY_INDEX` specific number of target activity \u003cbr/\u003e`TRAVELPLAN_INDEX` specific number of target TravelPlan | Move the specified activity from wishlist to the travelPlan"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`clear` | not applicable | Clear all data"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`exit` | not applicable | Exit the application"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`help`| not applicable | Provide a link to access Wanderlust UserGuide for help"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "## Directory"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "There are two directories within Wanderlust. They are `wishlist` and `traveplan`. You will always be at the Wishlist directory when you open the app.\u003cbr/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "The table compares a list of commands available at each directory."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Wishlist | Travel plan"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "-------------  | -------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`goto -DIRECTORY`|`goto -DIRECTORY`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`show -activity`| `show -OBJECT`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`sort -activity` | `sort -OBJECT`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`find -activity`| `find -OBJECT`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`add -activity` |  `add -OBJECT`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`delete -activity`| `delete -OBJECT`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`edit -activity` | `edit -OBJECT`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`move ACTIVITY_INDEX TRAVELPLAN INDEX`  | Not Applicable"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "`copy ACTIVITY_INDEX TRAVELPLAN INDEX` | Not Applicable"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`clear` | `clear`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`help` | `help`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`exit` | `exit`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "## Parameters"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "The tables below show the different type of parameters each object requires."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Do note that all parameters stated are compulsory when creating the object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Declaration of the parameters strictly follows the format given."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Activity Parameters"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Name of Parameter | Description | Format"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "underthehai"
        },
        "content": "------------ | ------------- | -------------"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`n/NAME` | Name of the activity. | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain alphanumeric characters, \u003ccode\u003e,\u003c/code\u003e, \u003ccode\u003e\u0027\u003c/code\u003e and spaces\u003c/li\u003e\u003cli\u003eShould not be blank\u003c/li\u003e\u003cli\u003eMaximum size of 80 characters\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`l/LOCATION` | Location/ Address of the activity | {::nomarkdown}\u003cul\u003e\u003cli\u003eCan take any values\u003c/li\u003e\u003cli\u003eShould not be blank\u003c/li\u003e\u003cli\u003eMaximum size of 200 characters\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`i/LEVEL_OF_IMPORTANCE` | The priority assigned to the activity | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain numbers\u003c/li\u003e\u003cli\u003eShould range from 1 - 5 \u003cbr/\u003e(most important \u003d 5, least important \u003d 1)\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`c/COST` | Cost of the activity | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain positive integer not exceeding MAX_INT\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`d/DATE_AND_TIME` | Date and Time for the activity | {::nomarkdown}\u003cul\u003e\u003cli\u003eFormat is `YYYY-MM-DD HH:MM` \u003cbr/\u003e(24h clock)\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Notes about Activity:**\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Different activities can have the same date and time within _Wanderlust_ travel plan and wishlist."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Two activities are considered the same if they have the same name, location and date and time."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* The name of an activity is case sensitive."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* If an activity is in a travel plan, the activity date and time must be within the start and date end of the travel plan."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* The date and time of an activity is not restricted. (Etc a user can input an insignificant date time such as `1111-11-11 00:00`)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Accommodation Parameters"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Name of Parameter | Description | Format"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "------------ | ----------- | -------------"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`n/NAME` | Name of the accommodation | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain alphanumeric characters, \u003ccode\u003e,\u003c/code\u003e, \u003ccode\u003e\u0027\u003c/code\u003e and spaces\u003c/li\u003e\u003cli\u003eShould not be blank\u003c/li\u003e\u003cli\u003eMaximum size of 80 characters\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`l/LOCATION` | Location/ Address of the accommodation | {::nomarkdown}\u003cul\u003e\u003cli\u003eCan take any values\u003c/li\u003e\u003cli\u003eShould not be blank\u003c/li\u003e\u003cli\u003eMaximum size of 200 characters\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`c/COST` | Cost of the accommodation | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain positive integer not exceeding MAX_INT\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`sd/START_DATE` | Start date of accommodation | {::nomarkdown}\u003cul\u003e\u003cli\u003eFormat is \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`ed/END_DATE` | End date of accommodation | {::nomarkdown}\u003cul\u003e\u003cli\u003eFormat is \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Notes about Accommodation:**\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Different accommodation can have start date and end date overlap within _Wanderlust_ travel plan."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* If an accommodation is in a travel plan, the accommodation date must be within the start and date end of the travel plan."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* The date of an accommodation is not restricted. (Etc a user can input an insignificant date time such as `1111-11-11`)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Friend Parameters"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Name of Parameter | Description | Format"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "underthehai"
        },
        "content": "------------ | ------------- | -------------"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`n/NAME` | Name of the friend. | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain alphanumeric characters, \u003ccode\u003e,\u003c/code\u003e, \u003ccode\u003e\u0027\u003c/code\u003e and spaces\u003c/li\u003e\u003cli\u003eShould not be blank\u003c/li\u003e\u003cli\u003eMaximum size of 80 characters\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`m/MOBILE_NUMBER` | Mobile number of the friend cell mobile | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain numbers starting with 8 or 9 \u003cbr/\u003e(SG mobile number)\u003c/li\u003e\u003cli\u003eShould be 8 digits long\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`p/PASSPORT_NUMBER` | Passport number of the friend passport | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould be in the form \u003ccode\u003e[E] + 7 numbers + [A-Z]\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Notes about Friend:**\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* Passport is case-sensitive and regarded as the identity"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### Travel Plan Parameters"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Name of Parameters | Description | Format"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "underthehai"
        },
        "content": "------------ | ------------- | -------------"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`n/NAME` | Name of the travel plan. | {::nomarkdown}\u003cul\u003e\u003cli\u003eShould only contain alphanumeric characters, \u003ccode\u003e,\u003c/code\u003e, \u003ccode\u003e\u0027\u003c/code\u003e and spaces\u003c/li\u003e\u003cli\u003eShould not be blank\u003c/li\u003e\u003cli\u003eMaximum size of 80 characters\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`sd/START_DATE` | Start date of travel plan| {::nomarkdown}\u003cul\u003e\u003cli\u003eFormat is \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "`ed/END_DATE` | End date of travel plan | {::nomarkdown}\u003cul\u003e\u003cli\u003eFormat is \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e{:/}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Notes about Travel Plan:**\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* Start date of Travel Plan can be any valid date as long as start date is before end date."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  e.g. in `edit -activity INDEX n/NAME`, `NAME` and `INDEX` are parameters which can be used as `edit -activity 1  n/Cultural Visit`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "underthehai"
        },
        "content": "**Notes about the feature section:**\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* Commands that can be used globally and locally are tagged `(G)` for global and `(L)` for local respectively in the **features section** of this user guide."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "underthehai"
        },
        "content": "\u003cbr/\u003e e.g `Adding a Travel Plan (G)`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* Global commands can be used anywhere within Wanderlust."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* Local commands can only be used within the wishlist or specified travel plan."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Words in square brackets `[]` are optional."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "underthehai"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "## Goto"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "The goto command is used to navigate to various directories within the travel planner. The GUI display depends on the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "state of the current directory, which is changed using the goto command. On start, the default directory of the program"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "is `wishlist`.\u003cbr/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Directories in Wanderlust include:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1. `wishlist`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2. `travelplan INDEX`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "#### `wishlist`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![](images/WanderlustScreenshots/GotoWishlist.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "#### `travelplan 1`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "underthehai"
        },
        "content": "![](images/WanderlustScreenshots/GotoTravelPlan.png)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "This allows users to easily add, delete, view and edit information within the wishlist or a specific travel plan without"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "underthehai"
        },
        "content": "having to type their directory names in each command. This also means that **some commands can only be used locally within a"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "underthehai"
        },
        "content": "certain directory, and responses to these commands will depend on the current directory.** They will be marked with (G) for global"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "underthehai"
        },
        "content": "commands and (L) for local commands."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 1. Goto a Travel Plan (G)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Navigates the UI to a specific travel plan."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `goto -travelplan INDEX`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `goto -travelplan 1`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 2. Goto Wishlist (G)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Navigates the UI to the wishlist."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `goto -wishlist`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `goto -wishlist`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Add"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Refer to valid parameters for each travel plan object [here](#parameters)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 1. Adding a Travel Plan (G)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Creates a new travel plan and adds it to Wanderlust’s travel planner."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format of date is in YYYY-MM-DD."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -travelplan n/NAME sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `add -travelplan n/France sd/2021-09-15 ed/2021-09-30`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 2. Adding an Activity (L)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Creates a new activity and adds it to the travel plan/wishlist in the current directory."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format of date is in YYYY-MM-DD and format of time is HH:MM (24h clock).\u003cbr/\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Activities can have the same datetime within the travel plan or wishlist in _Wanderlust_."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -activity n/NAME i/LEVEL_OF_IMPORTANCE l/LOCATION c/COST d/YYYY-MM-DD HH:mm`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `add -activity n/Universal Studios Singapore i/5 l/Sentosa c/88 d/2021-06-09 10:10`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 3. Adding an Accommodation (L)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Creates an accommodation that contains information about the place of stay and adds it to the travel plan in the current directory."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before adding accommodations."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -accommodation n/NAME l/LOCATION c/COST sd/YYYY-MM-DD ed/YYYY-MM-DD`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `add -accommodation n/St Regis Hotel l/Orchard Road c/250 sd/2021-10-11 ed/2021-10-15`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 4. Adding a Friend (L)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Creates a friend object that contains basic information about the user and"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "other travellers and adds it to the travel plan in the current directory."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -friend n/NAME m/MOBILE_NUMBER p/PASSPORT_NUMBER`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `add -friend n/John m/81234567 p/E1234567K`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Delete"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 1. Deleting a Travel Plan (G)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Deletes a travel plan at the given index from the travel planner."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -travelplan INDEX`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `delete -travelplan 1`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 2. Deleting an Activity (L)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Deletes an activity at the given index from the travel plan/wishlist in the current directory."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -activity INDEX`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `delete -activity 1`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 3. Deleting an Accommodation (L)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Deletes the accommodation at the given index from the travel plan in the current directory."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before deleting accommodations."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `delete -accommodation INDEX`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `delete -accommodation 1`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 4. Deleting a Friend (L)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Deletes the friend at a given index from the travel plan in the current directory."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before deleting a friend."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -friend INDEX`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `delete -friend 1`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Edit"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Refer to valid parameters for each travel plan object [here](#parameters)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 1. Editing a Travel Plan (G)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Edits an existing travel plan in the travel planner by its index."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `edit -travelplan INDEX n/NAME sd/YYYY-MM-DD ed/YYYY-MM-DD`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `edit -travelplan 1 n/Paris sd/2020-12-11 ed/2020-12-15`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 2. Editing an Activity (L)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Edits an existing activity in the travel plan/wishlist in the current directory."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `edit -activity INDEX n/NAME i/LEVEL_OF_IMPORTANCE l/LOCATION c/COST d/YYYY-MM-DD HH:mm`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `edit -activity 3 n/Visit theme park i/5 l/Sensota c/80 d/2020-12-11 15:00`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### 3. Editing an Accommodation (L)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Edits an existing accommodation in the travel plan in the current directory."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before editing an accommodation."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `edit -accommodation INDEX n/NAME l/LOCATION c/COST sd/YYYY-MM-DD ed/YYYY-MM-DD`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `edit -accommodation 3 n/The Hotel l/Bukit Timah c/60 sd/2020-12-11 ed/2020-12-15`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### 4. Editing a Friend (L)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Edits an existing friend in the travel plan in the current directory."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before editing a friend."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `edit -friend INDEX n/NAME m/MOBILE_NUMBER p/PASSPORT_NUMBER`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `edit -friend 1 n/John m/81234567 p/E7654321K`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "## Find"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### How it works"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Travel Plan Object matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 1. Finding activities (L)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Finds activities in the travel plan/wishlist in the current directory whose names contain any of the given keywords."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `find -activity KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `find -activity bungee visit eat`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 2. Finding accommodations (L)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Finds accommodations in the travel plan in the current directory whose names contain any of the given keywords."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before finding accommodations."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `find -accommodation KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `find -accommodation hotel`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 3. Finding friends (L)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Finds friends in the travel plan in the current directory whose names contain any of the given keywords."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be used within a travel plan. Use `goto -travelplan INDEX` before finding friends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `find -friend KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `find -friend John`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Show"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 1. Showing Activity Tab (L)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Switches the current Ui view to show Activity tab under the travel plan object panel."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "underthehai"
        },
        "content": "This command is available within both wishlist and travelPlan directory."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format/ Example: `show -activity`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 2. Showing Accommodation Tab (L)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Switches the current Ui view to show Accommodation tab under the travel plan object panel."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "underthehai"
        },
        "content": "This command is only available within a travelPlan directory."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format/ Example: `show -accommodation`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 3. Showing Friend Tab (L)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Switches the current Ui view to show Friend tab under the travel plan object panel."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "underthehai"
        },
        "content": "This command is only available within a travelPlan directory."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format/ Example: `show -friend`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Sort"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 1. Sorting by cost (L)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Sorts the given travel plan object list in the order of decreasing cost."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "This command is only applicable to Activity list and Accommodation list."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `sort -OBJECT cost`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `sort -activity cost`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 2. Sorting by date (L)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Sorts the given Accommodation List by the start date of each accommodation,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "starting from the accommodation with the earliest start date."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "underthehai"
        },
        "content": "This command is only applicable to Accommodation list."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `sort -accommodation date`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `sort -accommodation date`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 3. Sorting by datetime (L)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Sorts the given Activity list in the order of increasing datetime,"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "underthehai"
        },
        "content": "starting from the activity with the earliest start date."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "underthehai"
        },
        "content": "This command is only applicable to Activity list."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `sort -activity datetime`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `sort -activity datetime`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 4. Sorting by importance (L)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Sorts the given travel plan object list by its importance level, starting from the highest level of importance."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "This command is only applicable to Activity list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `sort -OBJECT importance`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `sort -activity importance`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 5. Sorting by name (L)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Sorts the given travel plan object list by name."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "This command is applicable to Activity list, Accommodation list and Friend list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `sort -OBJECT name`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `sort -friend name`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 6. Sorting by passport (L)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Sorts the given travel plan object list by passport."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "This command is only applicable to Friend list."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `sort -OBJECT passport`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `sort -friend passport`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 7. Sorting by mobile (L)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Sorts the given travel plan object list by mobile."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "This command is only applicable to Friend list."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `sort -OBJECT mobile`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Example: `sort -friend mobile`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Copy"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 1. Copying an Activity (L)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Copies an activity at a given index from the wishlist to a travel plan at a given index.\u003cbr/\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "underthehai"
        },
        "content": "This command can only be called when the directory is at the wishlist. Use `goto -wishlist` first."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `copy ACTIVITY_INDEX TRAVELPLAN_INDEX`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `copy 2 1`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Move"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 1. Moving an Activity (L)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Moves an activity at a given index from the wishlist to a travel plan at a given index. The moved activity will be"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deleted from the wishlist. \u003cbr/\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command can only be called when the directory is at the wishlist. Use `goto -wishlist` first."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `move ACTIVITY_INDEX TRAVELPLAN_INDEX`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `move 2 1`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Clear"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 1. Clearing the data (G)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Clears all the data within _WanderLust_."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This command ignores any trailing words after \u0027clear\u0027 (provided there is a space after \u0027clear\u0027) and will execute as usual."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Help"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 1. Refer to UserGuide (G)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "underthehai"
        },
        "content": "A pop-up window will provide the link to access Wanderlust UserGuide for help."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Exit"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "underthehai"
        },
        "content": "### 1. Exiting the application (G)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Q: How do I remove existing data when I start the app and start with a blank travel planner?"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "underthehai"
        },
        "content": "A: Type `clear` in the command to remove all preexisting data."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "underthehai": 162,
      "timjkong": 64,
      "jeannetoh99": 54,
      "lyeyixian": 113,
      "jiaweiteo": 96,
      "-": 104
    }
  },
  {
    "path": "docs/diagrams/AddActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": ":User executes add command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "if () then ([command adds TravelPlan/TravelPlanObject specified by user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "to the TravelPlanner/TravelPlan in the current Directory])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    if() then ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    :Add TravelPlan/TravelPlanObject to TravelPlanner/TravelPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    else ([TravelPlan/TravelPlanObject already"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    in TravelPlanner/TravelPlan])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "else([invalid input])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ":Ui outputs error message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "timjkong": 20
    }
  },
  {
    "path": "docs/diagrams/AddActivitySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR_T3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":Parser\" as Parser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":AddActivityCommand\" as AddActivityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"add -activity...\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"add -activity...\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "LogicManager -\u003e Parser :parseCommand(\"add -activity...\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate Parser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Parser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddCommandParser --\u003e Parser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Parser -\u003e AddCommandParser :parse(\" -activity...\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "create AddActivityCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddCommandParser -\u003e AddActivityCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate AddActivityCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddActivityCommand --\u003e AddCommandParser :command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate AddActivityCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddCommandParser --\u003e Parser :command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddCommandParser -[hidden]-\u003e Parser :command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Parser --\u003e LogicManager :command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate Parser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "LogicManager -\u003e AddActivityCommand : execute()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate AddActivityCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddActivityCommand -\u003e Model : isDirectoryTypeTravelPlan()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Model --\u003e AddActivityCommand : isTravelPlan"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "alt isTravelPlan"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    AddActivityCommand -\u003e Model: addTravelPlanObject(toAdd)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    Model --\u003e AddActivityCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "else else"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    AddActivityCommand -\u003e Model: addActivity(toAdd)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    Model --\u003e AddActivityCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "end"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddActivityCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "CommandResult --\u003e AddActivityCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "AddActivityCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate AddActivityCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "LogicManager --\u003e MainWindow"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "timjkong": 91
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete -activity 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete -activity 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteActivity(activity)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveTravelPlanner(travelPlanner)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/CopyActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":User executes copy command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if () then ([current directory is wishlist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u0026\u0026 activity index is valid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u0026\u0026 travelplan index is valid]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  :Copy specified activity into specified travelplan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "else([else]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  :Feedback to user;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 18
    }
  },
  {
    "path": "docs/diagrams/CopySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \":WanderlustParser\" as WanderlustParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \":CopyCommandParser\" as CopyCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \"d:CopyCommand\" as CopyCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "participant \":Activity\" as Activity MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "[-\u003e LogicManager : execute(\"copy 2 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "LogicManager -\u003e WanderlustParser : parseCommand(\"copy 2 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate WanderlustParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "create CopyCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "WanderlustParser -\u003e CopyCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate CopyCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommandParser --\u003e WanderlustParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate CopyCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "WanderlustParser -\u003e CopyCommandParser : parse(\"copy 2 1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate CopyCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "create CopyCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommandParser -\u003e CopyCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate CopyCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommand --\u003e CopyCommandParser : c"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate CopyCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommandParser --\u003e WanderlustParser : c"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate CopyCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommandParser -[hidden]-\u003e WanderlustParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "destroy CopyCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "WanderlustParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate WanderlustParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "LogicManager -\u003e CopyCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate CopyCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommand -\u003e Model : getFilteredActivityList().get(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Model --\u003e CopyCommand : activityToCopy"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommand -\u003e Model : copyActivity(activityToCopy, 0)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "create Activity"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Model -\u003e Activity : Activity(activityToCopy)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate Activity"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Activity --\u003e Model : copiedActivity"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate Activity"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Model -\u003e Model : addActivity(copiedActivity,0)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Model --\u003e CopyCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CommandResult --\u003e CopyCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate CopyCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "CopyCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "destroy CopyCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 88
    }
  },
  {
    "path": "docs/diagrams/DGFindCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Interface Predicate \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Interface Nameable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Class NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Class \"{abstract}\\nTravelPlanObject\" as TravelPlanObject"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Class Activity"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Class Accommodation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Class Friend"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "NameContainsKeywordsPredicate .up.|\u003e Predicate"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObject .up.|\u003e Nameable"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Activity -up-|\u003e TravelPlanObject"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Accommodation -up-|\u003e TravelPlanObject"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Friend -up-|\u003e TravelPlanObject"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Predicate .left.\u003e Nameable"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 26
    }
  },
  {
    "path": "docs/diagrams/DeleteActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ":User executes delete command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "if () then ([command deletes TravelPlan/TravelPlanObject specified by user])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    if() then ([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    :Deletes TravelPlan/TravelPlanObject from TravelPlanner/TravelPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    else ([The index to delete is not valid])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    :Ui outputs error message signalling invalid index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "else([invalid command format])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ":Ui outputs error message signalling invalid format;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 20
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \":WanderlustParser\" as WanderlustParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \"d:DeleteActivityCommand\" as DeleteActivityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[-\u003e LogicManager : execute(\"delete -activity 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "LogicManager -\u003e WanderlustParser : parseCommand(\"delete -activity 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate WanderlustParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteCommandParser --\u003e WanderlustParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser -\u003e DeleteCommandParser : parse(\" -activity 1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "create DeleteActivityCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteCommandParser -\u003e DeleteActivityCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate DeleteActivityCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteActivityCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate DeleteActivityCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteCommandParser --\u003e WanderlustParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e WanderlustParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate WanderlustParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "LogicManager -\u003e DeleteActivityCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate DeleteActivityCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteActivityCommand -\u003e Model : deleteActivity(activityToBeDeleted)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Model --\u003e DeleteActivityCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteActivityCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "CommandResult --\u003e DeleteActivityCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "DeleteActivityCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate DeleteActivityCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 25,
      "-": 44
    }
  },
  {
    "path": "docs/diagrams/EditActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": ":User executes edit command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    if() then ([else])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    :UI show updated travelplan object or travelplan with edited fields;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    else ([duplication occurs])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    :UI output duplication error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "else([invalid input])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ":UI output invalid input error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "underthehai": 17
    }
  },
  {
    "path": "docs/diagrams/EditCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Abstract Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Abstract EditCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Command \u003c|-- EditCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommand -left- Index :target"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommand \u003c|-- EditActivityCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommand \u003c|-- EditAccommodationCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommand \u003c|-- EditFriendCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommand \u003c|-- EditTravelPlanCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "Class EditDescriptor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditAccommodationCommand -[#grey]- EditDescriptor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditActivityCommand -[#grey]- EditDescriptor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditFriendCommand -[#grey]- EditDescriptor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditTravelPlanCommand -[#grey]- EditDescriptor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "underthehai": 30
    }
  },
  {
    "path": "docs/diagrams/EditSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":WanderlustParser\" as WanderlustParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":EditDescriptor\" as EditDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":EditActivityCommand\" as EditActivityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "[-\u003e LogicManager : execute(\"edit -activity 1 i/2 n/Ice Skating\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "LogicManager -\u003e WanderlustParser : parseCommand(\"edit -activity 1 i/2 n/Ice Skating\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate WanderlustParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "WanderlustParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser --\u003e WanderlustParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "WanderlustParser -\u003e EditCommandParser : parse(\"-activity 1 i/2 n/Ice Skating\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseActivity(\"1 i/2 n/Ice Skating\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "create EditDescriptor"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser -\u003e EditDescriptor : buildFromSource(i/2 n/Ice Skating)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditDescriptor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditDescriptor --\u003e EditCommandParser : editActivityDescriptor"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditDescriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "create EditActivityCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser -\u003e EditActivityCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditActivityCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditActivityCommand --\u003e EditCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditActivityCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser --\u003e EditCommandParser : editCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser --\u003e WanderlustParser : editCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditCommandParser -[hidden]-\u003e WanderlustParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "WanderlustParser --\u003e LogicManager : editCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate WanderlustParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditActivityCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "ref over LogicManager, EditActivityCommand, Model : execute"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditActivityCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "underthehai": 76
    }
  },
  {
    "path": "docs/diagrams/EditSequenceRef.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":EditActivityCommand\" as EditActivityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "LogicManager -\u003e EditActivityCommand : execute()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate EditActivityCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditActivityCommand -\u003e Model : getFilteredActivityList()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Model --\u003e EditActivityCommand: lastShownList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditActivityCommand -\u003e EditActivityCommand : createEditedActivity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    activate EditActivityCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditActivityCommand --\u003e EditActivityCommand : editedActivity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    deactivate EditActivityCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    alt isTravelPlan"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditActivityCommand -\u003e Model: setTravelPlanObject(activityToEdit, editedActivity)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Model --\u003e EditActivityCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "else else"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditActivityCommand -\u003e Model: setActivity(activityToEdit, editedActivity)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Model --\u003e EditActivityCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "end"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditActivityCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "CommandResult --\u003e EditActivityCommand : CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "EditActivityCommand --\u003e LogicManager: CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "deactivate EditActivityCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "underthehai": 62
    }
  },
  {
    "path": "docs/diagrams/FindActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ":User executes find command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "if () then ([invalid input])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    :Ui output error message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    :Ui show updated TravelPlanObjectList with the given keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 14
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \":WanderlustParser\" as WanderlustParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \"f:FindActivityCommand\" as FindActivityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[-\u003e LogicManager : execute(\"find -activity sighseeing\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "LogicManager -\u003e WanderlustParser : parseCommand(\"find -activity sighseeing\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate WanderlustParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindCommandParser --\u003e WanderlustParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser -\u003e FindCommandParser : parse(\" -activity sighseeing\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "create FindActivityCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindCommandParser -\u003e FindActivityCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate FindActivityCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindActivityCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate FindActivityCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindCommandParser --\u003e WanderlustParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindCommandParser -[hidden]-\u003e WanderlustParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate WanderlustParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "LogicManager -\u003e FindActivityCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate FindActivityCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindActivityCommand -\u003e Model : updateFilteredActivityList(predicate)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Model --\u003e FindActivityCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindActivityCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "CommandResult --\u003e FindActivityCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FindActivityCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate FindActivityCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 69
    }
  },
  {
    "path": "docs/diagrams/GoToUiActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ":User executes goto command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "if () then ([command causes UI to navigate to specified directory by user])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    if() then ([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    :Navigate to specified directory by user;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    else ([already in the directory])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "else([goto invalid directory])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ":Ui stay on the current directory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 18
    }
  },
  {
    "path": "docs/diagrams/GoToUiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "MainWindow *-down-\u003e TravelPlanObjectListPanel"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "MainWindow *-down-\u003e TravelPlanPanel"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "MainWindow *-down-\u003e TravelPlannerPanel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "TravelPlannerPanel -down-\u003e NameCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "TravelPlanObjectListPanel -down-\u003e ActivityCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "TravelPlanObjectListPanel -down-\u003e AccommodationCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "TravelPlanObjectListPanel -down-\u003e FriendCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 20
    }
  },
  {
    "path": "docs/diagrams/GoToUiSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":TravelPlanPanel\" as TravelPlanPanel UI_COLOR_T3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":WanderLustParser\" as WanderLustParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":GoToCommandParser\" as GoToCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":GoToCommand\" as GoToCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"goto -travelplan 2\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"goto -travelplan 2\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "LogicManager -\u003e WanderLustParser :parseCommand(\"goto -travelplan 2\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate WanderLustParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "create GoToCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLustParser -\u003e GoToCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate GoToCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommandParser --\u003e WanderLustParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate GoToCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLustParser -\u003e GoToCommandParser :parse(\" -travelplan 2\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate GoToCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "create GoToCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommandParser --\u003e GoToCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate GoToCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommand --\u003e GoToCommandParser :command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate GoToCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommandParser --\u003e WanderLustParser :command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate GoToCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommandParser -[hidden]-\u003e WanderLustParser :command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "destroy GoToCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLustParser --\u003e LogicManager :command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate WanderLustParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "LogicManager -\u003e GoToCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate GoToCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommand -\u003e Model : setDirectory(2)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Model --\u003e GoToCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Model -\u003e MainWindow : handleDirectoryChange(directory)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "MainWindow -\u003e TravelPlanPanel :setDirectory(directory)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate TravelPlanPanel"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "TravelPlanPanel --\u003e MainWindow"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate TravelPlanPanel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "CommandResult --\u003e GoToCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "GoToCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate GoToCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "LogicManager --\u003e MainWindow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 83
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class WanderlustParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class XYZTpoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class \"{abstract}\\nXYZCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "LogicManager --\u003e\"1\" WanderlustParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderlustParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "XYZCommandParser ..\u003e XYZTpoCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "XYZTpoCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "note right of XYZTpoCommand: XYZTpoCommand \u003d AddActivityCommand, \\nDeleteAccommodationCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 8,
      "-": 54
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Interface ReadOnlyTravelPlanner \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class TravelPlanner"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class ReadOnlyTravelPlanner"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package TravelPlan {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class TravelPlan"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class ActivityList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class AccommodationList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class FriendList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class UniqueTravelPlanList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package Wishlist {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class Wishlist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package Activity {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class UniqueActivityList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package Accommodation {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class UniqueAccommodationList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package Friend {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class UniqueFriendList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Package Commons {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class \"{abstract}\\nTravelPlanObject\" as TravelPlanObject"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class \"{abstract}\\nDirectory\" as Directory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class ObservableDirectory"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanner .up.|\u003e ReadOnlyTravelPlanner"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ModelManager o--\u003e \"1\" TravelPlanner"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ModelManager -left-\u003e Directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "UserPrefs -[hidden]right-\u003e ReadOnlyTravelPlanner"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ObservableDirectory -down-\u003e Directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ModelManager -left-\u003e ObservableDirectory"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanner -left-\u003e Wishlist"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Wishlist -up-|\u003e Directory"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Wishlist -down-\u003e UniqueActivityList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanner *--\u003e \"1\" UniqueTravelPlanList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "UniqueTravelPlanList o--\u003e \"*\" TravelPlan"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlan -up-|\u003e Directory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlan *--\u003e ActivityList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlan *--\u003e AccommodationList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlan *--\u003e FriendList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ActivityList -down-\u003e UniqueActivityList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "AccommodationList -down-\u003e UniqueAccommodationList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FriendList -down-\u003e UniqueFriendList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "UniqueActivityList o-down-\u003e \"*\" TravelPlanObject"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "UniqueAccommodationList o-down-\u003e \"*\" TravelPlanObject"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "UniqueFriendList o-down-\u003e \"*\" TravelPlanObject"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ActivityList -[hidden]right-\u003e AccommodationList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "AccommodationList -[hidden]right-\u003e FriendList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ModelManager --\u003e\"1\" TravelPlan : filtered list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ModelManager -right-\u003e\"4\" TravelPlanObject : filtered list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 58,
      "-": 30
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Interface TravelPlannerStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class JsonTravelPlannerStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "StorageManager o--\u003e TravelPlannerStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonTravelPlannerStorage .left.|\u003e TravelPlannerStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonTravelPlannerStorage .down.\u003e JsonSerializableTravelPlannerStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonSerializableTravelPlannerStorage .right.\u003e JsonSerializableTravelPlanner"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonSerializableTravelPlanner .down.\u003e JsonAdaptedTravelPlan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonSerializableTravelPlanner .down.\u003e JsonAdaptedActivity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonSerializableTravelPlanner .down.\u003e JsonAdaptedAccommodation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "JsonSerializableTravelPlanner .down.\u003e JsonAdaptedFriend"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 10,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class TravelPlanPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class TravelPlanObjectListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class TravelPlannerPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class NameCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class FriendCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class ActivityCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Class AccommodationCard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "MainWindow *-down-\u003e TravelPlannerPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "MainWindow *-down-\u003e TravelPlanObjectListPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "MainWindow *-down-\u003e TravelPlanPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlannerPanel -down-\u003e NameCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObjectListPanel -down-\u003e AccommodationCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObjectListPanel -down-\u003e ActivityCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObjectListPanel -down-\u003e FriendCard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlannerPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObjectListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "AccommodationCard --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ActivityCard --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FriendCard --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "NameCard --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlannerPanel ..\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanPanel ..\u003e Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObjectListPanel ..\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "TravelPlanObjectListPanel .[hidden].\u003e Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "AccommodationCard ..\u003e Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ActivityCard ..\u003e Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "FriendCard ..\u003e Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "AccommodationCard -[hidden]left- FriendCard"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "ActivityCard -[hidden]left- AccommodationCard"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "NameCard -[hidden]left- ActivityCard"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanObjectListPanel -[hidden]left- TravelPlanPanel"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlanPanel -[hidden]left- TravelPlannerPanel"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "TravelPlannerPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "underthehai": 1,
      "lyeyixian": 33,
      "-": 52
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "title: Wanderlust"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T14-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-T14-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-T14-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "**Wanderlust is a desktop application for planning your travels.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* If you are interested in using Wanderlust, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* If you are interested about developing Wanderlust, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/jeannetoh99.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "title: Toh Xuan Ning Jeanne\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "## Project: Wanderlust"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "WanderLust is a desktop travel-planning application that allows users to plan their trips in a structured and efficient manner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "It is optimised for CLI-proficient users, and comes with a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "It is written in Java, and has approximately 16 kLOC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "This application is part of my team project for an Introduction to Software Engineering (CS2103) module taken at NUS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* Code contributed: [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djeannetoh99)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Major Enhancements**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Implemented **UI**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - What it does:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - Justifications:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - Highlights: example"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            - example"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - Relevant pull requests: [\\#81](), [\\#113](), [\\#193]()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Add **TravelPlan and Wishlist Packages** in model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - What it does:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - Justifications:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - Highlights:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        - Relevant pull requests: [\\#59]()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Linked Up Ui with Logic, Model and MainApp [\\#88]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Minor Enhancements**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Implemented WanderlustDate in model [\\#59](), [\\#78](), [\\#79]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Added **SampleWanderlustDataUtil** in Model [\\#81]()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Implemented **Directory and ObservableDirectory** [\\#86](), [\\#110]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Testing, Bug Fixing \u0026 Defensive Programming**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Added Test Cases for TravelPlan and Wishlist Packages [\\#85]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Added many Test Utilities which are used across all tests [\\#85](), [\\#115]()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Added Test Cases for LogicManager [\\#106]()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Added Defensive code to `ShowCommand` and `DeleteCommand` classes [\\#182](), [\\#183]()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    - Fixed Bugs found in PE ([\\#199](), [\\#197](), [\\#202](), [\\#203](), [\\#222](), [\\#224](), [\\#235]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Provide direction during weekly meetings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Schedule weekly meetings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Lead and contribute to discussions during weekly meetings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Updated the ??? feature ([\\#]())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Contributions to Documentation**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * Added documentations for `show` and `move` features ([\\#18](), [\\#186]())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * Added documentations for `goto` feature (the part explaining about directories in Wanderlust, written in a shared"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    document before UG was transferred to UserGuide.md)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * Added documentations for Table of Contents ([\\#18]())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * Added Ui.png ([\\#53]())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * Added implementation details of the `copy` and `move` feature. ([\\#144](), [\\#150]())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Contributions to team-based TASKS**:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * Helped teammates with debugging and understanding codebase."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Review/Mentoring Contributions**:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Total PRs reviewed:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * PRs reviewed with non-trivial review comments: ([\\#]())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Contributed to forum discussions: ([\\#]())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class: [Reported 7 Bugs in PED](https://github.com/jeannetoh99/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 74
    }
  },
  {
    "path": "docs/team/jiaweiteo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "title: Teo Jia Wei\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Project: Wanderlust"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLust is a desktop travel planner application. It allows users to plan their trips in a structured and efficient manner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "It is written in Java, and has about 18 kLOC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- Code contributed: [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djiaweiteo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- **Major Enhancement**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Implemented **sort feature** [#158](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/158), [#265](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/266), [#270](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/270)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - What it does: Allow users to sort `activity/ accommodation/ friend` based on their desired view. (Etc. Sort activity by cost)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - Justifications: As our target users are travel goers, they would likely want to view a sorted list of activities/ accommodation/ friend that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        is neat and easy to analyse. For example, a user may want to sort its activities by date so that he/she will know the list of events that will be happening in chronological order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        This enhancement improved the product significantly as users will have a convenient way to view their desired order of items."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - Highlights:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            - This enhancement transcends across all 4 components of Wanderlust: `Ui`, `Logic`, `Model` and `Storage`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            - This enhancement is highly coupled with the edit/delete features as these two features make use of the index of a `travelplanobject`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            - For example, when a user sort his activities, the activity list in the `Model` will be updated. In order to use the index reflected in the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            `Ui` on the new activity, the corresponding activity list in `Storage` must be updated and synced with the sorted ordered list reflected in the `Ui`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Implemented **navigation feature** [\\#108](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/108), [\\#100](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/100)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - What it does: Allows users to navigate to different `travelplan` or `wishlist` using the Command Line input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - Justifications: Users will like to navigate to their desired `travelplan` or `wishlist` so that they are able to view the content in the directory on the application and plan their travel visually."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        This enhancement improved the product significantly as it provides user a convenient and fast way to go to their desired `travelplan/wishlist`, improving users\u0027 experience."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "- **Minor Enhancement**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Implemented **Command Line Tab Management** [\\#132](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/132), [\\#265](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/265)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - What it does: Allows users to switch tabs between `activity`, `accommodation` and `friend` within a `travelplan` using the Command Line input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Implemented **feature for the Graphical User Interface**: [\\#157](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/157), [\\#158](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/158)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - What it does: GUI shows the total cost of each `travelplan`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    - Implemented **time logic** [\\#242](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/242)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        - What it does: Prevent users from entering invalid dates."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Provide direction during weekly meetings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Delegate tasks weekly to team members."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Schedule weekly meetings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Modified the delete feature from AB3 to fit Wanderlust  ([\\#84](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/84), [\\#264](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/264))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 66% to 70% (Pull requests [\\#84](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/84), [\\#99](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/99), [\\#100](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/100), [\\#266](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/266), [\\#265](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/265))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * PRs reviewed with non-trivial review comments: [\\#32](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/32), [\\#59](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/59), [\\#103](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/103), [#145](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/145), [#174](ttps://github.com/AY2021S1-CS2103-T14-3/tp/pull/174), [#278](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/278), [#279](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/279)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class: [Reported 15 Bugs in PED](https://github.com/jiaweiteo/ped/issues)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Contribution to User Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Added documentation for the features `add`, `show` and `sort` ([\\#172](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/172), [\\#19](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/19))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Added documentation for Introduction, Table of Contents, Quickstart and Command Summary ([\\#19](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/19))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  * Refine and finalise user guide. ([\\#293](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/284))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Contribution to Developer Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   * Added implementation details of the `delete` feature. ([#82](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/82), [\\#173](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/173))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   * Added implementation details of the `goto` feature. ([#83](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/83), [\\#139](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/139))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   * Use Cases, user stories and manual testing. ([#284](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/284))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "   * Refine and finalise developer guide. ([\\#293](ttps://github.com/AY2021S1-CS2103-T14-3/tp/pull/293))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 67
    }
  },
  {
    "path": "docs/team/lyeyixian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "title: Lye Yi Xian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "## Project: Wanderlust"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "WanderLust is a desktop travel-planning application that allows users to plan their trips in a structured and efficient"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "manner. It is optimised for CLI-proficient users, and comes with a GUI created with JavaFX. It is written in Java, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "has approximately 16 kLOC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "This application is part of my team project for an Introduction to Software Engineering (CS2103) module taken at NUS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Code contributed**: [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dlyeyixian)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Major Enhancement**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Added TravelPlanner and its relevant classes [\\#56](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/56)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * What it does: The main class of Wanderlust which wraps all the other travel plan objects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Added Directory abstract class [\\#159](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/159)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * What it does: Facilitate the switching of view between each TravelPlan and Wishlist"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * Highlight: Initially, encounter issue of needing to typecast everything as Wanderlust have different travel plan objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                 But we eventually figure out a way to work around it by utilising polymorphism and successfully remove"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                 typecasting when using CRUD method on different travel plan objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Minor Enhancement**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Helped in implementation of ObservableDirectory and Ui component [\\#112](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/112)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * What it does: Allows the Ui to listen to changes in ObservableDirectory and updates to show the correct directory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Helped in implementation of showing total cost in Ui component [\\#254](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/254)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * What it does: Binds the TextProperty to the StringProperty of Cost in ObservableDirectory, so it correctly updates when changes happened"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * Highlight: The problem we faced here is that we accidentally increased the coupling of classes in Ui, in particular TravelPlanPanel and TravelPlanObjectListPanel."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                 We managed to solve it by binding properties of JavaFX."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Update Model and ModelManager to fit Wanderlust\u0027s implementations [\\#75](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/75)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Update the whole Storage package to fit Wanderlust\u0027s implementations [\\#82](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/82)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Testing, Bug Fixes, Code Quality Checking \u0026 Defensive Programming**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Added tests to TravelPlanner, ModelManager, UserPrefs to increase coverage from 40.74% to 57.18% [\\#98](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/98)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Added tests to the whole Storage package [\\#130](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/103)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Helped check the implementations and code quality of GoToCommand, SortCommand and their relevant classes and added some defensive code [\\#176](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/176), [\\#185](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/185)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Fixed bugs found in PE dry run [\\#243](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/243), [\\#245](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/245), [\\#246](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/246), [\\#247](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/247)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Lead the team"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Assign roles and responsibilities to each team member"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Manage weekly deadline and make sure the team is on track every week"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Plan and delegate weekly tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Track team member\u0027s weekly progress"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Maintain issue tracker and milestone"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Schedule weekly meetings"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Contribute to discussions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Define and enforce branch protection rules to master branch of team repo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Team-Based Tasks**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Updated product website (renaming, updating links): [\\#33](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/33)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Morph AB3 into Wanderlust (remove ab3 code, rename packages) [\\#136](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/136)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * In charge of integration, making sure everything works when merging into master branch"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * Add documentation for the features `goto` and `find`: [\\#20](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/20), [\\#174](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/174)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * Add 10 use cases [\\#32](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/32)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * Add implementation details of the `find` feature [\\#141](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/141)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * Update design section to reflect Wanderlust implementations (Class Diagrams, Sequence Diagrams) [\\#140](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/140)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Total PRs reviewed: 57"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#29](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/29),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#45](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/45),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#81](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/81),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#86](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/86),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#101](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/101),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#132](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/132),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#139](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/139),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#157](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/157),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#158](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/158),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#189](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/189),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  [\\#242](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/242)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class: [Reported 12 Bugs in PED](https://github.com/lyeyixian/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 85
    }
  },
  {
    "path": "docs/team/timjkong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "title: Timothy Ong Jing Kai\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Project: Wanderlust"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "WanderLust is a desktop travel planner application. It allows users to plan their trips in a structured and efficient manner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "It is written in Java, and has about 16 kLOC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "- Code contributed: [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtimjkong)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "- **Major Enhancements**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    - Implemented **copy and move features**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - What it does: The copy feature allows users to copy an `activity` from the wish list to a travel plan. The move feature essentially does the same thing but removes the `activity` from the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        wish list after copying it to the travel plan."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Justifications: As our target users are travel goers, they would likely want to make a wish list of activities to do in various countries. Then, once they have finalised the details, such as the date, time and cost,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        of the activities they have planned, they can copy or move the activities over to a travel plan."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        This enhancement improved the product significantly as users will be able to easily copy or move activities that they have planned for their trips"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        from the wish list to a travel plan instead of adding the activity to the travel plan, which would be much more cumbersome."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Highlights:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            - This feature modifies all 4 components of Wanderlust: `Ui`, `Logic`, `Model` and `Storage`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            - The copy and move commands differ from other commands in that they are the only commands that modify the list of activities of a travel plan not in the current directory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Relevant pull requests: [\\#135](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/135)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    - Modified **add feature** from AB3 to fit Wanderlust"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - What it does: Allows user to add a `travelplan` or a `travelplanobject` in the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Justifications: Since Wanderlust is a travel planner, it is necessary to allow users to add new travel plans to the travel planner and new activities, accommodations and friends to their travel plans."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Highlights:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            - This feature modifies all 4 components of Wanderlust: `Ui`, `Logic`, `Model` and `Storage`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            - This feature relies on abstraction. The `AddTravelPlanCommand`, `AddActivityCommand`, `AddAccommodationCommand` and `AddFriendCommand` classes extend the `AddCommand` class which extends the `Command` class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Relevant pull requests: [\\#89](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/89)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    - Implemented the `Accommodation` feature"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - What it does: An `Accommodation` is a `travelplanobject` that users can add to their travel plans to organise and keep track of their accommodations during their trips."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Justification: As our target users are travel goers, they will likely want to keep track of their accommodation details during their trips. This feature allows them to do so in an organised and efficient manner."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Relevant pull requests: [\\#58](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/58)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "- **Minor Enhancements**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    - Formatted and organised exception messages for all commands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - What it does: When a user enters an incorrect format for the command, the application responds with an exception message, providing the user with the correct format for the command and/or an example."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Justification: Wanderlust contains quite a few different commands and it is possible that a user may forget the correct format for certain commands. Providing them with the correct format and an example will allow them to quickly correct their invalid inputs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        - Relevant pull requests: [\\#248](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/248), [\\#295](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/295)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Provide suggestions during weekly meetings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Assist group members with tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Updated the add feature. ([\\#89](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/89))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Wrote tests for the `add` feature with 100% coverage for all related command classes. ([\\#111](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/111))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Wrote tests for the `copy` and `move` features with 93.33% and 90.63% coverage respectively. ([\\#289](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/289))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Wrote tests for the `Accommodation` and `UniqueAccommodationList` classes with 84% and 80.77% coverage respectively. ([\\#111](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/111))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * Added documentation for the `delete` feature ([\\#17](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/17))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * Added documentation for the features `add` and `edit` ([\\#107](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/107))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * Added documentation for the features `copy` and `move` ([\\#188](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/188/files))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * Added non-functional requirements. ([#46](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/46))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    * Added implementation details of the `add` feature. ([#142](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/142))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Total PRs reviewed: 4"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * PRs reviewed with non-trivial review comments: ([\\#59](https://github.com/AY2021S1-CS2103-T14-3/tp/pull/59))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class: [Reported 6 Bugs in PED](https://github.com/timjkong/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "timjkong": 71
    }
  },
  {
    "path": "docs/team/underthehai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "title: Lim Hai Shan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Project: Wanderlust"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "WanderLust is a desktop travel planner application. It allows users to plan their trips in a structured and efficient manner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "- Code contributed: [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dunderthehai)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Major Enhancements**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    - Modified **Edit Feature** from AB3 to Wanderlust"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - Justifications:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - Highlights: example"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            - example"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - Relevant pull requests: [\\#96](), [\\#101]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    - Modified **Find Feature** from AB3 to Wanderlust"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - What it does:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - Justifications:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - Highlights:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        - Relevant pull requests: [\\#137]()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Minor Enhancements**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    - Implemented Friend in model [\\#54]()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Testing, Bug Fixing \u0026 Defensive Programming**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    - Added Test Cases for EditCommand and FindCommand [\\#109]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    - Added Defensive code to `EditCommand` and `FindCommand` classes [\\#178](), [\\#180]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    - Fixed Bugs found in PE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * Attend weekly meetings"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * Take down notes in shared team project document"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * Updated the Edit and Find features [\\#96](), [\\#137]()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * Added documentation for quick start and tutorial guide section [\\#244]()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * Update existing documentation of feature `clear` and `edit`: [\\#244]()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * Added implementation details of the `edit` feature."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    * Add UML diagram [\\#145]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class [Reported 11 Bugs in PED](https://github.com/underthehai/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "underthehai": 54
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Now let’s move on to writing a wanderlustParser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.wanderlustParser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 392
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cLabel fx:id\u003d\"mobile\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$mobile\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \"mobile\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "timjkong": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.util.SampleWanderlustDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.storage.JsonTravelPlannerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.storage.TravelPlannerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Wanderlust ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlannerStorage travelPlannerStorage \u003d new JsonTravelPlannerStorage(userPrefs.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        storage \u003d new StorageManager(travelPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s travel planner and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The data from the sample travel planner will be used instead if {@code storage}\u0027s travel planner is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an empty travel planner will be used instead if errors occur when reading {@code storage}\u0027s travel planner."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Optional\u003cReadOnlyTravelPlanner\u003e travelPlannerOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ReadOnlyTravelPlanner initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            travelPlannerOptional \u003d storage.readTravelPlanner();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (!travelPlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TravelPlanner\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            initialData \u003d travelPlannerOptional.orElseGet(SampleWanderlustDataUtil::getSampleTravelPlanner);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TravelPlanner\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            initialData \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPlanner\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            initialData \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPlanner\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        logger.info(\"Starting Wanderlust \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Wanderlust ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 19,
      "lyeyixian": 5,
      "jiaweiteo": 1,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String LOG_FILE \u003d \"wanderlust.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            \"The accommodation index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX \u003d \"The index is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX \u003d \"The friend index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST \u003d \"The wishlist only stores activities,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \" not accommodations or friends! Use the goto command to navigate to a travel plan to \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"perform commands for accommodation/friend.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX \u003d \"The travel plan index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_ACTIVITIES_LISTED_OVERVIEW \u003d \"%1$d activities listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_ACCOMMODATIONS_LISTED_OVERVIEW \u003d \"%1$d accommodations listed!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_FRIENDS_LISTED_OVERVIEW \u003d \"%1$d friends listed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_INVALID_STARTANDENDDATE \u003d \"Start Date should be before or \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"on the same date as End Date.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION \u003d \"This accommodation already exists in the travel\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \" plan. Accommodations with the same name, start date and end date are considered duplicates.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DATE_NOT_IN_RANGE_ACCOMMODATION \u003d \"The accommodation start date and/or end date\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \" must be within the travel plan\u0027s start date and end date.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the directory. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"Activities with the same name, location and datetime are considered duplicates.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY \u003d \"The activity date and time must be within the \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"travel plan\u0027s start date and end date.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FRIEND \u003d \"This friend already exists in the travel plan. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"Friends cannot have the same passport number.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRAVELPLAN \u003d \"This travel plan already exists in the travel planner. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"Travel plans cannot have the same name.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_STRING_EXCEED_CHARACTER_LIMIT \u003d \"%s exceeds character limit of %d characters!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 4,
      "timjkong": 2,
      "jeannetoh99": 16,
      "lyeyixian": 1,
      "jiaweiteo": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DuplicateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents an error due to presence of duplicate objects in a unique list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DuplicateException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public DuplicateException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if length of {@code s} is within the character limit {@limit}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static boolean isWithinCharacterLimit(String s, int limit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return s.length() \u003c\u003d limit;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 8,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ObservableDirectory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the TravelPlanner."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @see Model#getTravelPlanner()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    ReadOnlyTravelPlanner getTravelPlanner();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of travelPlans. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of wishlist activities. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredWishlist();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of activities. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of accommodations. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getFilteredAccommodationList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of friends. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cFriend\u003e getFilteredFriendList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the current directory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Directory getDirectory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the ObservableDirectory that is observed by the Ui."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableDirectory getObservableDirectory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the user prefs\u0027 travel planner file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 22,
      "lyeyixian": 11,
      "jiaweiteo": 7,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.WanderlustParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ObservableDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustParser wanderlustParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        wanderlustParser \u003d new WanderlustParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Command command \u003d wanderlustParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            storage.saveTravelPlanner(model.getTravelPlanner());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getTravelPlanner();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredWishlist() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredWishlist();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredActivityList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFilteredFriendList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredFriendList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getDirectory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableDirectory getObservableDirectory() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return model.getObservableDirectory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27,
      "lyeyixian": 18,
      "jiaweiteo": 7,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Clears the entire travel planner including wishlist and travel plans."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Wanderlust has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setTravelPlanner(new TravelPlanner());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "lyeyixian": 1,
      "jiaweiteo": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_MISSING_TYPE \u003d \"Please specify the WanderLust object \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + \"COMMAND_WORD -accommodation\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + \"COMMAND_WORD -activity\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + \"COMMAND_WORD -friend\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"COMMAND_WORD -travelplan\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"COMMAND_WORD -wishlist\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_SEPARATOR \u003d \" -\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 5,
      "timjkong": 2,
      "lyeyixian": 2,
      "jiaweiteo": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /** Takes the value -1 if no tab changes are required. Otherwise, represents the index of the tab to set"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *  the travelPlanObjectListPanel to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final int travelPlanObjectType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.travelPlanObjectType \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code travelPlanObjectType}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Used for ShowCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult(String feedbackToUser, int travelPLanObjectType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.travelPlanObjectType \u003d travelPLanObjectType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int getTravelPlanObjectType() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return travelPlanObjectType;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 travelPlanObjectType \u003d\u003d otherCommandResult.travelPlanObjectType;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, travelPlanObjectType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "jiaweiteo": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Wanderlust as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "jiaweiteo": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ACCOMMODATIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ACTIVITIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FRIENDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Finds and lists all travel plan object in Wanderlust whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Wishlist can only find activity while travelplan can find all travel plan objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final int COMMAND_TOKEN \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Find all activities/accommodations/friends \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"in the travel plan/wishlist in the current directory \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + \"whose names contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"using the following as an example:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"find -activity KEYWORD [MORE_KEYWORDS]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MISSING_KEYWORDS \u003d \"Please provide at least one keyword to search for\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final int travelPlanObjectType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Constructor for FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param predicate contains a list of strings to filter travel plan object list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param travelPlanObjectType an integer to identify the type of travel plan object to find"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate, int travelPlanObjectType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert travelPlanObjectType \u003d\u003d ParserUtil.ACTIVITY_INDEX"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || travelPlanObjectType \u003d\u003d ParserUtil.ACCOMMODATION_INDEX"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || travelPlanObjectType \u003d\u003d ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.travelPlanObjectType \u003d travelPlanObjectType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!model.isDirectoryTypeTravelPlan() \u0026\u0026 this.travelPlanObjectType !\u003d 0) { //wishlist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        switch (this.travelPlanObjectType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case (ParserUtil.ACTIVITY_INDEX):"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            message \u003d MESSAGE_ACTIVITIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            size \u003d model.getFilteredActivityList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case (ParserUtil.ACCOMMODATION_INDEX):"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.updateFilteredAccommodationList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            message \u003d MESSAGE_ACCOMMODATIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            size \u003d model.getFilteredAccommodationList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case (ParserUtil.FRIEND_INDEX):"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.updateFilteredFriendList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            message \u003d MESSAGE_FRIENDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            size \u003d model.getFilteredFriendList().size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                String.format(message, size), this.travelPlanObjectType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 travelPlanObjectType \u003d\u003d (((FindCommand) other).travelPlanObjectType)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 55,
      "timjkong": 4,
      "lyeyixian": 2,
      "jiaweiteo": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/GoToCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Navigates to the specific directory which can be either a travel plan or a directory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String TRAVEL_PLAN \u003d \"travelplan\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String WISHLIST \u003d \"wishlist\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Go to the wishlist directory using the following command:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"goto -wishlist\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"Go to the travel plan directory identified by its index number used in the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"displayed travel plan list using the following format:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"goto -travelplan INDEX\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_GOTO_SUCCESS \u003d \"goto directory: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final int WISHLIST_DIRECTORY \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int COMMAND_TOKENS_TRAVELPLAN \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int COMMAND_TOKENS_WISHLIST \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final boolean isTravelPlan;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructor for GoToCommand (travel plan)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index of travel plan to goto."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public GoToCommand(Index targetIndex, boolean isTravelPlan) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.isTravelPlan \u003d isTravelPlan;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructor for GoToCommand (wishlist)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public GoToCommand(boolean isTravelPlan) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // TODO: change to this because test case in GoToCommandParserTest not passing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        //  (NullPointerException for .equals())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.targetIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.isTravelPlan \u003d isTravelPlan;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (isTravelPlan) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            List\u003cTravelPlan\u003e lastShownList \u003d model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            assert targetIndex !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            int zeroBasedIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            if (zeroBasedIndex \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            TravelPlan travelPlanToGo \u003d lastShownList.get(zeroBasedIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            model.setDirectory(zeroBasedIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_GOTO_SUCCESS, TRAVEL_PLAN + \" \" + travelPlanToGo.getName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            model.setDirectory(WISHLIST_DIRECTORY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_GOTO_SUCCESS, WISHLIST));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof GoToCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((GoToCommand) other).targetIndex)) // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 isTravelPlan \u003d\u003d (((GoToCommand) other).isTravelPlan);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 5,
      "jeannetoh99": 2,
      "lyeyixian": 25,
      "jiaweiteo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/ShowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Navigates and display the specified travel plan object based on user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final int COMMAND_TOKENS \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Show the list of activities/accommodations/friends in the travel plan \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"in the current directory using the respective commands:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMAND_WORD + COMMAND_SEPARATOR + Activity.TPO_WORD + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMAND_WORD + COMMAND_SEPARATOR + Accommodation.TPO_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMAND_WORD + COMMAND_SEPARATOR + Friend.TPO_WORD + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SHOW_SUCCESS \u003d \"show: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String travelPlanObjectString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final int travelPlanObjectType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for ShowCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param travelPlanObjectType string of the travel plan object type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ShowCommand(String travelPlanObjectType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        travelPlanObjectString \u003d travelPlanObjectType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        switch (travelPlanObjectType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case Activity.TPO_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.travelPlanObjectType \u003d ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case Accommodation.TPO_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.travelPlanObjectType \u003d ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case Friend.TPO_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.travelPlanObjectType \u003d FRIEND_INDEX;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.travelPlanObjectType \u003d INVALID_INDEX;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan \u0026\u0026 travelPlanObjectType !\u003d ACTIVITY_INDEX) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (travelPlanObjectType \u003d\u003d INVALID_INDEX) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        switch (travelPlanObjectString) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case Activity.TPO_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case Accommodation.TPO_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.updateFilteredAccommodationList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case Friend.TPO_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.updateFilteredFriendList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SHOW_SUCCESS, travelPlanObjectString), travelPlanObjectType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 travelPlanObjectString.equals(((ShowCommand) other).travelPlanObjectString)) // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 travelPlanObjectType \u003d\u003d (((ShowCommand) other).travelPlanObjectType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 15,
      "timjkong": 5,
      "jeannetoh99": 20,
      "lyeyixian": 3,
      "jiaweiteo": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/add/AddAccommodationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_NOT_IN_RANGE_ACCOMMODATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACCOMMODATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddAccommodationCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Add an accommodation to the current travel plan using the format:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + WanderlustDate.FORMAT + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + WanderlustDate.FORMAT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"Intercontinental \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"80 Middle Road \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"250 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + \"2021-09-15 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + \"2021-09-30\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New accommodation added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Accommodation toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final WanderlustDate startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final WanderlustDate endDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates an AddAccommodationCommand to add the specified {@code Accommodation}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddAccommodationCommand(Accommodation accommodation) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        toAdd \u003d accommodation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        startDate \u003d accommodation.getStartDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        endDate \u003d accommodation.getEndDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (model.hasTravelPlanObject(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isDateInTravelPlanDate \u003d model.isValidAccommodationDate(startDate, endDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isDateInTravelPlanDate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_NOT_IN_RANGE_ACCOMMODATION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.addTravelPlanObject(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert model.getAccommodationList().hasAccommodation(toAdd) : \"Accommodation was not added\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof AddAccommodationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAccommodationCommand) other).toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 60,
      "jeannetoh99": 4,
      "lyeyixian": 10,
      "jiaweiteo": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/add/AddActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddActivityCommand extends AddCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Add an activity to the current travel plan or wishlist using the format:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_IMPORTANCE + \"LEVEL_OF_IMPORTANCE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_DATETIME + WanderlustDateTime.FORMAT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"Universal Studios Singapore \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_IMPORTANCE + \"5 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"Sentosa \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"88 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            + PREFIX_DATETIME + \"2021-09-16 14:00\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New activity added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Activity toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final WanderlustDateTime activityDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates an AddActivityCommand to add the specified {@code Activity}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddActivityCommand(Activity activity) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        activityDateTime \u003d activity.getActivityDateTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (isTravelPlan) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (model.hasTravelPlanObject(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            boolean isDateInTravelPlanDate \u003d model.isValidActivityDate(activityDateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (!isDateInTravelPlanDate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new CommandException(MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            model.addTravelPlanObject(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            assert model.getActivityList().hasActivity(toAdd) : \"Activity was not added\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (model.hasActivity(toAdd)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            model.addActivity(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            assert model.getWishlist().hasActivity(toAdd) : \"Activity was not added\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof AddActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddActivityCommand) other).toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 62,
      "jeannetoh99": 6,
      "lyeyixian": 11,
      "jiaweiteo": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AddTravelPlanCommand.MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddActivityCommand.MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddAccommodationCommand.MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddFriendCommand.MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 11,
      "lyeyixian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/add/AddFriendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FRIEND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOBILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddFriendCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Add a friend to the current travel plan using the format:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_MOBILE + \"MOBILE_NUMBER \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_PASSPORT + \"PASSPORT_NUMBER \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_MOBILE + \"91234567 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_PASSPORT + \"E1234567K\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New friend added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Friend toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates an AddActivityCommand to add the specified {@code Activity}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddFriendCommand(Friend friend) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(friend);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        toAdd \u003d friend;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (model.hasTravelPlanObject(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FRIEND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.addTravelPlanObject(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert model.getFriendList().hasFriend(toAdd) : \"Friend was not added\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), FRIEND_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof AddFriendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFriendCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 55,
      "jeannetoh99": 3,
      "lyeyixian": 8,
      "jiaweiteo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/add/AddTravelPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TRAVELPLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddTravelPlanCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"travelplan\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"Add a travel plan to the travel planner using the format:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + WanderlustDate.FORMAT + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + WanderlustDate.FORMAT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + AddCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \" France \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + \"2021-09-15 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + \"2021-09-30 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New travel plan added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final TravelPlan toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddTravelPlanCommand(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        toAdd \u003d travelPlan;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (model.hasTravelPlan(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRAVELPLAN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.addTravelPlan(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof AddTravelPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTravelPlanCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 53,
      "jeannetoh99": 2,
      "lyeyixian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/copy/CopyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.logic.command.copy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class CopyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final int COMMAND_TOKENS \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Copy an activity identified by its index number \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"used in the wishlist to a travel plan \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"identified by its index number in the travel planner using the following format:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"copy ACTIVITY_INDEX TRAVELPLAN_INDEX\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_COPY_ACTIVITY_SUCCESS \u003d \"Copied activity %1$s to travel plan %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_NOT_WISHLIST \u003d \"Please goto wishlist before copying activities\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY \u003d \"The activity date and time must be within the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"specified travel plan\u0027s start date and end date.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Index activityIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Index travelPlanIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for CopyCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index of activity to be copied."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param travelPlanIndex index of travel plan to add activity to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CopyCommand(Index targetIndex, Index travelPlanIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.activityIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.travelPlanIndex \u003d travelPlanIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            List\u003cActivity\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            List\u003cTravelPlan\u003e travelPlanList \u003d model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (activityIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (travelPlanIndex.getZeroBased() \u003e\u003d travelPlanList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Activity activityToCopy \u003d filteredActivityList.get(activityIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            TravelPlan travelPlan \u003d travelPlanList.get(travelPlanIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            WanderlustDateTime activityDateTime \u003d activityToCopy.getActivityDateTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            boolean isValidActivityDateTime \u003d model.isValidActivityDate(activityDateTime,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    travelPlan);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (!isValidActivityDateTime) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new CommandException(MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (model.hasTravelPlanObject(activityToCopy, travelPlanIndex.getZeroBased())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            model.copyActivity(activityToCopy, travelPlanIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            assert model.hasTravelPlanObject(activityToCopy, travelPlanIndex.getZeroBased())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    : \"Activity was not copied\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COPY_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    activityIndex.getOneBased(), travelPlanIndex.getOneBased()), ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_WISHLIST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof CopyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 activityIndex.equals(((CopyCommand) other).activityIndex)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 travelPlanIndex.equals(((CopyCommand) other).travelPlanIndex)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 79,
      "jeannetoh99": 4,
      "jiaweiteo": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/copy/MoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.logic.command.copy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class MoveCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final int COMMAND_TOKENS \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Move an activity identified by its index number \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"used in the wishlist to a travel plan \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"identified by its index number in the travel planner using the following format:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"move ACTIVITY_INDEX TRAVELPLAN_INDEX\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_MOVE_ACTIVITY_SUCCESS \u003d \"Moved activity %1$s to travel plan %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_NOT_WISHLIST \u003d \"Please goto wishlist before moving activities\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY \u003d \"The activity date and time must be within the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"specified travel plan\u0027s start date and end date.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Index activityIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Index travelPlanIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructor for MoveCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index of activity to be moved."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param travelPlanIndex index of travel plan to add activity to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public MoveCommand(Index targetIndex, Index travelPlanIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.activityIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.travelPlanIndex \u003d travelPlanIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            List\u003cActivity\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            List\u003cTravelPlan\u003e travelPlanList \u003d model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (activityIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (travelPlanIndex.getZeroBased() \u003e\u003d travelPlanList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Activity activityToMove \u003d filteredActivityList.get(activityIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            TravelPlan travelPlan \u003d travelPlanList.get(travelPlanIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            WanderlustDateTime activityDateTime \u003d activityToMove.getActivityDateTime();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            boolean isValidActivityDateTime \u003d model.isValidActivityDate(activityDateTime,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    travelPlan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (!isValidActivityDateTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new CommandException(MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (model.hasTravelPlanObject(activityToMove, travelPlanIndex.getZeroBased())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            model.copyActivity(activityToMove, travelPlanIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            model.deleteActivity(activityToMove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            assert model.hasTravelPlanObject(activityToMove, travelPlanIndex.getZeroBased()) : \"Activity was not moved\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            assert !model.hasActivity(activityToMove) : \"Activity was not deleted after moving\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MOVE_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    activityIndex.getOneBased(), travelPlanIndex.getOneBased()), ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_WISHLIST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof MoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 activityIndex.equals(((MoveCommand) other).activityIndex)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 travelPlanIndex.equals(((MoveCommand) other).travelPlanIndex)); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 81,
      "jeannetoh99": 6,
      "jiaweiteo": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/delete/DeleteAccommodationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Deletes an accommodation in a travel plan identified using the index from the travel plan."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteAccommodationCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Delete an accommodation by its index in the displayed accommodation list using the format:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"Example: \" + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOMMODATION_SUCCESS \u003d \"Deleted Accommodation:\\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for Delete Accommodation Command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteAccommodationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cAccommodation\u003e filteredAccommodationList \u003d model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredAccommodationList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject accommodationToDelete \u003d filteredAccommodationList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlanObject(accommodationToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert !model.getAccommodationList().hasAccommodation((Accommodation) accommodationToDelete)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                : \"Accommodation was not deleted!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOMMODATION_SUCCESS, accommodationToDelete),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteAccommodationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAccommodationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 5,
      "jeannetoh99": 9,
      "lyeyixian": 5,
      "jiaweiteo": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/delete/DeleteActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Deletes an activity in a travel plan or wishlist identified using the index from the travel plan or wishlist."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteActivityCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Delete an activity by its index in the displayed activity list using the format:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted Activity:\\n%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for DeleteActivityCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteActivityCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cActivity\u003e activityList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (isTravelPlan) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            activityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            activityList \u003d model.getFilteredWishlist();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d activityList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        TravelPlanObject activityToDelete \u003d activityList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlanObject(activityToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete), ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteActivityCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 8,
      "jeannetoh99": 1,
      "lyeyixian": 4,
      "jiaweiteo": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Deletes a travel plan object identified using it\u0027s displayed index from the travel plans."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"Delete a travel plan by its index in the displayed travel plan list \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"or an activity/accommodation/friend by its index in its displayed list \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"using the following as an example.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + DeleteActivityCommand.MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final int COMMAND_TOKENS \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 3,
      "lyeyixian": 5,
      "jiaweiteo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/delete/DeleteFriendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Deletes a friend in a travel plan identified using the index from the travel plan."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteFriendCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Delete a friend by its index in the displayed friend list using the format:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"Example: \" + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DELETE_FRIEND_SUCCESS \u003d \"Deleted Friend:\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for delete friend command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteFriendCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cFriend\u003e filteredFriendList \u003d model.getFilteredFriendList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredFriendList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject friendToDelete \u003d filteredFriendList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlanObject(friendToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert !model.getFriendList().hasFriend((Friend) friendToDelete)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                : \"Friend was not deleted!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FRIEND_SUCCESS, friendToDelete), FRIEND_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteFriendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFriendCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 6,
      "jeannetoh99": 7,
      "lyeyixian": 5,
      "jiaweiteo": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/delete/DeleteTravelPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Deletes a travel plan in the travel planner identified using the index from the travel planner list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteTravelPlanCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"travelplan\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \"Delete a travel plan by its index in the displayed travel plan list using the format:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"Example: \" + DeleteCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DELETE_TRAVELPLAN_SUCCESS \u003d \"Deleted Travel Plan:\\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for delete travel plan command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteTravelPlanCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTravelPlan\u003e filteredTravelPlanList \u003d model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredTravelPlanList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan travelPlanToDelete \u003d filteredTravelPlanList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlan(travelPlanToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert !model.getTravelPlanList().contains(travelPlanToDelete)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                : \"Travel plan was not deleted!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRAVELPLAN_SUCCESS, travelPlanToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteTravelPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTravelPlanCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 5,
      "jeannetoh99": 6,
      "lyeyixian": 5,
      "jiaweiteo": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/edit/EditAccommodationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_NOT_IN_RANGE_ACCOMMODATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACCOMMODATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STARTANDENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.isValidStartAndEndDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Edits existing Accommodation in the wanderlust. This command can only be used within the travel plan directory."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * An accommodation contains the parameters: name, location, cost, start date and end date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditAccommodationCommand extends EditCommand {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"Edit an accommodation in the travel plan by its index in the \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"displayed accommodation list using the format:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + WanderlustDate.FORMAT + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + WanderlustDate.FORMAT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + PREFIX_NAME + \"Hard Rock Hotel \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + PREFIX_LOCATION + \"Sentosa \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + PREFIX_COST + \"500 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + \"2021-07-10 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + \"2021-07-20\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_EDIT_ACCOMMODATION_SUCCESS \u003d \"Edited Accommodation: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final EditDescriptor editAccommodationDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Constructor for edit accommodation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param editAccommodationDescriptor should contain valid edited fields"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditAccommodationCommand(Index targetIndex, EditDescriptor editAccommodationDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert !editAccommodationDescriptor.wrongFieldEdited(COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.editAccommodationDescriptor \u003d editAccommodationDescriptor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cAccommodation\u003e lastShownList \u003d model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation accommodationToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Accommodation editedAccommodation \u003d createEditedAccommodation(accommodationToEdit, editAccommodationDescriptor,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!accommodationToEdit.isSameAccommodation(editedAccommodation)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 model.hasTravelPlanObject(editedAccommodation)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setTravelPlanObject(accommodationToEdit, editedAccommodation);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert model.hasTravelPlanObject(editedAccommodation);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACCOMMODATION_SUCCESS, editedAccommodation),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Creates and returns a {@code Accommodation} with the details of {@code accommodationToEdit}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param accommodationToEdit contains the old fields"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param editAccommodationDescriptor contains updated fields"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @return Accommodation to be updated in the accommodation list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private static Accommodation createEditedAccommodation(Accommodation accommodationToEdit,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                                           EditDescriptor editAccommodationDescriptor,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                                           Model model) throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert accommodationToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Name updatedName \u003d editAccommodationDescriptor.getName().orElse(accommodationToEdit.getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Location updatedLocation \u003d editAccommodationDescriptor.getLocation().orElse(accommodationToEdit.getLocation());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Cost updatedCost \u003d editAccommodationDescriptor.getCost().orElse(accommodationToEdit.getCost());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        WanderlustDate updatedStartDate \u003d editAccommodationDescriptor.getStartDate()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .orElse(accommodationToEdit.getStartDate());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        WanderlustDate updatedEndDate \u003d editAccommodationDescriptor.getEndDate()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .orElse(accommodationToEdit.getEndDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        boolean isValidDate \u003d isValidStartAndEndDate(updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isValidDate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STARTANDENDDATE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isDateInTravelPlanDate \u003d model.isValidAccommodationDate(updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isDateInTravelPlanDate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_NOT_IN_RANGE_ACCOMMODATION);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Accommodation(updatedName, updatedStartDate, updatedEndDate,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                updatedCost, updatedLocation);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditAccommodationCommand) other).targetIndex)) // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 (editAccommodationDescriptor.equals(((EditAccommodationCommand) other).editAccommodationDescriptor)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || editAccommodationDescriptor.isSameDescriptor(((EditAccommodationCommand) other)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .editAccommodationDescriptor));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 94,
      "timjkong": 16,
      "jeannetoh99": 8,
      "lyeyixian": 9,
      "jiaweiteo": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/edit/EditActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Edits an existing Activity in the address book and updates the travel plan/wishlist in the current directory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * An activity contains the field name, location, cost, level of importance and date time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditActivityCommand extends EditCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"Edit an activity in the current travel plan or \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"wishlist by its index in the displayed activity list using the format:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_IMPORTANCE + \"LEVEL_OF_IMPORTANCE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_DATETIME + WanderlustDateTime.FORMAT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"Universal Studios Singapore \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_IMPORTANCE + \"5 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_LOCATION + \"Sentosa \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_COST + \"88 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_DATETIME + \"2021-09-16 \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited Activity: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final EditDescriptor editActivityDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Constructor for edit activity command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditActivityCommand(Index targetIndex, EditDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert !editActivityDescriptor.wrongFieldEdited(COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.editActivityDescriptor \u003d editActivityDescriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity activityToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedActivity \u003d createEditedActivity(activityToEdit, editActivityDescriptor, model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (isTravelPlan) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (!activityToEdit.isSameActivity(editedActivity) \u0026\u0026 model.hasTravelPlanObject(editedActivity)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            model.setTravelPlanObject(activityToEdit, editedActivity);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assert model.hasTravelPlanObject(editedActivity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (!activityToEdit.isSameActivity(editedActivity) \u0026\u0026 model.hasActivity(editedActivity)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            model.setActivity(activityToEdit, editedActivity);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assert model.hasActivity(editedActivity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity), ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Creates and returns a {@code Activity} with the details of {@code activityToEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param activityToEdit contains the old fields"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param editActivityDescriptor contains updated fields"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @return Activity to be updated in the activity list in current directory"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static Activity createEditedActivity(Activity activityToEdit, EditDescriptor editActivityDescriptor,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                                 Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert activityToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Name updatedName \u003d editActivityDescriptor.getName().orElse(activityToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Location updatedLocation \u003d editActivityDescriptor.getLocation().orElse(activityToEdit.getLocation());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Cost updatedCost \u003d editActivityDescriptor.getCost().orElse(activityToEdit.getCost());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Importance updatedLevelOfImportance \u003d editActivityDescriptor.getLevelOfImportance()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .orElse(activityToEdit.getLevelOfImportance());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        WanderlustDateTime updatedActivityDateTime \u003d editActivityDescriptor.getActivityDateTime()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .orElse(activityToEdit.getActivityDateTime());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (isTravelPlan) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            boolean isDateInTravelPlanDate \u003d model.isValidActivityDate(updatedActivityDateTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (!isDateInTravelPlanDate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new CommandException(MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Activity(updatedName, updatedLocation, updatedCost, updatedLevelOfImportance,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                updatedActivityDateTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditActivityCommand) other).targetIndex)) // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 (editActivityDescriptor.equals(((EditActivityCommand) other).editActivityDescriptor)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || editActivityDescriptor.isSameDescriptor(((EditActivityCommand) other).editActivityDescriptor));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 92,
      "timjkong": 18,
      "jeannetoh99": 9,
      "lyeyixian": 9,
      "jiaweiteo": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Edits an object identified using it\u0027s displayed index from Wanderlust list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final int MINIMUM_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final int INDEX_POSITION \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d EditTravelPlanCommand.MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditAccommodationCommand.MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            + EditActivityCommand.MESSAGE_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditFriendCommand.MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String SPECIFY_INDEX \u003d \"Please specify a valid index\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_PARAMETERS \u003d \"Parameters specified are invalid\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one parameter to edit must be provided.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 38,
      "timjkong": 2,
      "lyeyixian": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/edit/EditDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOBILE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSPORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Class to build parameters based on description from user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditDescriptor {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //identity"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //all possible fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private WanderlustDate startDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private WanderlustDate endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Passport passport;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Mobile mobile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Importance levelOfImportance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private WanderlustDateTime activityDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditDescriptor() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Copy constructor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param toCopy contains information about all possible fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditDescriptor(EditDescriptor toCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getName().ifPresent(this::setName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getLocation().ifPresent(this::setLocation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getCost().ifPresent(this::setCost);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getStartDate().ifPresent(this::setStartDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getEndDate().ifPresent(this::setEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getPassport().ifPresent(this::setPassport);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getMobile().ifPresent(this::setMobile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getLevelOfImportance().ifPresent(this::setLevelOfImportance);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        toCopy.getActivityDateTime().ifPresent(this::setActivityDateTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, location, cost, levelOfImportance, activityDateTime, mobile, passport,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                startDate, endDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Ensures that only the valid fields have been edited using the EditDescriptor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param type a String that specify the type of object to check valid fields."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @return true if invalid field(s) has/have been edited."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean wrongFieldEdited(String type) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case Activity.TPO_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return CollectionUtil.isAnyNonNull(mobile, passport, startDate, endDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case Accommodation.TPO_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return CollectionUtil.isAnyNonNull(levelOfImportance, activityDateTime, mobile, passport);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case Friend.TPO_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return CollectionUtil.isAnyNonNull(location, cost, levelOfImportance, activityDateTime, startDate, endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        case TravelPlan.TRAVEL_PLAN_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return CollectionUtil.isAnyNonNull(location, cost, levelOfImportance, activityDateTime, mobile, passport);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Provides editdescriptor to construct edited objects in edit commands"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param source of tokenized parameters that are valid according to specified types"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @return editdescriptor that contains all the parameters to be edited"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static EditDescriptor buildFromSource(ArgumentMultimap source) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editItemDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setName(ParserUtil.parseName(source.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setLocation(ParserUtil.parseLocation(source.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setCost(ParserUtil.parseCost(source.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_START).isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setStartDate(ParserUtil.parseDate(source.getValue(PREFIX_START).get()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_END).isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setEndDate(ParserUtil.parseDate(source.getValue(PREFIX_END).get()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_PASSPORT).isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setPassport(ParserUtil.parsePassport(source.getValue(PREFIX_PASSPORT).get()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_MOBILE).isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setMobile(ParserUtil.parseMobile(source.getValue(PREFIX_MOBILE).get()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_IMPORTANCE).isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setLevelOfImportance(ParserUtil.parseImportance(source"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                    .getValue(PREFIX_IMPORTANCE).get()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (source.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editItemDescriptor.setActivityDateTime(ParserUtil.parseActivityDateTime(source.getValue(PREFIX_DATETIME)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!editItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    EditCommand.MESSAGE_NOT_EDITED));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return editItemDescriptor;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cCost\u003e getCost() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setLevelOfImportance(Importance importance) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.levelOfImportance \u003d importance;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cImportance\u003e getLevelOfImportance() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(levelOfImportance);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setActivityDateTime(WanderlustDateTime activityDateTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.activityDateTime \u003d activityDateTime;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cWanderlustDateTime\u003e getActivityDateTime() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(activityDateTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setStartDate(WanderlustDate startDate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cWanderlustDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setEndDate(WanderlustDate endDate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cWanderlustDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setPassport(Passport passport) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.passport \u003d passport;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cPassport\u003e getPassport() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(passport);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setMobile(Mobile mobile) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.mobile \u003d mobile;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Optional\u003cMobile\u003e getMobile() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Optional.ofNullable(mobile);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Descriptors are considered as the same if both descriptor have the same name"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param other name to check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean isSameDescriptor(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!(other instanceof EditDescriptor)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor toCompare \u003d (EditDescriptor) other;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return this.name.equals(toCompare.getName().get());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!(other instanceof EditDescriptor)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor e \u003d (EditDescriptor) other;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getActivityDateTime().equals(e.getActivityDateTime())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getPassport().equals(e.getPassport())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getMobile().equals(e.getMobile())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getLevelOfImportance().equals(e.getLevelOfImportance())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 getActivityDateTime().equals(e.getActivityDateTime());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 253,
      "lyeyixian": 14,
      "jiaweiteo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/edit/EditFriendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FRIEND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOBILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Edits existing Friend in wanderlust. This command can only be used within the travel plan directory."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * A friend contains the parameters: name, passport, mobile"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditFriendCommand extends EditCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"Edit a friend in the current travel plan \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"by its index in the displayed friend list using the format:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_MOBILE + \"MOBILE_NUMBER \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_PASSPORT + \"PASSPORT_NUMBER \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_MOBILE + \"91234567 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_PASSPORT + \"E1234567K\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_EDIT_FRIEND_SUCCESS \u003d \"Edited Friend: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final EditDescriptor editFriendDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Constructor for edit friend command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditFriendCommand(Index targetIndex, EditDescriptor editFriendDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert !editFriendDescriptor.wrongFieldEdited(COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.editFriendDescriptor \u003d editFriendDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cFriend\u003e filteredFriendList \u003d model.getFilteredFriendList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredFriendList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend friendToEdit \u003d filteredFriendList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend editedFriend \u003d createEditedFriend(friendToEdit, editFriendDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!friendToEdit.isSameFriend(editedFriend) \u0026\u0026 model.hasTravelPlanObject(editedFriend)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FRIEND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setTravelPlanObject(friendToEdit, editedFriend);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert model.hasTravelPlanObject(editedFriend);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FRIEND_SUCCESS, editedFriend), FRIEND_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Creates and returns a {@code Friend} with the details of {@code friendToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param friendToEdit contains the old fields"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param editFriendDescriptor contains updated fields"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @return Friend to be updated in the friend list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private static Friend createEditedFriend(Friend friendToEdit, EditDescriptor editFriendDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert friendToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Name updatedName \u003d editFriendDescriptor.getName().orElse(friendToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Passport updatedPassport \u003d editFriendDescriptor.getPassport().orElse(friendToEdit.getPassport());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Mobile updatedMobile \u003d editFriendDescriptor.getMobile().orElse(friendToEdit.getMobile());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Friend(updatedName, updatedPassport, updatedMobile);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditFriendCommand) other).targetIndex)) // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 (editFriendDescriptor.equals(((EditFriendCommand) other).editFriendDescriptor)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || editFriendDescriptor.isSameDescriptor(((EditFriendCommand) other).editFriendDescriptor));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 84,
      "timjkong": 15,
      "jeannetoh99": 8,
      "lyeyixian": 7,
      "jiaweiteo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/edit/EditTravelPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TRAVELPLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STARTANDENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.isValidStartAndEndDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Edits an existing TravelPlan in Wanderlust."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * A travelplan contains the parameters: name, start date and end date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditTravelPlanCommand extends EditCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"travelplan\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"Edit a travel plan in the travel planner \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"by its index in the displayed travel plan list using the format:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + WanderlustDate.FORMAT + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + WanderlustDate.FORMAT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + EditCommand.COMMAND_WORD + COMMAND_SEPARATOR + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_NAME + \" France \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_START + \"2021-09-15 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + PREFIX_END + \"2021-09-30 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_FORMAT + \"\\n\" + MESSAGE_EXAMPLE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_EDIT_TRAVELPLAN_SUCCESS \u003d \"Edited Travel Plan: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final EditDescriptor editTravelPlanDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Constructor for edit travel plan"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public EditTravelPlanCommand(Index targetIndex, EditDescriptor editTravelPlanDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert !editTravelPlanDescriptor.wrongFieldEdited(COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.editTravelPlanDescriptor \u003d editTravelPlanDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cTravelPlan\u003e lastShownList \u003d model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan travelPlanToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan editedTravelPlan \u003d createEditedTravelPlan(travelPlanToEdit, editTravelPlanDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!travelPlanToEdit.isSameTravelPlan(editedTravelPlan) \u0026\u0026 model.hasTravelPlan(editedTravelPlan)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRAVELPLAN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setTravelPlan(travelPlanToEdit, editedTravelPlan);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert model.hasTravelPlan(editedTravelPlan);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRAVELPLAN_SUCCESS, editedTravelPlan));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Creates and returns a {@code TravelPlan} with the details of {@code travelPlanToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param travelPlanToEdit contains the old fields"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param editTravelPlanDescriptor contains updated fields"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @return TravelPlan to be updated in the travelplan list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private static TravelPlan createEditedTravelPlan(TravelPlan travelPlanToEdit,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                                                     EditDescriptor editTravelPlanDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assert travelPlanToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Name updatedName \u003d editTravelPlanDescriptor.getName().orElse(travelPlanToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        WanderlustDate updatedStartDate \u003d editTravelPlanDescriptor.getStartDate()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .orElse(travelPlanToEdit.getStartDate());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        WanderlustDate updatedEndDate \u003d editTravelPlanDescriptor.getEndDate().orElse(travelPlanToEdit.getEndDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        boolean isValidDate \u003d isValidStartAndEndDate(updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isValidDate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STARTANDENDDATE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ActivityList activities \u003d travelPlanToEdit.getActivityList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        AccommodationList accommodations \u003d travelPlanToEdit.getAccommodationList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FriendList friends \u003d travelPlanToEdit.getFriendList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new TravelPlan(updatedName, updatedStartDate, updatedEndDate, activities, accommodations, friends);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditTravelPlanCommand) other).targetIndex)) // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 (editTravelPlanDescriptor.equals(((EditTravelPlanCommand) other).editTravelPlanDescriptor)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (editTravelPlanDescriptor.isSameDescriptor(((EditTravelPlanCommand) other)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .editTravelPlanDescriptor)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 93,
      "timjkong": 15,
      "jeannetoh99": 3,
      "lyeyixian": 10,
      "jiaweiteo": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/sort/SortAccommodationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortAccommodationCommand extends SortCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort accommodation\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // TODO: Add example"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"sort accommodation: Sorts the list of accommodation in a travel plan by the keyword input by the user.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    + \"Parameters: KEYWORD (cost/date)\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SORT_ACCOMMODATION_SUCCESS \u003d \"Sorted list of accommodation by: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD \u003d \"INVALID KEYWORD! \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Accommodation list can only sort by name/cost/date.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for SortAccommodationCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param keyword identifier to sort accommodation list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public SortAccommodationCommand(String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_COST:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cAccommodation\u003e costComparator \u003d Comparator.comparingInt(c -\u003e -c.getCostAsInt());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            model.sortAccommodationList(costComparator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACCOMMODATION_SUCCESS, SortCommand.KEYWORD_COST),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_DATE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cAccommodation\u003e dateComparator \u003d Comparator.comparing(d -\u003e d.getStartDate().getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            model.sortAccommodationList(dateComparator);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACCOMMODATION_SUCCESS, SortCommand.KEYWORD_DATE),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_NAME:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cAccommodation\u003e nameComparator \u003d Comparator.comparing(d -\u003e d.getName().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            model.sortAccommodationList(nameComparator);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACCOMMODATION_SUCCESS, SortCommand.KEYWORD_NAME),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof SortAccommodationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 keyword.equals(((SortAccommodationCommand) other).keyword)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 76,
      "lyeyixian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/sort/SortActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortActivityCommand extends SortCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort activity\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"sort activity: Sorts the list of activities in a travel plan/wishlist by the keyword input by the user.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    + \"Parameters: KEYWORD (name/cost/importance/datetime)\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SORT_ACTIVITY_SUCCESS \u003d \"Sorted list of activities by: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD \u003d \"INVALID KEYWORD! \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Activity list can only sort by name/cost/importance/datetime.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for SortActivityCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param keyword identifier to sort activity list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public SortActivityCommand(String keyword) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_COST:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cActivity\u003e costComparator \u003d Comparator.comparingInt(c -\u003e -c.getCostAsInt());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (isTravelPlan) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortActivityList(costComparator);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortWishlist(costComparator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACTIVITY_SUCCESS, SortCommand.KEYWORD_COST),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_IMPORTANCE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Comparator\u003cActivity\u003e importanceComparator \u003d Comparator.comparingInt(a -\u003e -a.getImportanceAsInt());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (isTravelPlan) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortActivityList(importanceComparator);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortWishlist(importanceComparator);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACTIVITY_SUCCESS, SortCommand.KEYWORD_IMPORTANCE),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        case SortCommand.KEYWORD_DATETIME:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cActivity\u003e dateComparator \u003d Comparator.comparing(d -\u003e d.getActivityDateTime().getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (isTravelPlan) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortActivityList(dateComparator);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortWishlist(dateComparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACTIVITY_SUCCESS, SortCommand.KEYWORD_DATETIME),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_NAME:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cActivity\u003e nameComparator \u003d Comparator.comparing(d -\u003e d.getName().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (isTravelPlan) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortActivityList(nameComparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                model.sortWishlist(nameComparator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_ACTIVITY_SUCCESS, SortCommand.KEYWORD_NAME),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof SortActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 keyword.equals(((SortActivityCommand) other).keyword)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "jiaweiteo": 89,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/sort/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_COST \u003d \"cost\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_IMPORTANCE \u003d \"importance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String KEYWORD_DATETIME \u003d \"datetime\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String KEYWORD_PASSPORT \u003d \"passport\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String KEYWORD_MOBILE \u003d \"mobile\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String COMMA_DELIMITER \u003d \", \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final int COMMAND_TOKENS \u003d 3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Sort the list of activities/accommodations/friends in the travel plan \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"in the current directory based on a given parameter (possible parameters given below) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"using the format:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMAND_WORD + COMMAND_SEPARATOR + \"OBJECT PARAMETER\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"Sorting Parameters: \" + KEYWORD_NAME + COMMA_DELIMITER + KEYWORD_COST"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMA_DELIMITER + KEYWORD_IMPORTANCE + COMMA_DELIMITER + KEYWORD_DATE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMA_DELIMITER + KEYWORD_DATETIME + COMMA_DELIMITER + KEYWORD_MOBILE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + COMMA_DELIMITER + KEYWORD_PASSPORT + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + COMMAND_SEPARATOR + Activity.TPO_WORD + \" \" + KEYWORD_COST;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String sortKeyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for ShowCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param sortKeyword string of the keyword used to sort."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public SortCommand(String sortKeyword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.sortKeyword \u003d sortKeyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 sortKeyword.equals(((SortCommand) other).sortKeyword));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 11,
      "jeannetoh99": 2,
      "jiaweiteo": 38,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/command/sort/SortFriendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortFriendCommand extends SortCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort friend\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"sort friend: Sorts the list of friend in a travel plan by the keyword input by the user.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    + \"Parameters: KEYWORD (name)\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SORT_FRIEND_SUCCESS \u003d \"Sorted list of friends by: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD \u003d \"INVALID KEYWORD! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Friend list can only sort by name/mobile/passport.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for SortFriendCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param keyword identifier to sort friend list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public SortFriendCommand(String keyword) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(keyword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        boolean isTravelPlan \u003d model.isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!isTravelPlan) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case SortCommand.KEYWORD_NAME:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Comparator\u003cFriend\u003e nameComparator \u003d Comparator.comparing(Friend::getNameAsString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            model.sortFriendList(nameComparator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_FRIEND_SUCCESS, SortCommand.KEYWORD_NAME),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    FRIEND_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case SortCommand.KEYWORD_MOBILE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Comparator\u003cFriend\u003e mobileComparator \u003d Comparator.comparing(f -\u003e f.getMobile().getValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            model.sortFriendList(mobileComparator);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_FRIEND_SUCCESS, SortCommand.KEYWORD_MOBILE),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    FRIEND_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case SortCommand.KEYWORD_PASSPORT:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Comparator\u003cFriend\u003e passportComparator \u003d Comparator.comparing(f -\u003e f.getPassport().getValue());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            model.sortFriendList(passportComparator);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_FRIEND_SUCCESS, SortCommand.KEYWORD_PASSPORT),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    FRIEND_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof SortFriendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 keyword.equals(((SortFriendCommand) other).keyword)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 15,
      "jiaweiteo": 61,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STARTANDENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOBILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.removeDash;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.isValidStartAndEndDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddAccommodationCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddActivityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddFriendCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddTravelPlanCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String addType \u003d removeDash(keywords[OBJECT_TYPE_POSITION], AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            switch (addType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            case AddActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return parseActivity(args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            case AddAccommodationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return parseAccommodation(args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            case AddFriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return parseFriend(args);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            case AddTravelPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return parseTravelPlan(args);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddActivityCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * and returns an AddActivityCommand object for execution."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddActivityCommand parseActivity(String args) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_IMPORTANCE, PREFIX_LOCATION, PREFIX_COST,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        PREFIX_DATETIME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_IMPORTANCE, PREFIX_LOCATION, PREFIX_COST,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                PREFIX_DATETIME) || !argMultimap.getPreamble().equals(\"-activity\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Importance importance \u003d ParserUtil.parseImportance(argMultimap.getValue(PREFIX_IMPORTANCE).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        WanderlustDateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Activity activity \u003d new Activity(name, location, cost, importance, dateTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new AddActivityCommand(activity);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAccommodationCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * and returns an AddAccommodationCommand object for execution."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddAccommodationCommand parseAccommodation(String args) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_COST, PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_COST, PREFIX_START, PREFIX_END)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || !argMultimap.getPreamble().equals(\"-accommodation\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    AddAccommodationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        WanderlustDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START).get());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        WanderlustDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END).get());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!isValidStartAndEndDate(startDate, endDate)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_STARTANDENDDATE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation accommodation \u003d new Accommodation(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new AddAccommodationCommand(accommodation);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFriendCommand"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * and returns an AddFriendCommand object for execution."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddFriendCommand parseFriend(String args) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MOBILE, PREFIX_PASSPORT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MOBILE, PREFIX_PASSPORT)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || !argMultimap.getPreamble().equals(\"-friend\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    AddFriendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Mobile mobile \u003d ParserUtil.parseMobile(argMultimap.getValue(PREFIX_MOBILE).get());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Passport passport \u003d ParserUtil.parsePassport(argMultimap.getValue(PREFIX_PASSPORT).get());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Friend friend \u003d new Friend(name, passport, mobile);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new AddFriendCommand(friend);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTravelPlanCommand"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * and returns an AddTravelPlanCommand object for execution."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddTravelPlanCommand parseTravelPlan(String args) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START, PREFIX_END)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || !argMultimap.getPreamble().equals(\"-travelplan\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    AddTravelPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        WanderlustDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START).get());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        WanderlustDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END).get());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!isValidStartAndEndDate(startDate, endDate)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_STARTANDENDDATE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        TravelPlan travelPlan \u003d new TravelPlan(name, startDate, endDate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new AddTravelPlanCommand(travelPlan);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 118,
      "jeannetoh99": 6,
      "jiaweiteo": 14,
      "lyeyixian": 18,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 2,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_IMPORTANCE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_MOBILE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final Prefix PREFIX_PASSPORT \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /* travel plan object type prefix */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Prefix PREFIX_TPO \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 2,
      "jeannetoh99": 2,
      "jiaweiteo": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CopyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX_POSITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.TRAVELPLAN_INDEX_POSITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.copy.CopyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Parses input arguments and creates a new CopyCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class CopyCommandParser implements Parser\u003cCopyCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CopyCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * and returns a CopyCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public CopyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (keywords.length !\u003d CopyCommand.COMMAND_TOKENS) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index activityIndex \u003d ParserUtil.parseIndex(keywords[ACTIVITY_INDEX_POSITION]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index travelPlanIndex \u003d ParserUtil.parseIndex(keywords[TRAVELPLAN_INDEX_POSITION]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new CopyCommand(activityIndex, travelPlanIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 25,
      "jiaweiteo": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.INDEX_POSITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.removeDash;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteAccommodationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteActivityCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteFriendCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteTravelPlanCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (keywords.length !\u003d DeleteCommand.COMMAND_TOKENS) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String deleteType \u003d removeDash(keywords[OBJECT_TYPE_POSITION], DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(keywords[INDEX_POSITION]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            switch (deleteType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            case Activity.TPO_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteActivityCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            case Accommodation.TPO_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteAccommodationCommand(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            case Friend.TPO_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteFriendCommand(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            case TravelPlan.TRAVEL_PLAN_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteTravelPlanCommand(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 1,
      "jeannetoh99": 16,
      "lyeyixian": 5,
      "jiaweiteo": 16,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOBILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.removeDash;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditAccommodationCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditActivityCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditFriendCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditTravelPlanCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Parses input arguments and creates a new EditCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Ensures that the type of edited object, index, parameters are specified and valid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param args a String that had specified an edit command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (keywords.length \u003c EditCommand.MINIMUM_LENGTH) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String editType \u003d removeDash(keywords[OBJECT_TYPE_POSITION], EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_IMPORTANCE, PREFIX_COST,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DATETIME, PREFIX_PASSPORT, PREFIX_MOBILE, PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor checker \u003d EditDescriptor.buildFromSource(argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (checker.wrongFieldEdited(editType)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(EditCommand.INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            switch (editType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case EditActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return parseActivity(args);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case EditAccommodationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return parseAccommodation(args);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case EditFriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return parseFriend(args);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case EditTravelPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return parseTravelPlan(args);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses input that specified an Activity type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditActivityCommand parseActivity(String args) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(keywords[EditCommand.INDEX_POSITION])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 !keywords[EditCommand.INDEX_POSITION].equals(\"0\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(EditActivityCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(keywords[EditCommand.INDEX_POSITION]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_IMPORTANCE, PREFIX_COST,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d EditDescriptor.buildFromSource(argMultimap);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new EditActivityCommand(index, editDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses input that specified an Accommodation type."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditAccommodationCommand parseAccommodation(String args) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(keywords[EditCommand.INDEX_POSITION])"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 !keywords[EditCommand.INDEX_POSITION].equals(\"0\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(EditAccommodationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(keywords[EditCommand.INDEX_POSITION]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COST, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d EditDescriptor.buildFromSource(argMultimap);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new EditAccommodationCommand(index, editDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses input that specified a Friend type."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditFriendCommand parseFriend(String args) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(keywords[EditCommand.INDEX_POSITION])"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 !keywords[EditCommand.INDEX_POSITION].equals(\"0\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(EditFriendCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(keywords[EditCommand.INDEX_POSITION]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PASSPORT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                PREFIX_MOBILE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d EditDescriptor.buildFromSource(argumentMultimap);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new EditFriendCommand(index, editDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses input that specified a TravelPlan type."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    EditTravelPlanCommand parseTravelPlan(String args) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(keywords[EditCommand.INDEX_POSITION])"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 !keywords[EditCommand.INDEX_POSITION].equals(\"0\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(EditTravelPlanCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(keywords[EditCommand.INDEX_POSITION]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d EditDescriptor.buildFromSource(argMultimap);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new EditTravelPlanCommand(index, editDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 98,
      "jeannetoh99": 2,
      "lyeyixian": 14,
      "jiaweiteo": 8,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FIND_WORD_POSITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.removeDash;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            String[] keywords \u003d args.split(\" \", FindCommand.COMMAND_TOKEN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String travelPlanObjectType \u003d removeDash(keywords[OBJECT_TYPE_POSITION], FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String findWord \u003d keywords[FIND_WORD_POSITION];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            String[] nameKeywords \u003d findWord.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            switch (travelPlanObjectType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case Friend.TPO_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                        ParserUtil.FRIEND_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case Activity.TPO_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                        ParserUtil.ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            case Accommodation.TPO_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                        ParserUtil.ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MISSING_KEYWORDS));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "underthehai": 31,
      "jeannetoh99": 5,
      "lyeyixian": 1,
      "jiaweiteo": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoToCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.removeDash;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.GoToCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses input arguments and creates a new GoToCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class GoToCommandParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns a GoToCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String directoryType \u003d removeDash(keywords[OBJECT_TYPE_POSITION], GoToCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            switch (directoryType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case GoToCommand.TRAVEL_PLAN:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                if (keywords.length \u003c GoToCommand.COMMAND_TOKENS_TRAVELPLAN) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_MISSING_INDEX));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                if (keywords.length !\u003d GoToCommand.COMMAND_TOKENS_TRAVELPLAN) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(keywords[ParserUtil.INDEX_POSITION]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new GoToCommand(index, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case GoToCommand.WISHLIST:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                if (keywords.length !\u003d GoToCommand.COMMAND_TOKENS_WISHLIST) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new GoToCommand(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 9,
      "lyeyixian": 14,
      "jiaweiteo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX_POSITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.TRAVELPLAN_INDEX_POSITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.copy.MoveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Parses input arguments and creates a new MoveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class MoveCommandParser implements Parser\u003cMoveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MoveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * and returns a MoveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public MoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (keywords.length !\u003d MoveCommand.COMMAND_TOKENS) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index activityIndex \u003d ParserUtil.parseIndex(keywords[ACTIVITY_INDEX_POSITION]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index travelPlanIndex \u003d ParserUtil.parseIndex(keywords[TRAVELPLAN_INDEX_POSITION]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new MoveCommand(activityIndex, travelPlanIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 25,
      "jiaweiteo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a WanderlustParser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.StringUtil.isWithinCharacterLimit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.parser.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Contains utility methods used for parsing strings in the various *WanderlustParser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned positive integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final int OBJECT_TYPE_POSITION \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final int INDEX_POSITION \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final int SORT_TYPE_POSITION \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int FIND_WORD_POSITION \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int ACTIVITY_INDEX \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int ACCOMMODATION_INDEX \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int FRIEND_INDEX \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int INVALID_INDEX \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // For copy and move commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final int ACTIVITY_INDEX_POSITION \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int TRAVELPLAN_INDEX_POSITION \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new InvalidIndexException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!isWithinCharacterLimit(trimmedName, Name.CHARACTER_LIMIT)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_EXCEEDS_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!isWithinCharacterLimit(trimmedLocation, Location.CHARACTER_LIMIT)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new ParseException(Location.MESSAGE_LOCATION_EXCEEDS_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses a {@code String cost} into a {@code Cost}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the given {@code cost} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static Cost parseCost(String cost) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedCost \u003d cost.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!Cost.isValidCost(trimmedCost)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Cost(trimmedCost);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String passport} into a {@code Passport}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code passport} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static Passport parsePassport(String passport) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(passport);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedPassport \u003d passport.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!Passport.isValidPassport(trimmedPassport)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(Passport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Passport(trimmedPassport);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String activityDateTime} into a {@code WanderlustDateTime}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code activityDateTime} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static WanderlustDateTime parseActivityDateTime(String activityDateTime)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throws ParseException, DateTimeParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(activityDateTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedActivityDateTime \u003d activityDateTime.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!WanderlustDateTime.isValidWanderlustDateTime(trimmedActivityDateTime)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(WanderlustDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new WanderlustDateTime(trimmedActivityDateTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String importance} into a {@code Importance}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code importance} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static Importance parseImportance(String importance) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(importance);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedImportance \u003d importance.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!Importance.isValidImportance(trimmedImportance)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(Importance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Importance(trimmedImportance);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String date} into a {@code WanderlustDate}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code WanderlustDate} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static WanderlustDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(trimmedDate)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new WanderlustDate(trimmedDate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code WanderlustDateTime}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code WanderlustDateTime} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static WanderlustDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!WanderlustDateTime.isValidWanderlustDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new ParseException(WanderlustDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new WanderlustDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Parses a {@code String mobile} into a {@code Mobile}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the given {@code mobile} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static Mobile parseMobile(String mobile) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(mobile);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String trimmedMobile \u003d mobile.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!Mobile.isValidMobile(trimmedMobile)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(Mobile.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new Mobile(trimmedMobile);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes the dash character \"-\" from the zeroth index of the string."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param str String of format \"-string\", with dash in the zeroth index."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return str without dash character in the zeroth index."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String removeDash(String str, String messageUsage) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (str.charAt(0) !\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return str.substring(1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 97,
      "timjkong": 1,
      "jeannetoh99": 25,
      "lyeyixian": 6,
      "jiaweiteo": 10,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * E.g. \u0027n/\u0027 in \u0027add -activity n/Eat\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.removeDash;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses input arguments and creates a new ShowCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns a ShowCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (keywords.length !\u003d ShowCommand.COMMAND_TOKENS) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String travelPlanObjectType \u003d removeDash(keywords[OBJECT_TYPE_POSITION], ShowCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new ShowCommand(travelPlanObjectType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "lyeyixian": 4,
      "jiaweiteo": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.OBJECT_TYPE_POSITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.SORT_TYPE_POSITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortAccommodationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortActivityCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortFriendCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Command parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            String travelPlanObjectType \u003d keywords[OBJECT_TYPE_POSITION].substring(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (keywords.length !\u003d SortCommand.COMMAND_TOKENS) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                        SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            switch (travelPlanObjectType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case Activity.TPO_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new SortActivityCommand(keywords[SORT_TYPE_POSITION]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case Accommodation.TPO_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new SortAccommodationCommand(keywords[SORT_TYPE_POSITION]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case Friend.TPO_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new SortFriendCommand(keywords[SORT_TYPE_POSITION]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 45,
      "lyeyixian": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WanderlustParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.copy.CopyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.copy.MoveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses user input from UI and execute commands based on user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class WanderlustParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or is missing the command type"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            case CopyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return new CopyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            case MoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return new MoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new ParseException(Command.MESSAGE_MISSING_TYPE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 4,
      "timjkong": 9,
      "lyeyixian": 18,
      "jiaweiteo": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a invalid index error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class InvalidIndexException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public InvalidIndexException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the current directory of wanderlust, which can be instance of TravelPlan or Wishlist"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the observable activity list under the current directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract ObservableList\u003cActivity\u003e getObservableActivityList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the name of the current directory as {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract Name getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the total cost of the current directory as {@code String}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Total cost includes Activity and Accommodation cost for TravelPlan, while only Activity cost for Wishlist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract String getTotalCost();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the start date of the current directory. This method should not be called by {@code Wishlist}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract WanderlustDate getStartDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the end date of the current directory. This method should not be called by {@code Wishlist}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract WanderlustDate getEndDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if the current directory is a {@code TravelPlan}, false otherwise."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract boolean isTravelPlan();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a travel plan object with the same identity as {@code travelPlanObject} exists in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * corresponding travel plan object list in the current directory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract boolean contains(TravelPlanObject travelPlanObject);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code travelPlanObject} from the corresponding travel plan object list in the current directory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlanObject} must exist in the corresponding travel plan object list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract void remove(TravelPlanObject travelPlanObject);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds a travel plan object to its corresponding travel plan object list in the current directory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan object must not already exist in its corresponding list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract void addTpo(TravelPlanObject travelPlanObject);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan object {@code target} in the corresponding travel plan object list in the current"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * directory with {@code editedTravelPlanObject}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the corresponding travel plan object list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan object identity of {@code editedTravelPlanObject} must not be the same as another existing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * travel plan object in the corresponding travel plan object list in the current directory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract void setTpo(TravelPlanObject target, TravelPlanObject editedTravelPlanObject);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the date title of the current directory as {@code String}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract String getDateTitle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 8,
      "lyeyixian": 63,
      "jiaweiteo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Nameable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.UniqueTravelPlanList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Predicate\u003cNameable\u003e PREDICATE_SHOW_ALL_TRAVEL_PLAN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Predicate\u003cNameable\u003e PREDICATE_SHOW_ALL_ACTIVITY \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    Predicate\u003cNameable\u003e PREDICATE_SHOW_ALL \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the user prefs\u0027 travel planner file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sets the user prefs\u0027 travel planner file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlannerFilePath(Path travelPlannerFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces travel planner data with the data in {@code travelPlanner}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlanner(ReadOnlyTravelPlanner travelPlanner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** Returns the TravelPlanner */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ReadOnlyTravelPlanner getTravelPlanner();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a travel plan with the same identity as {@code travelPlan} exists in the travel planner."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    boolean hasTravelPlan(TravelPlan travelPlan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the wishlist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    boolean hasActivity(Activity activity);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a travel plan object with the same identity as {@code tPObj} exists in the directory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    boolean hasTravelPlanObject(TravelPlanObject tPObj);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a travel plan object with the same identity as {@code tPObj} exists in the travel plan."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    boolean hasTravelPlanObject(TravelPlanObject tPObj, int travelPlanIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Deletes the given travel plan."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must exist in the travel planner."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void deleteTravelPlan(TravelPlan target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Deletes the given activity."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity must exist in the wishlist."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void deleteActivity(Activity target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Deletes the given travel plan object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan object must exist in the travel plan."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void deleteTravelPlanObject(TravelPlanObject tPObj);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds the given travel plan."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlan} must not already exist in the travel planner."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void addTravelPlan(TravelPlan travelPlan);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code activity} must not already exist in the wishlist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void addActivity(Activity activity);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Adds the given activity to the travel plan at the given index in the travel plan list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    void addActivity(Activity activity, Index travelPlanIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds the given travel plan object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code tpObj} must not already exist in the travel plan."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void addTravelPlanObject(TravelPlanObject tPObj);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan {@code target} with {@code editedTravelPlan}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the travel planner."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan identity of {@code editedTravelPlan} must not be the same as another existing travel plan in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * travel planner."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given activity {@code target} with {@code editedActivity}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the wishlist."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * wishlist."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setActivity(Activity target, Activity editedActivity);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan object {@code target} with {@code editedTravelPlanObject}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the travel plan."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan object identity of {@code editedTravelPlanObject} must not be the same as another existing travel"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * plan object in the travel plan."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlanObject(TravelPlanObject target, TravelPlanObject editedTravelPlanObject);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered travel plan list */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered wishlist */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredWishlist();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered activity list */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered accommodation list */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getFilteredAccommodationList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered friend list */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cFriend\u003e getFilteredFriendList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Updates the filter of the filtered travel plan list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredTravelPlanList(Predicate\u003cNameable\u003e predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Updates the filter of the filtered wishlist to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredWishlist(Predicate\u003cNameable\u003e predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cNameable\u003e predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the filter of the filtered accommodation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredAccommodationList(Predicate\u003cNameable\u003e predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the filter of the filtered friend list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredFriendList(Predicate\u003cNameable\u003e predicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Replaces the directory with the directory at {@code index}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code index} must exist in the travel planner."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    void setDirectory(int index);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the current directory that the wanderlust is currently in."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Directory getDirectory();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if Directory is travelplan or wishlist."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if travelplan, false if wishlist."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    boolean isDirectoryTypeTravelPlan();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the {@code ObservableDirectory}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableDirectory getObservableDirectory();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates a deep copy of the activity and adds the deep copy to the travel plan at the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * given index in the travel plan list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    void copyActivity(Activity activity, Index travelPlanIndex);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the travel plan list as {@code UniqueTravelPlanList}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    UniqueTravelPlanList getTravelPlanList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the wishlist as {@code Wishlist}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Wishlist getWishlist();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the activity list as {@code ActivityList}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ActivityList getActivityList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the accommodation list as {@code AccommodationList}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    AccommodationList getAccommodationList();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the friend list as {@code FriendList}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    FriendList getFriendList();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the wishlist with the given comparator."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Can be sorted according to cost, importance, date or name."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void sortWishlist(Comparator\u003cActivity\u003e comparator);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the activity list with the given comparator."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Can be sorted according to cost, importance, date or name."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void sortActivityList(Comparator\u003cActivity\u003e comparator);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the accommodation list with the given comparator."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Can be sorted according to cost, date or name."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void sortAccommodationList(Comparator\u003cAccommodation\u003e comparator);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the friend list with the given comparator."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Can be sorted according to name."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void sortFriendList(Comparator\u003cFriend\u003e comparator);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if accommodation object date is within the model\u0027s travel plan start and end date."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return false if accommodation start date and end date is within travel plan start date and end date."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    boolean isValidAccommodationDate(WanderlustDate startDate, WanderlustDate endDate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if activity object date time is within the model\u0027s travel plan start and end date."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if activity date is within travel plan start date and end date range."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    boolean isValidActivityDate(WanderlustDateTime activityDateTime);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if activity object date time is within the model\u0027s travel plan start and end date."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if activity date is within travel plan start date and end date range."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    boolean isValidActivityDate(WanderlustDateTime activityDateTime, TravelPlan travelPlan);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 2,
      "timjkong": 14,
      "jeannetoh99": 27,
      "lyeyixian": 143,
      "jiaweiteo": 29,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Nameable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.UniqueTravelPlanList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the in-memory model of the travel planner data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final int WISHLIST_INDEX \u003d -1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final TravelPlanner travelPlanner;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private int directoryIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cTravelPlan\u003e filteredTravelPlans;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredWishlist;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredActivityList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cAccommodation\u003e filteredAccommodationList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cFriend\u003e filteredFriendList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final ObservableDirectory observableDirectory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Directory directory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private AccommodationList accommodationList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private FriendList friendList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Initializes a ModelManager with the given travelPlanner and userPrefs."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ModelManager(ReadOnlyTravelPlanner travelPlanner, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(travelPlanner, userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        logger.fine(\"Initializing with travel planner: \" + travelPlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlanner \u003d new TravelPlanner(travelPlanner);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredTravelPlans \u003d new FilteredList\u003c\u003e(this.travelPlanner.getObservableTravelPlanList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredWishlist \u003d new FilteredList\u003c\u003e(this.travelPlanner.getObservableWishlist());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        directory \u003d this.travelPlanner.getWishlist();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        directoryIndex \u003d WISHLIST_INDEX;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory \u003d new ObservableDirectory(directory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredActivityList \u003d new FilteredList\u003c\u003e(observableDirectory.getObservableActivityList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredAccommodationList \u003d new FilteredList\u003c\u003e(observableDirectory.getObservableAccommodationList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredFriendList \u003d new FilteredList\u003c\u003e(observableDirectory.getObservableFriendList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this(new TravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return userPrefs.getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath(Path travelPlannerFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlannerFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefs.setTravelPlannerFilePath(travelPlannerFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPlanner \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlanner(ReadOnlyTravelPlanner travelPlanner) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlanner.resetData(travelPlanner);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setDirectory(WISHLIST_INDEX);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.hasTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void deleteTravelPlan(TravelPlan target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.removeTravelPlan(target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (directory.equals(target)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            setDirectory(WISHLIST_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        updateFilteredTravelPlanList(PREDICATE_SHOW_ALL_TRAVEL_PLAN);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setDirectory(filteredTravelPlans.indexOf(travelPlan));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedTravelPlan);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.setTravelPlan(target, editedTravelPlan);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setDirectory(filteredTravelPlans.indexOf(editedTravelPlan));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wishlist \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.hasActivity(activity);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.removeActivity(target);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addActivity(activity);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        updateFilteredWishlist(PREDICATE_SHOW_ALL_ACTIVITY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void addActivity(Activity activity, Index travelPlanIndex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        TravelPlan travelPlan \u003d filteredTravelPlans.get(travelPlanIndex.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlan.addTpo(activity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void copyActivity(Activity activity, Index travelPlanIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity copiedActivity \u003d new Activity(activity);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        addActivity(copiedActivity, travelPlanIndex);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Directory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setDirectory(int index) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (index \u003d\u003d WISHLIST_INDEX) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            directoryIndex \u003d WISHLIST_INDEX;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            directory \u003d travelPlanner.getWishlist();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            directoryIndex \u003d index;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            directory \u003d travelPlanner.getObservableTravelPlanList().get(index);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            TravelPlan travelPlan \u003d (TravelPlan) directory;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            activityList \u003d travelPlan.getActivityList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            accommodationList \u003d travelPlan.getAccommodationList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            friendList \u003d travelPlan.getFriendList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isDirectoryTypeTravelPlan() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return directory.isTravelPlan();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableDirectory getObservableDirectory() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return observableDirectory;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPlanObject \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return directory.contains(tPObj);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasTravelPlanObject(TravelPlanObject tPObj, int travelPlanIndex) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return filteredTravelPlans.get(travelPlanIndex).contains(tPObj);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void deleteTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        directory.remove(tPObj);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        directory.addTpo(tPObj);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlanObject(TravelPlanObject target, TravelPlanObject editedTravelPlanObject) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedTravelPlanObject);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        directory.setTpo(target, editedTravelPlanObject);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered TravelPlan List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code TravelPlan} backed by the internal list of"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code TravelPlanner}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filteredTravelPlans;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredTravelPlanList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredTravelPlans.setPredicate(predicate);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Wishlist List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Activity} backed by the internal list of"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code Wishlist}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredWishlist() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filteredWishlist;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredWishlist(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredWishlist.setPredicate(predicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered TravelPLanObject List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ? extends TravelPlanObject} backed by the internal list of"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code TravelPlan}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return filteredActivityList;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredActivityList.setPredicate(predicate);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filteredAccommodationList;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void updateFilteredAccommodationList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredAccommodationList.setPredicate(predicate);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFilteredFriendList() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return filteredFriendList;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredFriendList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredFriendList.setPredicate(predicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Logic List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public UniqueTravelPlanList getTravelPlanList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.getTravelPlanList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Wishlist getWishlist() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.getWishlist();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public AccommodationList getAccommodationList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return accommodationList;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public FriendList getFriendList() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return friendList;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the wishlist with the given comparator."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortWishlist(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.sortWishlist(comparator);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the activity list with the given comparator."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortActivityList(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activityList.sort(comparator);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the accommodation list with the given comparator."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortAccommodationList(Comparator\u003cAccommodation\u003e comparator) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        accommodationList.sort(comparator);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the friend list with the given comparator."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortFriendList(Comparator\u003cFriend\u003e comparator) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        friendList.sort(comparator);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        observableDirectory.setObservableDirectory(directory);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if accommodation object date is within the model\u0027s travel plan start and end date."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return false if accommodation start date and end date is within travel plan start date and end date."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isValidAccommodationDate(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        WanderlustDate travelPlanStartDate \u003d directory.getStartDate();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        WanderlustDate travelPlanEndDate \u003d directory.getEndDate();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (startDate.isBefore(travelPlanStartDate) || startDate.isAfter(travelPlanEndDate)) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (endDate.isBefore(travelPlanStartDate) || endDate.isAfter(travelPlanEndDate)) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if activity object date time is within the model\u0027s travel plan start and end date."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if activity date is within travel plan start date and end date range."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isValidActivityDate(WanderlustDateTime activityDateTime) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        WanderlustDate travelPlanStartDate \u003d directory.getStartDate();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        WanderlustDate travelPlanEndDate \u003d directory.getEndDate();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (activityDateTime.isBefore(travelPlanStartDate) || activityDateTime.isAfter(travelPlanEndDate)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if activity object date time is within the model\u0027s travel plan start and end date."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if activity date is within travel plan start date and end date range."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isValidActivityDate(WanderlustDateTime activityDateTime, TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        WanderlustDate travelPlanStartDate \u003d travelPlan.getStartDate();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        WanderlustDate travelPlanEndDate \u003d travelPlan.getEndDate();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (activityDateTime.isBefore(travelPlanStartDate)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || activityDateTime.isAfter(travelPlanEndDate)) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.equals(other.travelPlanner)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 filteredTravelPlans.equals(other.filteredTravelPlans)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 filteredWishlist.equals(other.filteredWishlist);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 5,
      "jeannetoh99": 69,
      "lyeyixian": 219,
      "jiaweiteo": 57,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ObservableDirectory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents an observable view of the current directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class ObservableDirectory {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String TOTAL_COST \u003d \"Total Cost: $\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ObservableList\u003cActivity\u003e observableActivityList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ObservableList\u003cAccommodation\u003e observableAccommodationList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ObservableList\u003cFriend\u003e observableFriendList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ObservableList\u003cObject\u003e observableDirectoryInformation \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private ObjectProperty\u003cDirectory\u003e dir \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private StringProperty observableCost \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Instantiates an observable view of the current directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param directory The directory representing the default directory."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableDirectory(Directory directory) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        dir.setValue(directory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        observableCost.setValue(TOTAL_COST + directory.getTotalCost());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.observableActivityList.setAll(directory.getObservableActivityList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (directory instanceof TravelPlan) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.observableAccommodationList.setAll(((TravelPlan) directory).getObservableAccommodationList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.observableFriendList.setAll(((TravelPlan) directory).getObservableFriendList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the cost of the directory as an observable StringProperty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public StringProperty getObservableCost() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return observableCost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the directory as an observable ObjectProperty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObjectProperty\u003cDirectory\u003e get() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the activities in the directory as an ObservableList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getObservableActivityList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this.observableActivityList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the accommodations in the directory as an ObservableList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getObservableAccommodationList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this.observableAccommodationList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the friends in the directory as an ObservableList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getObservableFriendList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this.observableFriendList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the observable directory to observe the specified directory."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setObservableDirectory(Directory directory) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        dir.setValue(directory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        observableCost.setValue(TOTAL_COST + directory.getTotalCost());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setObservableActivityList(directory.getObservableActivityList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (directory instanceof TravelPlan) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            setObservableAccommodationList(((TravelPlan) directory).getObservableAccommodationList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            setObservableFriendList(((TravelPlan) directory).getObservableFriendList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            clearObservableAccommodationList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            clearObservableFriendList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the observable directory to observe the activity list {@code newActivities}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void setObservableActivityList(ObservableList\u003cActivity\u003e newActivities) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.observableActivityList.setAll(newActivities);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the observable directory to observe the friend list {@code newFriends}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void setObservableFriendList(ObservableList\u003cFriend\u003e newFriends) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.observableFriendList.setAll(newFriends);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the observable directory to observe the accommodation list {@code newAccommodations}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void setObservableAccommodationList(ObservableList\u003cAccommodation\u003e newAccommodations) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.observableAccommodationList.setAll(newAccommodations);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Clears the observable friend list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void clearObservableFriendList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.observableFriendList.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Clears the observable accommodation list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void clearObservableAccommodationList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.observableAccommodationList.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 93,
      "lyeyixian": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTravelPlanner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Unmodifiable view of a travel planner"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface ReadOnlyTravelPlanner {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the travel plans list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * This list will not contain any duplicate travel plans."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cTravelPlan\u003e getObservableTravelPlanList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the wishlist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * This list will not contain any duplicate activities."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cActivity\u003e getObservableWishlist();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TravelPlanner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.UniqueTravelPlanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Wraps all data at the travel planner level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan \u0026 .isSameActivity comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlanner implements ReadOnlyTravelPlanner {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final UniqueTravelPlanList travelPlans;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Wishlist wishlist;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist \u003d new Wishlist();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates a TravelPlanner using the TravelPlans and Wishlist in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner(ReadOnlyTravelPlanner toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the contents of the travel plan list with {@code travelPlans}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlans} must not contain duplicate travel plans."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlans(List\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlans.setTravelPlans(travelPlans);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the wishlist with {@code activities}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setWishlist(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.wishlist.setActivities(activities);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Resets the existing data of this {@code TravelPlanner} with {@code newData}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(ReadOnlyTravelPlanner newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setTravelPlans(newData.getObservableTravelPlanList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setWishlist(newData.getObservableWishlist());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a travel plan with the same identity as {@code travelPlan} exists in the travel planner."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans.contains(travelPlan);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the wishlist."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return wishlist.hasActivity(activity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds a travel plan to the travel planner."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must not already exist in the travel planner."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addTravelPlan(TravelPlan tP) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.add(tP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds an activity to the wishlist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity must not already exist in the wishlist."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.addActivity(activity);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan {@code target} in the list with {@code editedTravelPlan}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the travel planner."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan identity of {@code editedTravelPlan} must not be the same as another existing travel plan in the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * travel planner."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(editedTravelPlan);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.setTravelPlan(target, editedTravelPlan);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the wishlist."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * wishlist."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        wishlist.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code key} from this {@code TravelPlanner}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code key} must exist in the travel planner."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void removeTravelPlan(TravelPlan key) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.remove(key);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code key} from this {@code Wishlist}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code key} must exist in the wishlist."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.removeActivity(key);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the wishlist as {@code Wishlist}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Wishlist getWishlist() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return wishlist;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns travel plans as {@code UniqueTravelPlanList}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public UniqueTravelPlanList getTravelPlanList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sorts the wishlist according to the given comparator."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortWishlist(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        wishlist.sort(comparator);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans.asUnmodifiableObservableList().size() + \" travel plans\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                + wishlist.getObservableActivityList().size() + \" activities\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getObservableTravelPlanList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getObservableWishlist() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return wishlist.getObservableActivityList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || (other instanceof TravelPlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 travelPlans.equals(((TravelPlanner) other).travelPlans)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 wishlist.equals(((TravelPlanner) other).wishlist));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return Objects.hash(travelPlans, wishlist);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 10,
      "lyeyixian": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Path travelPlannerFilePath \u003d Paths.get(\"data\" , \"travelplanner.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setTravelPlannerFilePath(newUserPrefs.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlannerFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath(Path travelPlannerFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlannerFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlannerFilePath \u003d travelPlannerFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 travelPlannerFilePath.equals(o.travelPlannerFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return Objects.hash(guiSettings, travelPlannerFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + travelPlannerFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 10,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/Accommodation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STARTANDENDDATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.getNumOfDaysAndNights;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.isValidStartAndEndDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Represents an Accommodation in the travel plan."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Accommodation extends TravelPlanObject {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String TPO_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustDate startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustDate endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // attributes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Accommodation(Name name, WanderlustDate startDate, WanderlustDate endDate, Cost cost, Location location) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        checkArgument(isValidStartAndEndDate(startDate, endDate), MESSAGE_INVALID_STARTANDENDDATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDate getStartDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDate getEndDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int getCostAsInt() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Integer.parseInt(cost.getValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getCostAsString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return cost.getValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** Returns true if both accommodations have the same name, startDate and endDate fields. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean isSameAccommodation(Accommodation otherAccommodation) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (otherAccommodation \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return otherAccommodation !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a string representing the start and end date of the accommodation."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * E.g. 20 Dec 2020 to 25 Dec 2020 (6D5N)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String dateString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return getStartDate().toString() + \" to \" + getEndDate().toString() + \" (\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + getNumOfDaysAndNights(startDate, endDate) + \")\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns true if both accommodations have identical fields."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * This defines a stronger notion of equality between two accommodations."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!(other instanceof Accommodation)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation otherAccommodation \u003d (Accommodation) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return otherAccommodation.getName().equals(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getCost().equals(getCost())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return Objects.hash(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\"Date: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(getEndDate()).append(\"\\n\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\"Address: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(getLocation()).append(\"\\n\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\"Cost: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(getCost()).append(\"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 106,
      "jeannetoh99": 18,
      "lyeyixian": 7,
      "jiaweiteo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/UniqueAccommodationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.exceptions.AccommodationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.exceptions.DuplicateAccommodationException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * A list of accommodations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * An accommodation is considered unique by comparing using {@code Accommodation#isSameAccommodation(Accommodation)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * As such, adding and updating of accommodation uses Accommodation#isSameAccommodation(Accommodation) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * so as to ensure that the accommodation being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * UniqueAccommodationList. However, the removal of an accommodation uses Accommodation#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * as to ensure that the accommodation with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * @see Accommodation#isSameAccommodation(Accommodation)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class UniqueAccommodationList implements Iterable\u003cAccommodation\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final ObservableList\u003cAccommodation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final ObservableList\u003cAccommodation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns true if the list contains an equivalent accommodation as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean contains(Accommodation toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAccommodation);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getInternalList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Adds an accommodation to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * The accommodation must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void add(Accommodation toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Replaces the accommodation {@code target} in the list with {@code editedAccommodation}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * The accommodation identity of {@code editedAccommodation} must not be the same as"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * another existing accommodation in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(target, editedAccommodation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new AccommodationNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!target.isSameAccommodation(editedAccommodation) \u0026\u0026 contains(editedAccommodation)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.set(index, editedAccommodation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Removes the equivalent accommodation from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * The accommodation must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void remove(Accommodation toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new AccommodationNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations(UniqueAccommodationList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Replaces the contents of this list with {@code accommodations}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * {@code accommodations} must not contain duplicate accommodations."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(accommodations);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!accommodationsAreUnique(accommodations)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.setAll(accommodations);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cAccommodation\u003e comparator) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Iterator\u003cAccommodation\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof UniqueAccommodationList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAccommodationList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns true if {@code accommodations} contains only unique accommodations."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private boolean accommodationsAreUnique(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        for (int i \u003d 0; i \u003c accommodations.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accommodations.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                if (accommodations.get(i).isSameAccommodation(accommodations.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 135,
      "lyeyixian": 9,
      "jiaweiteo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/exceptions/AccommodationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Signals that the operation is unable to find the specified accommodation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AccommodationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/exceptions/DuplicateAccommodationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Signals that the operation will result in duplicate Accommodations"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Accommodations are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DuplicateAccommodationException extends DuplicateException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public DuplicateAccommodationException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(\"Operation would result in duplicate accommodations.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 9,
      "jeannetoh99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents an Activity in Wanderlust."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Activity extends TravelPlanObject {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String TPO_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Importance levelOfImportance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustDateTime activityDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Activity(Name name, Location location, Cost cost, Importance levelOfImportance,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDateTime activityDateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(name, location, cost, levelOfImportance, activityDateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.levelOfImportance \u003d levelOfImportance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.activityDateTime \u003d activityDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates a deep copy of the given activity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Activity(Activity activity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.name \u003d activity.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.location \u003d activity.getLocation();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.cost \u003d activity.getCost();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.levelOfImportance \u003d activity.getLevelOfImportance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.activityDateTime \u003d activity.getActivityDateTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns cost as string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return String value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getCostAsString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return cost.getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns cost as an integer."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return int value."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int getCostAsInt() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Integer.parseInt(cost.getValue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Importance getLevelOfImportance() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return levelOfImportance;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns importance as an integer."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return int value."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int getImportanceAsInt() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Integer.parseInt(levelOfImportance.getValue());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDateTime getActivityDateTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return activityDateTime;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if both activities are of the same name."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * This defines a weaker notion of equality between two activities."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return otherActivity !\u003d null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 otherActivity.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 otherActivity.getActivityDateTime().equals(getActivityDateTime());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if both activities have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getCost().equals(getCost())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getLevelOfImportance().equals(getLevelOfImportance())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getActivityDateTime().equals(getActivityDateTime());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Objects.hash(name, location, cost, levelOfImportance, activityDateTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"Location: \").append(getLocation()).append(\"\\n\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"Importance Level: \").append(getLevelOfImportance()).append(\"\\n\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"Cost: \").append(getCost()).append(\"\\n\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"Date and time: \").append(getActivityDateTime()).append(\"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 6,
      "jeannetoh99": 11,
      "jiaweiteo": 129,
      "lyeyixian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Importance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents an Activity\u0027s level of Importance in the Wanderlust."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidImportance(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Importance {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"Importance Level should only contain numbers, and it should range from 1 - 5, with 5 being \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    + \"the most important while 1 being the least important\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code Importance}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param importanceLevel A valid importance level."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Importance(String importanceLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(importanceLevel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidImportance(importanceLevel), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        value \u003d importanceLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid importance level."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidImportance(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Importance // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 value.equals(((Importance) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/UniqueActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * An activity is considered unique by comparing using {@code Activity#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * As such, adding and updating of Activity uses Activity#isSameActivity(Activity) for equality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * so as to ensure that the activity being added or updated is unique in terms of identity in the UniqueActivityList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * However, the removal of a activity uses Activity#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * as to ensure that the Activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * @see Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class UniqueActivityList implements Iterable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if the list contains an equivalent activity as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean contains(Activity toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ObservableList\u003cActivity\u003e getInternalList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Adds an activity to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The activity must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Replaces the activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!target.isSameActivity(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ObservableList\u003cActivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}, with each Activity object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * typecast to TravelPlanObject (TPO)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e asUnmodifiableObservableTpoList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return internalList.stream().map(item -\u003e (TravelPlanObject) item)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .collect(Collectors.collectingAndThen(Collectors.toList(), FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                if (activities.get(i).isSameActivity(activities.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 13,
      "jiaweiteo": 139,
      "lyeyixian": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/WanderlustDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents a Activity\u0027s date time in Wanderlust."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWanderlustDateTime(String)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class WanderlustDateTime {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String FORMAT \u003d \"YYYY-MM-DD HH:mm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date Time should be of the format \" + FORMAT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Date time must be in the format YYYY-MM-DD HH:mm."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "           + \"( [0-1][0-9]|2[0-4]):([0-5][0-9])\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final DateFormat VALID_DATE_STRING \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final LocalDateTime value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code WanderlustDateTime}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDateTime(String dateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        checkArgument(isValidWanderlustDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        value \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns if a given string is a valid activity date time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static boolean isValidWanderlustDateTime(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            VALID_DATE_STRING.parse(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            LocalDateTime.parse(test, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public LocalDateTime getValue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if the current WanderlustDateTime comes before the given WanderlustDate chronologically."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if current WanderlustDateTime is before the given WanderlustDate."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isBefore(WanderlustDate toCompare) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.toLocalDate().isBefore(toCompare.getValue());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if the current WanderlustDateTime comes after the given WanderlustDate chronologically."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if current WanderlustDateTime is after the given WanderlustDate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isAfter(WanderlustDate toCompare) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.toLocalDate().isAfter(toCompare.getValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return value.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || (other instanceof WanderlustDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 dateTime.equals(((WanderlustDateTime) other).dateTime)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 3,
      "jeannetoh99": 7,
      "lyeyixian": 65,
      "jiaweiteo": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Signals that the operation is unable to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/DuplicateActivityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Signals that the operation will result in duplicate Activities"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * (Activities are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DuplicateActivityException extends DuplicateException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(\"Operation would result in duplicate activities.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "jiaweiteo": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Cost.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents activity\u0027s or accommodation\u0027s cost in the Wanderlust."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            \"Cost should only contain positive integer and must not exceed MAX_VALUE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Digit}+(.\\\\p{Digit}\\\\p{Digit})?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code Cost}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        value \u003d cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            Integer.parseInt(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Cost // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 value.equals(((Cost) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 55,
      "lyeyixian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STRING_EXCEED_CHARACTER_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.StringUtil.isWithinCharacterLimit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Represents Activity\u0027s or Accommodation\u0027s location in Wanderlust."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int CHARACTER_LIMIT \u003d 200;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_LOCATION_EXCEEDS_CHARACTER_LIMIT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String.format(MESSAGE_STRING_EXCEED_CHARACTER_LIMIT, \"Location\", CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\p{Graph}+\\\\p{Space}?)+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        checkArgument(isWithinCharacterLimit(location, CHARACTER_LIMIT), MESSAGE_LOCATION_EXCEEDS_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 13,
      "jiaweiteo": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STRING_EXCEED_CHARACTER_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.StringUtil.isWithinCharacterLimit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents activity\u0027s or accommodation\u0027s or friend\u0027s or travel plan\u0027s name in Wanderlust."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final int CHARACTER_LIMIT \u003d 80;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \"Names should only contain alphanumeric characters, punctuations and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_NAME_EXCEEDS_CHARACTER_LIMIT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String.format(MESSAGE_STRING_EXCEED_CHARACTER_LIMIT, \"Name\", CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The first character of the Name must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\p{Alnum}(\\\\p{Alnum}|\u0027|,)*\\\\p{Space}?)+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        checkArgument(isWithinCharacterLimit(name, CHARACTER_LIMIT), MESSAGE_NAME_EXCEEDS_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.value \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 16,
      "jiaweiteo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Tests that a {@code TravelPlanObject}\u0027s or {@code TravelPlan}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cNameable\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean test(Nameable n) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(n.getName().getValue(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 2,
      "lyeyixian": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Nameable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public interface Nameable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/TravelPlanObject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public abstract class TravelPlanObject implements Nameable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract Name getName();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "lyeyixian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/WanderlustDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a TravelPlan\u0027s start/end date in the travel planner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWanderlustDate(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class WanderlustDate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String FORMAT \u003d \"YYYY-MM-DD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format \" + FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Dates must be in the format YYYY-MM-DD."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}-[01]\\\\d-[0-3]\\\\d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final DateFormat VALID_DATE_STRING \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs a {@code WanderlustDate}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param date A valid travel date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public WanderlustDate(String date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        checkArgument(isValidWanderlustDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        value \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns if a given string is a valid travel date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static boolean isValidWanderlustDate(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            VALID_DATE_STRING.parse(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if the current WanderlustDate comes before the given WanderlustDate chronologically."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if current WanderlustDate is before the given WanderlustDate."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isBefore(WanderlustDate toCompare) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.isBefore(toCompare.getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Checks if the current WanderlustDate comes after the given WanderlustDate chronologically."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return true if current WanderlustDate is after the given WanderlustDate."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isAfter(WanderlustDate toCompare) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.isAfter(toCompare.getValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if the start date is before or on the same day as end date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static boolean isValidStartAndEndDate(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return startDate.getValue().compareTo(endDate.getValue()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Return number of days between {@code startDate} and {@code endDate} inclusive."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Number of days between {@code startDate} and {@code endDate} inclusive."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static long getNumOfDays(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return ChronoUnit.DAYS.between(startDate.getValue(), endDate.getValue()) + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns number of days and nights between the start and end date in a String format (e.g. \"2D1N\")."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Number of days (x) and nights (y) between the start and end date in the \"xDyN\" format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String getNumOfDaysAndNights(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        long numOfDays \u003d getNumOfDays(startDate, endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return String.format(\"%dD%dN\", numOfDays, numOfDays - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // travel plan object-level operations"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this date as a LocalDate object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this date as a string."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof WanderlustDate // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 value.equals(((WanderlustDate) other).value)); // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 3,
      "jeannetoh99": 110,
      "jiaweiteo": 18,
      "lyeyixian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/Friend.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a Friend in the travel plan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Friend extends TravelPlanObject {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String TPO_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Passport passport;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Name name; // name can be the same for different friends"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final Mobile mobile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Friend(Name name, Passport passport, Mobile mobile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireAllNonNull(name, passport, mobile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.passport \u003d passport;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.mobile \u003d mobile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getNameAsString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Passport getPassport() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return passport;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Mobile getMobile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return mobile;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Returns true if both friends have the same passport."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean isSameFriend(Friend otherFriend) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (otherFriend \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return otherFriend !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 otherFriend.getPassport().equals(getPassport());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if both friends have the same identity and data fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * This defines a stronger notion of equality between two friends."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!(other instanceof Friend)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend otherFriend \u003d (Friend) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return otherFriend.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 otherFriend.getPassport().equals(getPassport())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 otherFriend.getMobile().equals(getMobile());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return Objects.hash(name, passport, mobile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        builder.append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .append(\"Passport number: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .append(getPassport())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .append(\"Mobile phone: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(getMobile()).append(\"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 86,
      "jeannetoh99": 6,
      "lyeyixian": 4,
      "jiaweiteo": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/Mobile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Represents a Friend\u0027s mobile number in the travel plan."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMobile(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Mobile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"Mobile numbers should only contain numbers starting with 8 or 9 (SG mobile number), \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    + \"and it should only be 8 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[89]\\\\d{7}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a {@code Mobile}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param mobile A valid mobile number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Mobile(String mobile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(mobile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        checkArgument(isValidMobile(mobile), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        value \u003d mobile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Returns true if a given string is a valid mobile number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static boolean isValidMobile(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof Mobile // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 value.equals(((Mobile) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 35,
      "timjkong": 12,
      "jeannetoh99": 5,
      "jiaweiteo": 2,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/Passport.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Represents a Friend\u0027s passport in the travel plan."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassport(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class Passport {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            \"Passport numbers should be in the form [E] + 7 numbers + [A-Z]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[E]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Constructs a {@code Passport}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param passport A valid passport."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Passport(String passport) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(passport);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        checkArgument(isValidPassport(passport), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        value \u003d passport;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a given string is a valid passport."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static boolean isValidPassport(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof Passport // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 value.equals(((Passport) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 45,
      "jeannetoh99": 7,
      "lyeyixian": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/UniqueFriendList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.exceptions.DuplicateFriendException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.exceptions.FriendNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * A list of friends that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * A friend is considered unique by comparing using {@code Friend#isSameFriend(Friend)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * friends uses Friend#isSameFriend(Friend) for equality so as to ensure that the friend being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * unique in terms of identity in the UniqueFriendList. However, the removal of a person uses Friend#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * as to ensure that the friend with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * @see Friend#isSameFriend(Friend)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class UniqueFriendList implements Iterable\u003cFriend\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final ObservableList\u003cFriend\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final ObservableList\u003cFriend\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Returns true if the list contains an equivalent friend as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean contains(Friend toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFriend);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Adds a friend to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * The friend must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void add(Friend toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new DuplicateFriendException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Replaces the friend {@code target} in the list with {@code editedFriend}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * The friend identity of {@code editedFriend} must not be the same as another existing friend in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend(Friend target, Friend editedFriend) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireAllNonNull(target, editedFriend);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new FriendNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!target.isSameFriend(editedFriend) \u0026\u0026 contains(editedFriend)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new DuplicateFriendException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        internalList.set(index, editedFriend);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Removes the equivalent friend from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * The friend must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void remove(Friend toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new FriendNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Replaces the content of this list with another UniqueFriendList {@code replacement}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * @param replacement must not be null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends(UniqueFriendList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Replaces the contents of this list with {@code friends}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * {@code friends} must not contain duplicate friends."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends(List\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        requireAllNonNull(friends);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!friendsAreUnique(friends)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new DuplicateFriendException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        internalList.setAll(friends);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cFriend\u003e comparator) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public ObservableList\u003cFriend\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}, with each Friend object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * typecast to TravelPlanObject (TPO)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e asUnmodifiableObservableTpoList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return internalList.stream().map(item -\u003e (TravelPlanObject) item)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .collect(Collectors.collectingAndThen(Collectors.toList(), l -\u003e FXCollections.observableArrayList(l)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Iterator\u003cFriend\u003e iterator() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                || (other instanceof UniqueFriendList // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFriendList) other).internalList));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Returns true if {@code friends} contains only unique friends."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private boolean friendsAreUnique(List\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        for (int i \u003d 0; i \u003c friends.size() - 1; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            for (int j \u003d i + 1; j \u003c friends.size(); j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                if (friends.get(i).isSameFriend(friends.get(j))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ObservableList\u003cFriend\u003e getInternalList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 139,
      "jeannetoh99": 13,
      "lyeyixian": 5,
      "jiaweiteo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/exceptions/DuplicateFriendException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Signals that the operation will result in duplicate Friends (Friends are considered duplicates if they have the same"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * passport)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DuplicateFriendException extends DuplicateException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public DuplicateFriendException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(\"This operation will result in duplicate friends.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 9,
      "jeannetoh99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/exceptions/FriendNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Signals that the operation is unable to find the specified Friend."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class FriendNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/AccommodationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.UniqueAccommodationList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the list of Accommodations in a travel plan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameAccommodation comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class AccommodationList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueAccommodationList accommodations;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates an AccommodationList using the Accommodations in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public AccommodationList(AccommodationList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the accommodation list with {@code accommodations}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code accommodations} must not contain duplicate accommodations."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setAccommodations(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodations.setAccommodations(accommodations);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Resets the existing data of this {@code AccommodationList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(AccommodationList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setAccommodations(newData.getObservableAccommodationList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// accommodation-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a accommodation with the same identity as {@code accommodation} exists in the accommodation list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.contains(accommodation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds a accommodation to the accommodation list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The accommodation must not already exist in the accommodation list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addAccommodation(Accommodation p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given accommodation {@code target} in the list with {@code editedAccommodation}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the accommodation list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The accommodation identity of {@code editedAccommodation} must not be the same as another existing accommodation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * in the accommodation list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedAccommodation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.setAccommodation(target, editedAccommodation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code key} from this {@code AccommodationList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the accommodation list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeAccommodation(Accommodation key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sorts the list of accommodations according to the comparator."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param comparator Comparator to sort the list of accommodations with."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cAccommodation\u003e comparator) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        accommodations.sort(comparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\"Accommodations: \\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getObservableAccommodationList().forEach(accommodation -\u003e builder.append(accommodation).append(\"\\n\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the accommodation list as an {@ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getObservableAccommodationList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof AccommodationList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 accommodations.equals(((AccommodationList) other).accommodations));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 120,
      "lyeyixian": 14,
      "jiaweiteo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the list of activities in a travel plan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class ActivityList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an ActivityList using the Activities in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ActivityList(ActivityList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code ActvityList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(ActivityList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setActivities(newData.getObservableActivityList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// activity-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the activity list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds an activity to the activity list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity must not already exist in the activity list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the activity list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * activity list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from this {@code ActivityList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the activity list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sorts the list of activities according to the comparator."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param comparator Comparator to sort the list of activities with."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.sort(comparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\"Activities: \\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getObservableActivityList().forEach(activity -\u003e builder.append(activity).append(\"\\n\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the activity list as an {@ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getObservableActivityList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof ActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activities.equals(((ActivityList) other).activities));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 123,
      "lyeyixian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/FriendList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.UniqueFriendList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the list of friends in a travel plan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameFriend comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class FriendList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final ObservableList\u003cFriend\u003e EMPTY_FRIEND_LIST \u003d new FriendList().getObservableFriendList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueFriendList friends;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public FriendList() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an seedu.address.model.FriendList using the Friends in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public FriendList(FriendList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the friend list with {@code friends}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code friends} must not contain duplicate friends."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setFriends(List\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friends.setFriends(friends);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code seedu.address.model.FriendList} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(FriendList newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setFriends(newData.getObservableFriendList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// friend-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a friend with the same identity as {@code friend} exists in the friend list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasFriend(Friend friend) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(friend);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.contains(friend);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds a friend to the friend list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The friend must not already exist in the friend list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addFriend(Friend p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given friend {@code target} in the list with {@code editedFriend}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the friend list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The friend identity of {@code editedFriend} must not be the same as another existing friend in the friend list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setFriend(Friend target, Friend editedFriend) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedFriend);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.setFriend(target, editedFriend);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from this {@code seedu.address.model.FriendList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the friend list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeFriend(Friend key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sorts the list of friends according to the comparator."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param comparator Comparator to sort the list of friends with."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cFriend\u003e comparator) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        friends.sort(comparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\"Friends: \\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getObservableFriendList().forEach(friend -\u003e builder.append(friend).append(\"\\n\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the friend list as an {@ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cFriend\u003e getObservableFriendList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof FriendList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 friends.equals(((FriendList) other).friends));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 122,
      "lyeyixian": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/TravelPlan.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STARTANDENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.getNumOfDaysAndNights;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.commons.WanderlustDate.isValidStartAndEndDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Nameable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a travel plan in the travel planner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan comparison)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlan extends Directory implements Nameable {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Start Date should be before or on the same date as End Date.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String TRAVEL_PLAN_WORD \u003d \"travelplan\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final WanderlustDate startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final WanderlustDate endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final AccommodationList accommodations \u003d new AccommodationList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final FriendList friends \u003d new FriendList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an empty TravelPlan with the name, startDate and endDate."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param name Name of the travel plan."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param startDate Start date of the travel plan."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param endDate End date of the travel plan."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return An empty travel plan with the specified name, start date and end date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlan(Name name, WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(name, startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        checkArgument(isValidStartAndEndDate(startDate, endDate), MESSAGE_INVALID_STARTANDENDDATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a TravelPlan using the specified Accommodations, Activities and Friends."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param name Name of the travel plan."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param startDate Start date of the travel plan."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param endDate End date of the travel plan."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param accommodationsToBeCopied List of accommodations to be added to the travel plan."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param activitiesToBeCopied List of activities to be added to the travel plan."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param friendsTobeCopied List of friends to be added to the travel plan."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return A travel plan with the specified name, start date, end date, accommodations, activities and friends."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlan(Name name, WanderlustDate startDate, WanderlustDate endDate,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                      ActivityList activitiesToBeCopied,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                      AccommodationList accommodationsToBeCopied,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                      FriendList friendsTobeCopied) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(name, startDate, endDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.resetData(accommodationsToBeCopied);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.resetData(activitiesToBeCopied);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.resetData(friendsTobeCopied);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a TravelPlan using the specified TravelPlan."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param toBeCopied TravelPlan to copy into the new travel plan."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return A copy of the travel plan {@code toBeCopied}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlan(TravelPlan toBeCopied) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireAllNonNull(toBeCopied.name, toBeCopied.startDate, toBeCopied.endDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d toBeCopied.name;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d toBeCopied.startDate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d toBeCopied.endDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code TravelPlan} with {@code newData}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData(TravelPlan newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        accommodations.resetData(newData.getAccommodationList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.resetData(newData.getActivityList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        friends.resetData(newData.getFriendList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a travel plan object with the same identity as {@code travelPlanObject} exists in the travel plan"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * object\u0027s list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean contains(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (travelPlanObject instanceof Accommodation) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return accommodations.hasAccommodation((Accommodation) travelPlanObject);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (travelPlanObject instanceof Activity) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return activities.hasActivity((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if travelPlanObject instanceof Friend"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return friends.hasFriend((Friend) travelPlanObject);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds a travel plan object to its corresponding list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The travel plan object must not already exist in its corresponding list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addTpo(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (travelPlanObject instanceof Accommodation) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            accommodations.addAccommodation((Accommodation) travelPlanObject);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (travelPlanObject instanceof Activity) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            activities.addActivity((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if travelPlanObject instanceof Friend"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            friends.addFriend((Friend) travelPlanObject);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given travel plan object {@code target} in the list with {@code editedTravelPlanObject}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the corresponding travel plan object list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The travel plan object identity of {@code editedTravelPlanObject} must not be the same as another existing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * travel plan object in the corresponding travel plan object list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTpo(TravelPlanObject target, TravelPlanObject editedTravelPlanObject) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (editedTravelPlanObject instanceof Accommodation) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            accommodations.setAccommodation((Accommodation) target, (Accommodation) editedTravelPlanObject);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (editedTravelPlanObject instanceof Activity) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            activities.setActivity((Activity) target, (Activity) editedTravelPlanObject);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if editedTravelPlanObject instanceof Friend"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            friends.setFriend((Friend) target, (Friend) editedTravelPlanObject);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from the corresponding travel plan object list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the corresponding travel plan object list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void remove(TravelPlanObject key) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (key instanceof Accommodation) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            accommodations.removeAccommodation((Accommodation) key);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (key instanceof Activity) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            activities.removeActivity((Activity) key);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if key instanceof Friend"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            friends.removeFriend((Friend) key);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// travel plan identity methods"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns start date of the travel plan."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Start date of the travel plan."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public WanderlustDate getStartDate() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns end date of the travel plan."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return End date of the travel plan."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public WanderlustDate getEndDate() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean isTravelPlan() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if both travel plans of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * This defines a weaker notion of equality between two travel plans."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean isSameTravelPlan(TravelPlan otherTravelPlan) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (otherTravelPlan \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return otherTravelPlan !\u003d null"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 otherTravelPlan.getName().equals(getName());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a string representing the start and end date of the travel plan."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * E.g. 20 Dec 2020 to 25 Dec 2020 (6D5N)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getDateTitle() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return getStartDate().toString() + \" to \" + getEndDate().toString() + \" (\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + getNumOfDaysAndNights(startDate, endDate) + \")\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"\\nStart Date: \")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"\\nEnd Date: \")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"\\n(\").append(getNumOfDaysAndNights(startDate, endDate)).append(\")\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\"\\n\\n\" + accommodations)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(activities)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(friends);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// travel plan data methods"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this travel plan\u0027s accommodation list as an {@AccommodationList}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public AccommodationList getAccommodationList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this travel plan\u0027s accommodation list as an {@ObservableList}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getObservableAccommodationList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return accommodations.getObservableAccommodationList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this travel plan\u0027s activity list as an {@ActivityList}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this travel plan\u0027s activity list as an {@ObservableList}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getObservableActivityList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return activities.getObservableActivityList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this travel plan\u0027s friend list as a {@FriendList}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public FriendList getFriendList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns this travel plan\u0027s friend list as an {@ObservableList}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cFriend\u003e getObservableFriendList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return friends.getObservableFriendList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Generates the total cost of the travel plan, which includes the cost of activities and accommodations."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Total cost of the travel plan as a string."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getTotalCost() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        int totalCost \u003d 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.getObservableActivityList().size(); i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Activity tempActivity \u003d activities.getObservableActivityList().get(i);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            totalCost +\u003d Integer.parseInt(tempActivity.getCostAsString());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (int i \u003d 0; i \u003c accommodations.getObservableAccommodationList().size(); i++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Accommodation tempAccommodation \u003d accommodations.getObservableAccommodationList().get(i);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            totalCost +\u003d Integer.parseInt(tempAccommodation.getCostAsString());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return Integer.toString(totalCost);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof TravelPlan // instanceof handles nulls"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 name.equals(((TravelPlan) other).name)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 startDate.equals(((TravelPlan) other).startDate)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 endDate.equals(((TravelPlan) other).endDate)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 accommodations.equals(((TravelPlan) other).accommodations)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activities.equals(((TravelPlan) other).activities)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 friends.equals(((TravelPlan) other).friends));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return Objects.hash(name, startDate, endDate, accommodations, activities, friends);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 8,
      "jeannetoh99": 276,
      "lyeyixian": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/UniqueTravelPlanList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.exceptions.DuplicateTravelPlanException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.exceptions.TravelPlanNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A list of travel plans that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A travel plan is considered unique by comparing using {@code TravelPlan#isSameTravelPlan(TravelPlan)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * adding and updating of travel plans uses TravelPlan#isSameTravelPlan(TravelPlan) for equality so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * the travel plan being added or updated is unique in terms of identity in the UniqueTravelPlanList. However, the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * removal of a travel plan uses TravelPlan#equals(Object) so as to ensure that the travel plan with exactly the same"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * @see TravelPlan#isSameTravelPlan(TravelPlan)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class UniqueTravelPlanList implements Iterable\u003cTravelPlan\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final ObservableList\u003cTravelPlan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final ObservableList\u003cTravelPlan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if the list contains an equivalent travel plan as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean contains(TravelPlan toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTravelPlan);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds a travel plan to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void add(TravelPlan toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DuplicateTravelPlanException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the travel plan {@code target} in the list with {@code editedTravelPlan}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan identity of {@code editedTravelPlan} must not be the same as another existing travel plan in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedTravelPlan);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new TravelPlanNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!target.isSameTravelPlan(editedTravelPlan) \u0026\u0026 contains(editedTravelPlan)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DuplicateTravelPlanException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        internalList.set(index, editedTravelPlan);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes the equivalent travel plan from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void remove(TravelPlan toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new TravelPlanNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlans(UniqueTravelPlanList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        internalList.setAll(replacement.internalList.stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .map(tp -\u003e new TravelPlan(tp))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the contents of this list with {@code travelPlans}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlans} must not contain duplicate travel plans."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlans(List\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(travelPlans);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!travelPlansAreUnique(travelPlans)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DuplicateTravelPlanException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        internalList.setAll(travelPlans.stream().map(tp -\u003e new TravelPlan(tp)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Iterator\u003cTravelPlan\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || (other instanceof UniqueTravelPlanList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTravelPlanList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if {@code travelPlans} contains only unique travel plans."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private boolean travelPlansAreUnique(List\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (int i \u003d 0; i \u003c travelPlans.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c travelPlans.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                if (travelPlans.get(i).isSameTravelPlan(travelPlans.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/exceptions/DuplicateTravelPlanException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Signals that the operation will result in duplicate TravelPlans (TravelPlans are considered duplicates if they have"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * the same"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DuplicateTravelPlanException extends DuplicateException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public DuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(\"Operation would result in duplicate travel plans.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "lyeyixian": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/exceptions/TravelPlanNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Signals that the operation is unable to find the specified travel plan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlanNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleWanderlustDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class SampleWanderlustDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static TravelPlan sampleTravelPlan1 \u003d new TravelPlan(new Name(\"Trip to Hawaii\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new WanderlustDate(\"2020-11-01\"), new WanderlustDate(\"2020-12-31\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static TravelPlan sampleTravelPlan2 \u003d new TravelPlan(new Name(\"Netherlands Getaway\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new WanderlustDate(\"2021-01-01\"), new WanderlustDate(\"2021-12-31\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Friend[] getSampleFriends1() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Friend[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Alex Yeoh\"), new Passport(\"E1234567R\"), new Mobile(\"87438807\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Bernice Yu\"), new Passport(\"E1234567J\"), new Mobile(\"99272758\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Charlotte Oliveiro\"), new Passport(\"E1234567U\"), new Mobile(\"93210283\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"David Li\"), new Passport(\"E1234567W\"), new Mobile(\"99103182\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Friend[] getSampleFriends2() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Friend[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Lye Yi Xian\"), new Passport(\"E7654321T\"), new Mobile(\"92421847\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Teo Jia Wei\"), new Passport(\"E7654321J\"), new Mobile(\"81238032\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Timothy Ong\"), new Passport(\"E7654321E\"), new Mobile(\"91274810\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Lim Hai Shan\"), new Passport(\"E7654521E\"), new Mobile(\"89002939\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new Friend(new Name(\"Jeanne Toh\"), new Passport(\"E7654321W\"), new Mobile(\"88234200\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Accommodation[] getSampleAccommodations1() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Accommodation[] {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"Pooh\u0027s House\"), new WanderlustDate(\"2020-12-12\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2020-12-31\"), new Cost(\"50\"), new Location(\"100 Acre Woods\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"Hogwarts\"), new WanderlustDate(\"2020-11-11\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2020-11-25\"), new Cost(\"10000\"), new Location(\"London\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Accommodation[] getSampleAccommodations2() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Accommodation[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"River Island\"), new WanderlustDate(\"2021-07-12\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2021-08-31\"), new Cost(\"6000\"), new Location(\"Stardew Valley\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"Snow Cabin\"), new WanderlustDate(\"2021-09-01\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2021-09-25\"), new Cost(\"200\"), new Location(\"Ice Valley\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Activity[] getSampleActivities1() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Activity[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Bungee Jumping\"), new Location(\"Sentosa\"), new Cost(\"200\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"2\"), new WanderlustDateTime(\"2020-12-12 11:00\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Eat Bingsu\"), new Location(\"Snowflake Street\"), new Cost(\"5\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"3\"), new WanderlustDateTime(\"2020-12-23 17:00\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Cherry Picking\"), new Location(\"The Woods\"), new Cost(\"50\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"5\"), new WanderlustDateTime(\"2020-12-13 09:00\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Music Festival\"), new Location(\"Tomorrowland Avenue\"), new Cost(\"500\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"1\"), new WanderlustDateTime(\"2020-12-12 23:59\"))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Activity[] getSampleActivities2() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Activity[] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Ice Fishing\"), new Location(\"Ice Park\"), new Cost(\"20\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"5\"), new WanderlustDateTime(\"2021-07-22 23:00\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Visit the National Museum\"), new Location(\"Museum Lane 5\"), new Cost(\"5\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"2\"), new WanderlustDateTime(\"2021-06-09 17:40\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Ice Skating\"), new Location(\"Skating Rink Avenue\"), new Cost(\"30\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"1\"), new WanderlustDateTime(\"2021-01-05 09:21\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Mountain Climbing\"), new Location(\"Tomorrowland\"), new Cost(\"100\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"4\"), new WanderlustDateTime(\"2021-02-23 20:59\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static TravelPlan getSampleTravelPlan(TravelPlan sampleTravelPlan, Activity[] sampleActivities,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Accommodation[] sampleAccommodations, Friend[] sampleFriends) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Friend sampleFriend : sampleFriends) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            sampleTravelPlan.addTpo(sampleFriend);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity sampleActivity : sampleActivities) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            sampleTravelPlan.addTpo(sampleActivity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Accommodation sampleAccommodation : sampleAccommodations) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            sampleTravelPlan.addTpo(sampleAccommodation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return sampleTravelPlan;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static TravelPlan[] getSampleTravelPlans() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new TravelPlan[] {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            getSampleTravelPlan(sampleTravelPlan1, getSampleActivities1(), getSampleAccommodations1(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    getSampleFriends1()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            getSampleTravelPlan(sampleTravelPlan2, getSampleActivities2(), getSampleAccommodations2(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    getSampleFriends2())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static ReadOnlyTravelPlanner getSampleTravelPlanner() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanner tp \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (TravelPlan sampleTravelPlan: getSampleTravelPlans()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            tp.addTravelPlan(sampleTravelPlan);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity sampleActivity : getSampleActivities1()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            tp.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity sampleActivity : getSampleActivities2()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            tp.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 1,
      "jeannetoh99": 111,
      "lyeyixian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wishlist/Wishlist.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.wishlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Wishlist in Wanderlust."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * There should only be one Wishlist in entire Wanderlust."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class Wishlist extends Directory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Wishlist() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an Wishlist using the Activities in the {@code toBeCopied}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Wishlist(Wishlist toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code Wishlist} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(Wishlist newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setActivities(newData.getObservableActivityList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// activity-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the wishlist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean contains(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assert travelPlanObject instanceof Activity;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return activities.contains((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds an activity in the form of Activity to the wishlist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity must not already exist in the wishlist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addActivity(Activity p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addTpo(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assert travelPlanObject instanceof Activity;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.add((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the wishlist."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * wishlist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTpo(TravelPlanObject target, TravelPlanObject editedTravelPlanObject) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(editedTravelPlanObject);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assert target instanceof Activity \u0026\u0026 editedTravelPlanObject instanceof Activity;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.setActivity((Activity) target, (Activity) editedTravelPlanObject);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Name(\"Wishlist\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from this {@code Wishlist}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the wishlist."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Generates the total cost of the wishlist, which includes the cost of activities and accommodations."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Total cost of the wishlist as a string."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getTotalCost() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int totalCost \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        for (Activity activity : activities) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            totalCost +\u003d Integer.parseInt(activity.getCostAsString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Integer.toString(totalCost);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public WanderlustDate getStartDate() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public WanderlustDate getEndDate() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void remove(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.remove((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sorts the list of activities according to the comparator."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param comparator Comparator to sort the list of activities with."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sort(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.sort(comparator);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean isTravelPlan() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\" Wishlist: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        getObservableActivityList().forEach(builder::append);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the activity list in the wishlist as an {@code ObservableList}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getObservableActivityList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getDateTitle() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof Wishlist // instanceof handles nulls"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activities.equals(((Wishlist) other).activities));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 4,
      "jeannetoh99": 134,
      "lyeyixian": 40,
      "jiaweiteo": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAccommodation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link Accommodation}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedAccommodation {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Accommodation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccommodation} with the given accommodation details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedAccommodation(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"location\") String location) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code Accommodation} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedAccommodation(Accommodation source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d source.getName().getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d source.getStartDate().getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d source.getEndDate().getDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d source.getCost().getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d source.getLocation().getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted accommodation object into the model\u0027s {@code Accommodation} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted accommodation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Accommodation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(startDate)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelStartDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(endDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelEndDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new Accommodation(modelName, modelStartDate, modelEndDate, modelCost, modelLocation);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedActivity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String importance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivity} with the given activity details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"levelOfImportance\") String levelOfImportance,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.importance \u003d levelOfImportance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d source.getName().getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d source.getLocation().getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d source.getCost().getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        importance \u003d source.getLevelOfImportance().getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        dateTime \u003d source.getActivityDateTime().getDateTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (importance \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Importance.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Importance.isValidImportance(importance)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Importance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Importance modelImportance \u003d new Importance(importance);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDateTime.isValidWanderlustDateTime(dateTime)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDateTime modelDateTime \u003d new WanderlustDateTime(dateTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new Activity(modelName, modelLocation, modelCost, modelImportance, modelDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFriend.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link Friend}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedFriend {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Friend\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String passport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedFriend} with the given friend details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedFriend(@JsonProperty(\"name\") String name, @JsonProperty(\"passport\") String passport,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                             @JsonProperty(\"phone\") String phone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.passport \u003d passport;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code Friend} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedFriend(Friend source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d source.getName().getValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        passport \u003d source.getPassport().getValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        phone \u003d source.getMobile().getValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted friend object into the model\u0027s {@code Friend} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted friend."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Friend toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (passport \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Passport.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Passport.isValidPassport(passport)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Passport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Passport modelPassport \u003d new Passport(passport);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Mobile.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!Mobile.isValidMobile(phone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new IllegalValueException(Mobile.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final Mobile modelMobile \u003d new Mobile(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new Friend(modelName, modelPassport, modelMobile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 7,
      "jeannetoh99": 3,
      "lyeyixian": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTravelPlan.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link TravelPlan}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedTravelPlan {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TravelPlan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedAccommodation\u003e accommodations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedFriend\u003e friends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedTravelPlan} with the given TravelPlan details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedTravelPlan(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"accommodations\") List\u003cJsonAdaptedAccommodation\u003e accommodations,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"friends\") List\u003cJsonAdaptedFriend\u003e friends) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (activities !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.activities.addAll(activities);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (accommodations !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.accommodations.addAll(accommodations);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (friends !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.friends.addAll(friends);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code TravelPlan} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedTravelPlan(TravelPlan source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d source.getName().getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d source.getStartDate().getDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d source.getEndDate().getDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.addAll(source.getObservableActivityList().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        accommodations.addAll(source.getObservableAccommodationList().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .map(JsonAdaptedAccommodation::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        friends.addAll(source.getObservableFriendList().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .map(JsonAdaptedFriend::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted travel plan object into the model\u0027s {@code TravelPlan} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted travel plan."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final List\u003cActivity\u003e travelPlanActivities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedActivity activity : activities) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanActivities.add(activity.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final List\u003cAccommodation\u003e travelPlanAccommodations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedAccommodation accommodation : accommodations) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanAccommodations.add(accommodation.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final List\u003cFriend\u003e travelPlanFriends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedFriend friend : friends) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanFriends.add(friend.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(startDate)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelStartDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(endDate)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelEndDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final ActivityList modelActivities \u003d new ActivityList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelActivities.setActivities(travelPlanActivities);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final AccommodationList modelAccommodations \u003d new AccommodationList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelAccommodations.setAccommodations(travelPlanAccommodations);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final FriendList modelFriends \u003d new FriendList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelFriends.setFriends(travelPlanFriends);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new TravelPlan(modelName, modelStartDate, modelEndDate, modelActivities, modelAccommodations,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                modelFriends);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "lyeyixian": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTravelPlanner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * An Immutable TravelPlanner that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@JsonRootName(value \u003d \"travelplanner\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonSerializableTravelPlanner {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRAVEL_PLAN \u003d \"Travel plans list contains duplicate travel plan(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"Wishlist contains duplicate activity.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedTravelPlan\u003e travelPlans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e wishlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonSerializableTravelPlanner} with the given travel plans and wishlist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonSerializableTravelPlanner(@JsonProperty(\"travelPlans\") List\u003cJsonAdaptedTravelPlan\u003e travelPlans,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                         @JsonProperty(\"wishlist\") List\u003cJsonAdaptedActivity\u003e wishlist) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlans.addAll(travelPlans);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.wishlist.addAll(wishlist);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code ReadOnlyTravelPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTravelPlanner}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonSerializableTravelPlanner(ReadOnlyTravelPlanner source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.addAll(source.getObservableTravelPlanList().stream().map(JsonAdaptedTravelPlan::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        wishlist.addAll(source.getObservableWishlist().stream().map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this travel planner into the model\u0027s {@code TravelPlanner} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedTravelPlan jsonAdaptedTravelPlan : travelPlans) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            TravelPlan travelPlan \u003d jsonAdaptedTravelPlan.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            if (travelPlanner.hasTravelPlan(travelPlan)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRAVEL_PLAN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanner.addTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedActivity jsonAdaptedActivity : wishlist) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            Activity activity \u003d jsonAdaptedActivity.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            if (travelPlanner.hasActivity(activity)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanner.addActivity(activity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "lyeyixian": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTravelPlannerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A class to access TravelPlanner data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonTravelPlannerStorage implements TravelPlannerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTravelPlannerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonTravelPlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return readTravelPlanner(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Similar to {@link #readTravelPlanner()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assert filePath !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Optional\u003cJsonSerializableTravelPlanner\u003e jsonTravelPlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                filePath, JsonSerializableTravelPlanner.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!jsonTravelPlanner.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return Optional.of(jsonTravelPlanner.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (DuplicateException dupEx) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.info(\"Duplicate objects found in \" + filePath + \": \\n\" + dupEx.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new DataConversionException(dupEx);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        saveTravelPlanner(travelPlanner, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Similar to {@link #saveTravelPlanner(ReadOnlyTravelPlanner)}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlanner);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTravelPlanner(travelPlanner), filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "lyeyixian": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface Storage extends TravelPlannerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Manages storage of TravelPlanner data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private TravelPlannerStorage travelPlannerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TravelPlannerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public StorageManager(TravelPlannerStorage travelPlannerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlannerStorage \u003d travelPlannerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wanderlust methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlannerStorage.getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return readTravelPlanner(travelPlannerStorage.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(Path filePath)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlannerStorage.readTravelPlanner(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        saveTravelPlanner(travelPlanner, travelPlannerStorage.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlannerStorage.saveTravelPlanner(travelPlanner, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 18,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TravelPlannerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a storage for {@link TravelPlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface TravelPlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns TravelPlanner data as a {@link ReadOnlyTravelPlanner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @see #getTravelPlannerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Saves the given {@link ReadOnlyTravelPlanner} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param travelPlanner cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @see #saveTravelPlanner(ReadOnlyTravelPlanner)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-t14-3.github.io/tp/UserGuide.html#quick-start\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 1,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ObservableDirectory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TravelPlannerPanel travelPlannerPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TravelPlanPanel travelPlanPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TravelPlanObjectListPanel travelPlanObjectListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private StackPane travelPlannerPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private StackPane travelPlanPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private StackPane travelObjectListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        loadFonts();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void loadFonts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Font.loadFont(MainWindow.class.getResource(\"/fonts/Notera_PersonalUseOnly.ttf\").toExternalForm(), 80);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlannerPanel \u003d new TravelPlannerPanel(logic.getFilteredTravelPlanList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlannerPanelPlaceholder.getChildren().add(travelPlannerPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanPanel \u003d new TravelPlanPanel(logic.getObservableDirectory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanPanelPlaceholder.getChildren().add(travelPlanPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ObservableDirectory dir \u003d logic.getObservableDirectory();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        dir.get().addListener((v, oldValue, newValue) -\u003e handleDirectoryChange(newValue));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanObjectListPanel \u003d new TravelPlanObjectListPanel(logic.getFilteredActivityList(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                logic.getFilteredAccommodationList(), logic.getFilteredFriendList(), travelPlanPanel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelObjectListPanelPlaceholder.getChildren().add(travelPlanObjectListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanObjectListPanel.setActivityTabVisibleOnly();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private void handleDirectoryChange(Directory directory) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanPanel.update(directory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (directory instanceof Wishlist) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            travelPlanObjectListPanel.setActivityTabVisibleOnly();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            travelPlanObjectListPanel.setAllTabsVisible();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (commandResult.getTravelPlanObjectType() !\u003d -1) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                travelPlanObjectListPanel.changeTabView(commandResult.getTravelPlanObjectType());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 26,
      "lyeyixian": 10,
      "jiaweiteo": 12,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A UI component for the status bar that is displayed above the CommandBox."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code ResultDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the {@code ResultDisplay} to display the feedback to user {@code feedbackToUser}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 7,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TravelPlanObjectListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.ui.cards.AccommodationCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.ui.cards.ActivityCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.ui.cards.FriendCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Panel containing the list of travel plan objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class TravelPlanObjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static final String FXML \u003d \"TravelPlanObjectListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TravelPlanObjectListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final TravelPlanPanel travelPlanPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private ListView\u003cAccommodation\u003e accommodationListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private ListView\u003cFriend\u003e friendListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private TabPane pane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Tab activityTab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Tab accommodationTab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Tab friendTab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code TravelPlanObjectListPanel} with the given {@code ObservableList}s."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public TravelPlanObjectListPanel(ObservableList\u003cActivity\u003e activities, ObservableList\u003cAccommodation\u003e accommodations,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            ObservableList\u003cFriend\u003e friends, TravelPlanPanel travelPlanPanel) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        activityListView.setItems(activities);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        accommodationListView.setItems(accommodations);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        accommodationListView.setCellFactory(listView -\u003e new AccommodationListViewCell());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        friendListView.setItems(friends);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        friendListView.setCellFactory(listView -\u003e new FriendListViewCell());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        pane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activityTab \u003d pane.getTabs().get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodationTab \u003d pane.getTabs().get(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friendTab \u003d pane.getTabs().get(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.travelPlanPanel \u003d travelPlanPanel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Navigates the travel plan object panel depending on the index given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param index id tagged to each travel plan object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void changeTabView(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        pane.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the travel plan object panel to only show the activities tab."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivityTabVisibleOnly() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        pane.getTabs().removeAll(accommodationTab, friendTab);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the travel plan object panel to show all activities, accommodations and friends tab."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setAllTabsVisible() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (pane.getTabs().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            pane.getTabs().add(accommodationTab);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            pane.getTabs().add(friendTab);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Activity} using the {@code ActivityCard}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setGraphic(new ActivityCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Accommodation} using the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code AccommodationCard}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    class AccommodationListViewCell extends ListCell\u003cAccommodation\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        protected void updateItem(Accommodation accommodation, boolean empty) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            super.updateItem(accommodation, empty);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (empty || accommodation \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setGraphic(new AccommodationCard(accommodation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Friend} using the {@code FriendCard}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    class FriendListViewCell extends ListCell\u003cFriend\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        protected void updateItem(Friend friend, boolean empty) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            super.updateItem(friend, empty);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (empty || friend \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                setGraphic(new FriendCard(friend, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 29,
      "jiaweiteo": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TravelPlanPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ObservableDirectory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Panel containing basic information of a Travel Plan."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class TravelPlanPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static final String TravelPlanFXML \u003d \"TravelPlanPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TravelPlanPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private ObservableDirectory dir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label startDateToEndDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Label totalCost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code TravelPlanPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanPanel(ObservableDirectory dir) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(TravelPlanFXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.dir \u003d dir;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        totalCost.textProperty().bind(dir.getObservableCost());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        update(dir.get().getValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the JavaFX properties of {@code TravelPlanPanel} according to the directory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void update(Directory directory) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        name.setText(directory.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (directory.isTravelPlan()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            startDateToEndDate.setPadding(new Insets(0, 0, 0, 20));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            startDateToEndDate.setText(directory.getDateTitle());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            startDateToEndDate.setPadding(new Insets(0, 0, 0, 0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            startDateToEndDate.setText(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 15,
      "jiaweiteo": 34,
      "lyeyixian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TravelPlannerPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.cards.NameCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Panel containing the wishlist and list of travel plans in the travel planner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlannerPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"TravelPlannerPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TravelPlanPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ListView\u003cTravelPlan\u003e travelPlanListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code TraverPlannerPannel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlannerPanel(ObservableList\u003cTravelPlan\u003e travelPlanList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanListView.setItems(travelPlanList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanListView.setCellFactory(travelPlan -\u003e new TravelPlanListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the {@code Wishlist} or name of a {@code TravelPlan} using a"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code NameCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    class TravelPlanListViewCell extends ListCell\u003cTravelPlan\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        protected void updateItem(TravelPlan travelPlan, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            super.updateItem(travelPlan, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (empty || travelPlan \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(new NameCard(travelPlan.getName().toString(), getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/wanderlust.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/BlueTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/AccommodationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A UI component that displays information of an {@code Accommodation}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class AccommodationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"cards/AccommodationListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public final Accommodation accommodation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label startToEndDates;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an {@code AccommodationCard} with the given {@code Accommodation} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationCard(Accommodation accommodation, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodation \u003d accommodation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(accommodation.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        startToEndDates.setText(accommodation.dateString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost.setText(\"Cost: $\" + accommodation.getCost().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        address.setText(\"Location: \" + accommodation.getLocation().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!(other instanceof AccommodationCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationCard card \u003d (AccommodationCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 accommodation.equals(card.accommodation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 1,
      "jeannetoh99": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ActivityCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A UI component that displays information of an {@code Activity}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"cards/ActivityListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label levelOfImportance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label activityDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an {@code ActivityCard} with the given {@code Activity} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(activity.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        address.setText(\"Location: \" + activity.getLocation().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost.setText(\"Cost: $\" + activity.getCost().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        levelOfImportance.setText(\"Importance: \" + activity.getLevelOfImportance().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityDateTime.setText(\"Date \u0026 Time: \" + activity.getActivityDateTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!(other instanceof FriendCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityCard card \u003d (ActivityCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activity.equals(card.activity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/FriendCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A UI component that displays information of a {@code Friend}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class FriendCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"cards/FriendListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public final Friend friend;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label passport;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label mobile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code FriendCard} with the given {@code Friend} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public FriendCard(Friend friend, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friend \u003d friend;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(friend.getName().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        passport.setText(\"Passport: \" + friend.getPassport().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        mobile.setText(\"Mobile: \" + friend.getMobile().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!(other instanceof FriendCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendCard card \u003d (FriendCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 friend.equals(card.friend);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/NameCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A UI component that displays a name with an index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class NameCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"cards/NameCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code NameCard} with the given {@code value} and index to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public NameCard(String value, int displayedIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27
    }
  },
  {
    "path": "src/main/resources/view/BlueTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@import url(\u0027https://fonts.googleapis.com/css2?family\u003dLora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display\u003dswap\u0027);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@import url(\u0027https://fonts.googleapis.com/css2?family\u003dSpace+Mono\u0026display\u003dswap\u0027);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@import url(\u0027https://fonts.googleapis.com/css2?family\u003dNoto+Sans+TC:wght@100;300;400;500;700;900\u0026display\u003dswap\u0027);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -off-white: #e7e8f1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -dark-blue: #2b3741;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -smoke-blue: #7893b8;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -light-grey: #dbdcde;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -light-grey-2: #ecedef;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -dark-aqua: #5e87a1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -smoke-grey: #90a7ac;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 20%);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    background-color: -off-white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -smoke-blue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-pref-height: 60px;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-smoke-blue, 50%);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-pref-height: 60px;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \"Times New Roman\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-base: -off-white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-control-inner-background: -off-white;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -off-white;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 20%);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 20%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 20%);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 0 0 0 5px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#travelPlannerPanelPlaceholder .list-cell {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#travelPlannerPanelPlaceholder .list-cell .label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-max-width: 200px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-alignment: LEFT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#travelObjectListPanelPlaceholder .list-cell:filled:even {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -light-grey;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#travelObjectListPanelPlaceholder .list-cell:filled:odd {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -light-grey-2;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#travelObjectListPanelPlaceholder .list-cell:filled:selected {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 0px 0px 0px 5px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-color: -dark-aqua;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".list-cell .label{"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 24px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-label-padding: 5px 0px 20px 0px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 5px 0px 20px 0px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-weight: 700;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".cell_name_label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-weight: 700;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".header_label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Noto Sans TC\u0027, sans-serif;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: -dark-blue;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 0 0 20 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 20%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".pane-without-border {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 20%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 30%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Space Mono\u0027, mono;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Space Mono\u0027, mono;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 30%);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 30%);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 30%);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Space Mono\u0027, mono;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-color: -off-white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Space Mono\u0027, mono;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: -off-white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -smoke-blue;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: -white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-color: -off-white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -off-white;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -smoke-blue;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-smoke-blue, 30%);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 25%);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-fill: #222121;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-smoke-blue, 20%);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: derive(-off-white, 50%);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #f70d1a;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Space Mono\u0027, mono;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#filterField, #travelObjectListPanel, #personWebpage {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -dark-blue;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #222121;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-color: -off-white;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".block_label {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-label-padding: 5px 0px 5px 0px;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".middle_label {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".centralise {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-content-display: center;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#Wanderlust {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \"Notera Personal Use Only\";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 55px;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-label-padding: 5px 0px 20px 0px;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".help_label {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \u0027Space Mono\u0027, mono;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 438
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label{"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#travelPlanPanel .label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 24px;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-label-padding: 5px 0px 20px 0px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#filterField, #travelObjectListPanel, #personWebpage {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".block_label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-label-padding: 5px 0px 5px 0px;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".middle_label {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ".centralise {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-content-display: center;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 21,
      "-": 353
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    -fx-background: transparent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cURL value\u003d\"@BlueTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"help_label\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         title\u003d\"Wanderlust\" minWidth\u003d\"1000\" minHeight\u003d\"680\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \u003cImage url\u003d\"@/images/wanderlust.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cURL value\u003d\"@BlueTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cHBox styleClass\u003d\"pane-without-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cVBox fx:id\u003d\"travelPlanner\" styleClass\u003d\"pane-without-border\" minWidth\u003d\"290\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"travelPlannerPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cVBox fx:id\u003d\"travelObjectList\" minWidth\u003d\"690\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003cInsets left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"travelPlanPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"travelObjectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"150\" prefHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 20,
      "jiaweiteo": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefWidth\u003d\"-1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/TravelPlanObjectListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cTabPane VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"pane\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    side\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003cTab closable\u003d\"false\" fx:id\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cgraphic\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003cImageView fitWidth\u003d\"40\" fitHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                      \u003cImage url\u003d\"images/hot-air-balloon.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/graphic\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "              \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003cTab closable\u003d\"false\" fx:id\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cgraphic\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003cImageView fitWidth\u003d\"40\" fitHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                      \u003cImage url\u003d\"images/home.png\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/graphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "              \u003cListView fx:id\u003d\"accommodationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003cTab closable\u003d\"false\" fx:id\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cgraphic\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003cImageView fitWidth\u003d\"40\" fitHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                      \u003cImage url\u003d\"images/friends.png\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/graphic\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "              \u003cListView fx:id\u003d\"friendListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003c/TabPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27,
      "jiaweiteo": 21,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/resources/view/TravelPlanPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cStackPane fx:id\u003d\"travelPlanPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"15\" bottom\u003d\"0\" left\u003d\"10\" right\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"startEndDate\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cImageView fitWidth\u003d\"40\" fitHeight\u003d\"40\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cimage\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cImage url\u003d\"images/airplane.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/image\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" style\u003d\"-fx-padding: 0 0 0 20;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                -fx-word-wrap: break-word; -fx-max-width: 600;\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cFlowPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets left\u003d\"40\" bottom\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateToEndDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateToEndDate\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalCost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalCost\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                   style\u003d\"-fx-padding: 0 0 0 20;\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 32
    }
  },
  {
    "path": "src/main/resources/view/TravelPlannerPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cVBox fx:id\u003d\"travelPlanPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cPane style\u003d\"-fx-padding: 0 0 100 0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"Wanderlust\" styleClass\u003d\"cell_big_label\" text\u003d\"Wanderlust\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cLabel text\u003d\"Wishlist\" styleClass\u003d\"header_label\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cLabel text\u003d\"Travel Plans\" styleClass\u003d\"header_label\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cListView fx:id\u003d\"travelPlanListView\" styleClass\u003d\"list-view\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 19
    }
  },
  {
    "path": "src/main/resources/view/WishlistPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cVBox fx:id\u003d\"travelPlanPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"Wishlist\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 12
    }
  },
  {
    "path": "src/main/resources/view/cards/AccommodationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_name_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_name_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"startToEndDates\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startToEndDates\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 34
    }
  },
  {
    "path": "src/main/resources/view/cards/ActivityListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_name_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_name_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"levelOfImportance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$levelOfImportance\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"activityDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$activityDateTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 35
    }
  },
  {
    "path": "src/main/resources/view/cards/FriendListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_name_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_name_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"passport\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$passport\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \u003cLabel fx:id\u003d\"mobile\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$mobile\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "timjkong": 1,
      "jeannetoh99": 32
    }
  },
  {
    "path": "src/main/resources/view/cards/NameCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cPane fx:id\u003d\"nameCard\" styleClass\u003d\"centralise\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cHBox spacing\u003d\"5\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_medium_label\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_medium_label\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 22
    }
  },
  {
    "path": "src/test/data/JsonSerializableTravelPlannerTest/duplicateTravelPlanTravelPlanner.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"travelPlans\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Trip to Hawaii\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"startDate\" : \"2020-11-01\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2020-12-31\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"activities\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Bungee Jumping\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"Sentosa\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"200\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"dateTime\" : \"2020-12-12 11:00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"2\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Trip to Hawaii\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"startDate\" : \"2020-11-01\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2020-12-31\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"activities\" : [ {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Eat Bingsu\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"Snowflake Street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"5\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"dateTime\" : \"2020-12-23 17:00\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"wishlist\" : [ {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Archery\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"92 Archery Avenue\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"100.50\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-09-09 09:00\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Bungee Jumping\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"1 BungeeJump Gateway\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"225.99\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-01-01 14:00\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"5\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Camping\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"100 Secret Woods\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"10\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-10-11 20:00\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"2\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Donut Date\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"Dunkin Donut Palace\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"2\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-11-11 11:00\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 50
    }
  },
  {
    "path": "src/test/data/JsonSerializableTravelPlannerTest/invalidTravelPlanTravelPlanner.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"travelPlans\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Trip to Hawaii\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"startDate\" : \"20201101\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2020-12-31\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"wishlist\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Archery\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"92 Archery Avenue\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"100.50\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-09-09 09:00\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Bungee Jumping\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"1 BungeeJump Gateway\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"225.99\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-01-01 14:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"5\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Camping\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"100 Secret Woods\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"10\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-10-11 20:00\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Donut Date\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"Dunkin Donut Palace\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"2\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"dateTime\" : \"2020-11-11 11:00\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 32
    }
  },
  {
    "path": "src/test/data/JsonSerializableTravelPlannerTest/typicalTravelPlansTravelPlanner.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"_comment\": \"TravelPlanner save file which contains the same TravelPlan values as in TypicalTravelPlans#getTypicalTravelPlanner()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"travelPlans\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Trip to Australia\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"startDate\" : \"2021-01-01\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"endDate\" : \"2021-12-12\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"activities\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Archery\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"92 Archery Avenue\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"100\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-05-05 09:00\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Bungee Jumping\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"1 BungeeJump Gateway\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"225\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-06-06 14:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"5\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Camping\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"100 Secret Woods\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"10\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-05-31 20:00\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Donut Date\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"Dunkin Donut Palace\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"2\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-06-02 11:00\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"accommodations\" : [ {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Alice Hotel\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-01-01\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-02-02\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"100\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"109 Alice Avenue\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Hostel by Bob\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-06-06\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-06-07\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"200\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"9 Balestier Road\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Carl\u0027s Farmhouse\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-05-05\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-07-07\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"300\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"999 Calihan Street\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Danny\u0027s Lodge\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-06-06\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-08-08\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"400\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"1 Den Street\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"friends\" : [ {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E1234567A\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"94351253\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E1234567B\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"98765432\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E1234567C\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"95352563\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E1234567D\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"87652533\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Trip to Boston\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"startDate\" : \"2021-01-03\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2021-11-11\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"activities\" : [ {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Singapore Mandai Zoo\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"124 Mandai Road\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"100\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-06-03 12:00\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"3\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Universal Studios Singapore\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"8 Sentosa Gateway\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"80\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-10-11 12:00\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"5\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Gore Mountain Ski Resort\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"124 Ski Avenue\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"200\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-12-10 12:00\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"5\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Treetop Walk\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"601 Island Club Rd\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"0\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"dateTime\" : \"2021-06-10 12:00\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"importance\" : \"2\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"accommodations\" : [ {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Elle\u0027s\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-05-05\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-06-06\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"500\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"333 Elmo\u0027s World\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Fiona Hotel\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-06-06\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-07-07\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"600\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"Fall Home\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"George and Georgina\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"startDate\" : \"2021-07-07\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "      \"endDate\" : \"2021-08-08\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"cost\" : \"700\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"location\" : \"7 GeorgeTown\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"friends\" : [ {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E1234567E\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"94822241\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E7654321F\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"94822427\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E7654321G\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"94824142\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Hoon Meier\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E7654321H\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"84824224\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"name\" : \"Ida Mueller\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"passport\" : \"E7654321I\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      \"phone\" : \"84821631\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"wishlist\" : [ {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Archery\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"92 Archery Avenue\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"100\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"dateTime\" : \"2021-05-05 09:00\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"1\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Bungee Jumping\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"1 BungeeJump Gateway\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"225\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"dateTime\" : \"2021-06-06 14:00\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"5\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Camping\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"100 Secret Woods\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"10\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"dateTime\" : \"2021-05-31 20:00\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"2\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Donut Date\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"location\" : \"Dunkin Donut Palace\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"cost\" : \"2\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    \"dateTime\" : \"2021-06-02 11:00\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"importance\" : \"1\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 140,
      "jiaweiteo": 29
    }
  },
  {
    "path": "src/test/data/JsonTravelPlannerStorageTest/invalidAndValidTravelPlanTravelPlanner.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"travelPlans\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Trip to Hawaii\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"startDate\" : \"2020-11-01\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2020-12-31\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"name\" : \"Travel plan with invalid startDate field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"startDate\" : \"20201101\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2020-12-31\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 11
    }
  },
  {
    "path": "src/test/data/JsonTravelPlannerStorageTest/invalidTravelPlanTravelPlanner.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"startDate\" : \"2020-11-01\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    \"endDate\" : \"2020-12-31\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"travelPlannerFilePath\" : \"travelplanner.json\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "  \"travelPlannerFilePath\" : \"travelplanner.json\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.COMMAND_PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.END_DATE_DESC_EUROPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.NAME_DESC_EUROPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.START_DATE_DESC_EUROPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.EUROPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddTravelPlanCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.storage.JsonTravelPlannerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        JsonTravelPlannerStorage travelPlannerStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new JsonTravelPlannerStorage(temporaryFolder.resolve(\"travelPlanner.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StorageManager storage \u003d new StorageManager(travelPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String deleteActivityCommand \u003d \"delete -activity 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandException(deleteActivityCommand, MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String deleteAccommodationCommand \u003d \"delete -accommodation 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandException(deleteAccommodationCommand, MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String deleteFriendCommand \u003d \"delete -friend 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandException(deleteFriendCommand, MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Setup LogicManager with JsonTravelPlannerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        JsonTravelPlannerStorage travelPlannerStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new JsonTravelPlannerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTravelPlanner.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StorageManager storage \u003d new StorageManager(travelPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String addTravelPlanCommand \u003d AddCommand.COMMAND_WORD + COMMAND_PREFIX_DESC + AddTravelPlanCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + NAME_DESC_EUROPE + START_DATE_DESC_EUROPE + END_DATE_DESC_EUROPE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan expectedTravelPlan \u003d new TravelPlanBuilder(EUROPE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.addTravelPlan(expectedTravelPlan);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandFailure(addTravelPlanCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getFilteredList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredActivityList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAccommodationList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFriendList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTravelPlanList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredWishlist().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getDirectory_onInitialisation_equalsWishlist() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(model.getDirectory(), model.getWishlist());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static class JsonTravelPlannerIoExceptionThrowingStub extends JsonTravelPlannerStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private JsonTravelPlannerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 37,
      "jiaweiteo": 4,
      "lyeyixian": 11,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void execute_emptyTravelPlanner_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void execute_nonEmptyTravelPlanner_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanner(new TravelPlanner());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOBILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditAccommodationDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditFriendDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditTravelPlanDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //Travel Plan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_EUROPE \u003d \"Europe Trip\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_NYC \u003d \"New York City\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALID_START_DATE_EUROPE \u003d \"2021-12-31\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_START_DATE_NYC \u003d \"2021-01-01\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALID_END_DATE_EUROPE \u003d \"2021-12-31\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALID_END_DATE_NYC \u003d \"2021-12-02\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //Activity"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_ZOO \u003d \"Singapore Mandai Zoo\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_LOCATION_ZOO \u003d \"124 Mandai Road\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_COST_ZOO \u003d \"100\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_LEVELOFIMPORTANCE_ZOO \u003d \"3\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALID_ACTIVITYDATETIME_ZOO \u003d \"2021-06-03 12:00\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_SKI \u003d \"Gore Mountain Ski Resort\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_LOCATION_SKI \u003d \"124 Ski Avenue\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_COST_SKI \u003d \"200\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_LEVELOFIMPORTANCE_SKI \u003d \"5\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALID_ACTIVITYDATETIME_SKI \u003d \"2021-12-10 12:00\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //Accommodation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_HOME \u003d \"Singapore\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_LOCATION_HOME \u003d \"123 Singapore Road\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_COST_HOME \u003d \"0\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_START_DATE_HOME \u003d \"2021-01-05\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALID_END_DATE_HOME \u003d \"2021-05-31\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_INN \u003d \"Lloyd\u0027s Inn\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_LOCATION_INN \u003d \"2 Lloyd Rd\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_COST_INN \u003d \"250\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_START_DATE_INN \u003d \"2021-01-10\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_END_DATE_INN \u003d \"2021-01-16\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //Friend"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Choo\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_MOBILE_AMY \u003d \"81234567\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String VALID_PASSPORT_AMY \u003d \"E1234567T\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Tan\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String VALID_MOBILE_BOB \u003d \"91238765\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String VALID_PASSPORT_BOB \u003d \"E1443482G\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //With Prefix Travel Plan"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_EUROPE \u003d \" \" + PREFIX_NAME + VALID_NAME_EUROPE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_NYC \u003d \" \" + PREFIX_NAME + VALID_NAME_NYC;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String START_DATE_DESC_EUROPE \u003d \" \" + PREFIX_START + VALID_START_DATE_EUROPE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String START_DATE_DESC_NYC \u003d \" \" + PREFIX_START + VALID_START_DATE_NYC;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String END_DATE_DESC_EUROPE \u003d \" \" + PREFIX_END + VALID_END_DATE_EUROPE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String END_DATE_DESC_NYC \u003d \" \" + PREFIX_END + VALID_END_DATE_NYC;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //With Prefix Activity"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_ZOO \u003d \" \" + PREFIX_NAME + VALID_NAME_ZOO;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_SKI \u003d \" \" + PREFIX_NAME + VALID_NAME_SKI;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COST_DESC_ZOO \u003d \" \" + PREFIX_COST + VALID_COST_ZOO;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COST_DESC_SKI \u003d \" \" + PREFIX_COST + VALID_COST_SKI;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String LOCATION_DESC_ZOO \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_ZOO;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String LOCATION_DESC_SKI \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_SKI;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String IMPORTANCE_DESC_ZOO \u003d \" \" + PREFIX_IMPORTANCE + VALID_LEVELOFIMPORTANCE_ZOO;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String IMPORTANCE_DESC_SKI \u003d \" \" + PREFIX_IMPORTANCE + VALID_LEVELOFIMPORTANCE_SKI;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String DATETIME_DESC_ZOO \u003d \" \" + PREFIX_DATETIME + VALID_ACTIVITYDATETIME_ZOO;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String DATETIME_DESC_SKI \u003d \" \" + PREFIX_DATETIME + VALID_ACTIVITYDATETIME_SKI;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //With Prefix Accommodation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_HOME \u003d \" \" + PREFIX_NAME + VALID_NAME_HOME;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_INN \u003d \" \" + PREFIX_NAME + VALID_NAME_INN;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COST_DESC_HOME \u003d \" \" + PREFIX_COST + VALID_COST_HOME;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String COST_DESC_INN \u003d \" \" + PREFIX_COST + VALID_COST_INN;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String LOCATION_DESC_HOME \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_HOME;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String LOCATION_DESC_INN \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_INN;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String START_DATE_DESC_HOME \u003d \" \" + PREFIX_START + VALID_START_DATE_HOME;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String START_DATE_DESC_INN \u003d \" \" + PREFIX_START + VALID_START_DATE_INN;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String END_DATE_DESC_HOME \u003d \" \" + PREFIX_END + VALID_END_DATE_HOME;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String END_DATE_DESC_INN \u003d \" \" + PREFIX_END + VALID_END_DATE_INN;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //With Prefix Friend"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MOBILE_DESC_AMY \u003d \" \" + PREFIX_MOBILE + VALID_MOBILE_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String MOBILE_DESC_BOB \u003d \" \" + PREFIX_MOBILE + VALID_MOBILE_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String PASSPORT_DESC_AMY \u003d \" \" + PREFIX_PASSPORT + VALID_PASSPORT_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String PASSPORT_DESC_BOB \u003d \" \" + PREFIX_PASSPORT + VALID_PASSPORT_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //Invalid string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START + \"911a\"; // letters not allowed in date"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_END_DATE_DESC \u003d \" \" + PREFIX_END + \"2020-!10-10\"; // no special character"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in location"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_COST_DESC \u003d \" \" + PREFIX_COST + \"911a\"; // letters not allowed in date"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_IMPORTANCE_DESC \u003d \" \" + PREFIX_IMPORTANCE + \"10\"; // exceeds range"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_ACTIVITYDATETIME_DESC \u003d \" \" + PREFIX_DATETIME + \"2020-12-12 2400\"; // Must have :"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_MOBILE_DESC \u003d \" \" + PREFIX_MOBILE + \"8123456!\"; // No special character"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String INVALID_PASSPORT_DESC \u003d \" \" + PREFIX_PASSPORT + \"a12345678\"; // exceeds length"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String COMMAND_PREFIX_DESC \u003d \" -\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_EUROPE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_NYC;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_EUROPE \u003d new EditTravelPlanDescriptorBuilder().withName(VALID_NAME_EUROPE)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withStartDate(VALID_START_DATE_EUROPE).withEndDate(VALID_END_DATE_EUROPE).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_NYC \u003d new EditTravelPlanDescriptorBuilder().withName(VALID_NAME_NYC)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withStartDate(VALID_START_DATE_NYC).withEndDate(VALID_END_DATE_NYC).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_AMY \u003d new EditFriendDescriptorBuilder().withName(VALID_NAME_AMY).withMobile(VALID_MOBILE_AMY)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withPassport(VALID_PASSPORT_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_BOB \u003d new EditFriendDescriptorBuilder().withName(VALID_MOBILE_BOB).withMobile(VALID_MOBILE_BOB)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_HOME;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_INN;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_HOME \u003d new EditAccommodationDescriptorBuilder().withName(VALID_NAME_HOME).withCost(VALID_COST_HOME)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withLocation(VALID_LOCATION_HOME).withStartDate(VALID_START_DATE_HOME)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withEndDate(VALID_END_DATE_HOME).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_INN \u003d new EditAccommodationDescriptorBuilder().withName(VALID_NAME_INN).withCost(VALID_COST_INN)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withLocation(VALID_LOCATION_INN).withStartDate(VALID_START_DATE_INN)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withEndDate(VALID_END_DATE_INN).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_ZOO;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final EditDescriptor DESC_SKI;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_ZOO \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_ZOO).withCost(VALID_COST_ZOO)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withLocation(VALID_LOCATION_ZOO).withImportance(VALID_LEVELOFIMPORTANCE_ZOO)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withDateTime(VALID_ACTIVITYDATETIME_SKI).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        DESC_SKI \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_SKI).withCost(VALID_COST_SKI)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withLocation(VALID_LOCATION_SKI).withImportance(VALID_LEVELOFIMPORTANCE_SKI)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withDateTime(VALID_ACTIVITYDATETIME_SKI).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * that takes a string {@code expectedMessage} and integer {@code tpoType}. Used when command results in"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * change in tabs (between activity, accommodation and friend tabs)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                                            Model expectedModel, int tpoType) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, tpoType);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlanner expectedTravelPlanner \u003d new TravelPlanner(actualModel.getTravelPlanner());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cTravelPlan\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTravelPlanList());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedTravelPlanner, actualModel.getTravelPlanner());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTravelPlanList());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates {@code model}\u0027s filtered travelplan list to show only the travel plan at the given {@code targetIndex} in"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * the {@code model}\u0027s travel planner."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static void showTravelPlanAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTravelPlanList().size());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        TravelPlan tp \u003d model.getFilteredTravelPlanList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final String[] splitName \u003d tp.getName().getValue().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredTravelPlanList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[2])));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(1, model.getFilteredTravelPlanList().size());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates {@code model}\u0027s filtered travel plan object list to show only the travel plan objects at the given"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s respective filtered list."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static void showTpoAtIndex(Model model, Index targetIndex, String tpoType) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ObservableList\u003c? extends TravelPlanObject\u003e filteredList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        switch (tpoType) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"Activity\":"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            filteredList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"Accommodation\":"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            filteredList \u003d model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"Friend\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            filteredList \u003d model.getFilteredFriendList();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalStateException(\"Unexpected tpoType value: \" + tpoType);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c filteredList.size());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject travelPlanObject \u003d filteredList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final String[] splitName \u003d travelPlanObject.getName().getValue().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        switch (tpoType) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"Activity\":"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            model.updateFilteredActivityList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"Accommodation\":"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            model.updateFilteredAccommodationList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"Friend\":"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            model.updateFilteredFriendList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalStateException(\"Unexpected tpoType value: \" + tpoType);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(1, filteredList.size());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Integer index @code{index} indicates the type of Travel Plan Object to find in the model"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertFindCommandSuccess(Command command, int index, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                                                Model expectedModel) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, index);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 209,
      "jeannetoh99": 60,
      "lyeyixian": 16,
      "jiaweiteo": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ACCOMMODATIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ACTIVITIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FRIENDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertFindCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * Tests the properties of find command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findFriend_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Alice\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredFriendList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int expectedSize \u003d expectedModel.getFilteredFriendList().size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FRIENDS_LISTED_OVERVIEW, expectedSize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findFriendCommand \u003d new FindCommand(new NameContainsKeywordsPredicate(keywords),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ParserUtil.FRIEND_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindCommandSuccess(findFriendCommand, ParserUtil.FRIEND_INDEX, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /** Finding friend in wishlist will throw an error */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findFriendWrongDirectory_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setDirectory(-1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Alice\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findFriendCommand \u003d new FindCommand(predicate,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ParserUtil.FRIEND_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(findFriendCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Travel Plan Object matching at least one keyword will be returned."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * \u0027Alice Meier\u0027 and \u0027Daniel Meier\u0027 matches keyword \u0027Meier\u0027."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findMatchMultiple_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Meier\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredFriendList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int expectedSize \u003d expectedModel.getFilteredFriendList().size(); //2 matches Alice Meier and Daniel Meier"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(expectedSize \u003d\u003d 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * The search is case-insensitive."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * `alice` will match `Alice`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findCaseInsensitive_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"alice\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate testPredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredFriendList(predicate); //expected model uses testPredicate"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int expectedSize \u003d expectedModel.getFilteredFriendList().size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FRIENDS_LISTED_OVERVIEW, expectedSize);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        //actual model uses predicate"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findFriendCommand \u003d new FindCommand(testPredicate, ParserUtil.FRIEND_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindCommandSuccess(findFriendCommand, ParserUtil.FRIEND_INDEX, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * The order of the keywords does not matter."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * e.g. `alice benson` will match `benson alice`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findDifferentOrder_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                Arrays.asList(\"alice\", \"benson\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate testPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                Arrays.asList(\"benson\", \"alice\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredFriendList(predicate); //expected model uses testPredicate"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int expectedSize \u003d expectedModel.getFilteredFriendList().size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FRIENDS_LISTED_OVERVIEW, expectedSize);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        //actual model uses predicate"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findFriendCommand \u003d new FindCommand(testPredicate, ParserUtil.FRIEND_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindCommandSuccess(findFriendCommand, ParserUtil.FRIEND_INDEX, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findAccommodation_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"inn\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredAccommodationList(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int expectedSize \u003d expectedModel.getFilteredAccommodationList().size();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACCOMMODATIONS_LISTED_OVERVIEW, expectedSize);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findAccommodation \u003d new FindCommand(new NameContainsKeywordsPredicate(keywords),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ParserUtil.ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindCommandSuccess(findAccommodation, ParserUtil.ACCOMMODATION_INDEX, model, expectedMessage,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /** Finding accommodation in wishlist will throw an error */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findAccommodationWrongDirectory_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setDirectory(-1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"inn\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findAccommodationCommand \u003d new FindCommand(predicate,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ParserUtil.ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_TRAVEL_PLAN_OBJECT_AT_WISHLIST;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(findAccommodationCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findActivity_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"archery\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        int expectedSize \u003d expectedModel.getFilteredActivityList().size();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITIES_LISTED_OVERVIEW, expectedSize);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand findAccommodation \u003d new FindCommand(new NameContainsKeywordsPredicate(keywords),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ParserUtil.ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindCommandSuccess(findAccommodation, ParserUtil.ACTIVITY_INDEX, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Only Activity with name matching \"archery\" should appear in filtered activity list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * DonutDate Activity should not be in the list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findCorrectActivity() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"archery\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity archery \u003d expectedModel.getFilteredActivityList().get(0); //archery activity"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity donutDate \u003d expectedModel.getFilteredActivityList().get(3); //donutdate activity"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(expectedModel.getFilteredActivityList().contains(archery));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(expectedModel.getFilteredActivityList().contains(donutDate));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Only full words will be matched"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Archery Activity should not match \u0027archerys\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_findMatchFullWord() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"archerys\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity archery \u003d expectedModel.getFilteredActivityList().get(0); //archery activity"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(expectedModel.getFilteredActivityList().contains(archery));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 217,
      "jiaweiteo": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/GoToCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.GoToCommand.TRAVEL_PLAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.GoToCommand.WISHLIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.testutil.typicals.TypicalIndexes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class GoToCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void execute_goToTravelPlan_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_TRAVELPLAN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        int zeroBasedIndex \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ModelStubGoTo modelStub \u003d new ModelStubGoTo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlan travelPlan \u003d modelStub.getFilteredTravelPlanList().get(zeroBasedIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        CommandResult commandResult \u003d new GoToCommand(index, true).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(String.format(GoToCommand.MESSAGE_GOTO_SUCCESS, TRAVEL_PLAN + \" \" + travelPlan.getName()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void execute_goToWishlist_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ModelStubGoTo modelStub \u003d new ModelStubGoTo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        CommandResult commandResult \u003d new GoToCommand(false).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(String.format(GoToCommand.MESSAGE_GOTO_SUCCESS, WISHLIST), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void execute_goToTravelPlan_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_SECOND_TRAVELPLAN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ModelStubGoTo modelStub \u003d new ModelStubGoTo();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        GoToCommand goToCommand \u003d new GoToCommand(index, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                goToCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_TRAVELPLAN;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        GoToCommand goToTravelPlanCommand \u003d new GoToCommand(index, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        GoToCommand goToWishlistCommand \u003d new GoToCommand(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(goToTravelPlanCommand.equals(goToTravelPlanCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        GoToCommand goToTravelPlanCommandCopy \u003d new GoToCommand(index, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(goToTravelPlanCommand.equals(goToTravelPlanCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(goToTravelPlanCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(goToTravelPlanCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // different GoToCommand -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(goToTravelPlanCommand.equals(goToWishlistCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * A Model stub for GoTo Command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private class ModelStubGoTo extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        private FilteredList\u003cTravelPlan\u003e filteredTravelPlanList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ModelStubGoTo() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            List\u003cTravelPlan\u003e list \u003d Arrays.asList(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            filteredTravelPlanList \u003d new FilteredList\u003c\u003e(FXCollections.observableList(list));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return filteredTravelPlanList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public void setDirectory(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 82,
      "jiaweiteo": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/ShowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.ShowCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setDirectory(1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showActivity_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            ShowCommand expectedCommand \u003d new ShowCommand(\"activity\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            Assertions.assertTrue(expectedCommand.equals(new ShowCommandParser().parse(\" -activity\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            System.out.println(\"Invalid input!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showAccommodation_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            ShowCommand expectedCommand \u003d new ShowCommand(\"accommodation\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Assertions.assertTrue(expectedCommand.equals(new ShowCommandParser().parse(\" -accommodation\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            System.out.println(\"Invalid input!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showFriend_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            ShowCommand expectedCommand \u003d new ShowCommand(\"friend\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Assertions.assertTrue(expectedCommand.equals(new ShowCommandParser().parse(\" -friend\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            System.out.println(\"Invalid input!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_show_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            ShowCommand expectedCommand \u003d new ShowCommand(\"friend\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            Assertions.assertFalse(expectedCommand.equals(new ShowCommandParser().parse(\" -friends\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            System.out.println(\"Invalid input!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showActivityCommand_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(\"activity\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(ShowCommand.MESSAGE_SHOW_SUCCESS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \"activity\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(showCommand, model, expectedMessage, expectedModel, 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showAccommodationCommand_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(\"accommodation\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(ShowCommand.MESSAGE_SHOW_SUCCESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \"accommodation\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredAccommodationList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(showCommand, model, expectedMessage, expectedModel, 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showFriendCommand_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(\"friend\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(ShowCommand.MESSAGE_SHOW_SUCCESS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \"friend\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredFriendList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(showCommand, model, expectedMessage, expectedModel, 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_showFriendCommand_failure() throws CommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(\"frienda\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredFriendList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(showCommand, expectedModel,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showFirstCommand \u003d new ShowCommand(\"activity\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showSecondCommand \u003d new ShowCommand(\"friend\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ShowCommand showFirstCommandCopy \u003d new ShowCommand(\"activity\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommandCopy));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(showFirstCommand.equals(\"123\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(showFirstCommand.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different showCommand -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(showFirstCommand.equals(showSecondCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 5,
      "jiaweiteo": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/add/AddAccommodationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACCOMMODATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.typicals.TypicalAccommodations;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddAccommodationCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void constructor_nullAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAccommodationCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_accommodationAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubAcceptingAccommodationAdded modelStub \u003d new ModelStubAcceptingAccommodationAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation validAccommodation \u003d new AccommodationBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CommandResult commandResult \u003d new AddAccommodationCommand(validAccommodation).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(String.format(AddAccommodationCommand.MESSAGE_SUCCESS, validAccommodation),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(Arrays.asList(validAccommodation), modelStub.accommodationsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_duplicateAccommodation_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation validAccommodation \u003d new AccommodationBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddAccommodationCommand addAccommodationCommand \u003d new AddAccommodationCommand(validAccommodation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAccommodation(validAccommodation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_ACCOMMODATION, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                addAccommodationCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddAccommodationCommand addAliceCommand \u003d new AddAccommodationCommand(TypicalAccommodations.ALICEHOTEL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddAccommodationCommand addBobCommand \u003d new AddAccommodationCommand(TypicalAccommodations.BOBHOTEL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddAccommodationCommand addAliceCommandCopy \u003d new AddAccommodationCommand(TypicalAccommodations.ALICEHOTEL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different accommodation -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubWithAccommodation extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        private final Accommodation accommodation;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubWithAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(accommodation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.accommodation \u003d accommodation;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Accommodation accommodation \u003d (Accommodation) travelPlanObject;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return this.accommodation.isSameAccommodation(accommodation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * A Model stub that always accept the accommodation being added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubAcceptingAccommodationAdded extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final ArrayList\u003cAccommodation\u003e accommodationsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Accommodation accommodation \u003d (Accommodation) travelPlanObject;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return accommodationsAdded.stream().anyMatch(accommodation::isSameAccommodation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public void addTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Accommodation accommodation \u003d (Accommodation) travelPlanObject;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            accommodationsAdded.add(accommodation);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public AccommodationList getAccommodationList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            AccommodationList accommodationList \u003d new AccommodationList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            accommodationList.setAccommodations(accommodationsAdded);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return accommodationList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new TravelPlanner();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public boolean isValidAccommodationDate(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 119,
      "jeannetoh99": 2,
      "lyeyixian": 8,
      "jiaweiteo": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/add/AddActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.typicals.TypicalActivities;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddActivityCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void constructor_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddActivityCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_activityAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CommandResult commandResult \u003d new AddActivityCommand(validActivity).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(String.format(AddActivityCommand.MESSAGE_SUCCESS, validActivity),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(Arrays.asList(validActivity), modelStub.activitiesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_duplicateActivity_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddActivityCommand addActivityCommand \u003d new AddActivityCommand(validActivity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithActivity(validActivity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_ACTIVITY, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                addActivityCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddActivityCommand addArcheryCommand \u003d new AddActivityCommand(TypicalActivities.ARCHERY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddActivityCommand addBungeeCommand \u003d new AddActivityCommand(TypicalActivities.BUNGEEJUMPING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addArcheryCommand.equals(addArcheryCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddActivityCommand addArcheryCommandCopy \u003d new AddActivityCommand(TypicalActivities.ARCHERY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addArcheryCommand.equals(addArcheryCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addArcheryCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addArcheryCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addArcheryCommand.equals(addBungeeCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that contains a single activity."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubWithActivity extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        private final Activity activity;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubWithActivity(Activity activity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(activity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.activity \u003d activity;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Activity activity \u003d (Activity) travelPlanObject;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return this.activity.isSameActivity(activity);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that always accept the activity being added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubAcceptingActivityAdded extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final ArrayList\u003cActivity\u003e activitiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Activity activity \u003d (Activity) travelPlanObject;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return activitiesAdded.stream().anyMatch(activity::isSameActivity);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public void addTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Activity activity \u003d (Activity) travelPlanObject;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            activitiesAdded.add(activity);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            activityList.setActivities(activitiesAdded);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return activityList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public boolean isValidActivityDate(WanderlustDateTime activityDateTime) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new TravelPlanner();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 121,
      "jeannetoh99": 2,
      "lyeyixian": 7,
      "jiaweiteo": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/add/AddFriendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.typicals.TypicalFriends;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddFriendCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void constructor_nullFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFriendCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_friendAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubAcceptingFriendAdded modelStub \u003d new ModelStubAcceptingFriendAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Friend validFriend \u003d new FriendBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CommandResult commandResult \u003d new AddFriendCommand(validFriend).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(String.format(AddFriendCommand.MESSAGE_SUCCESS, validFriend), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(Arrays.asList(validFriend), modelStub.friendsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_duplicateFriend_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Friend validFriend \u003d new FriendBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddFriendCommand addFriendCommand \u003d new AddFriendCommand(validFriend);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithActivity(validFriend);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_FRIEND, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                addFriendCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddFriendCommand addAliceCommand \u003d new AddFriendCommand(TypicalFriends.ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddFriendCommand addBensonCommand \u003d new AddFriendCommand(TypicalFriends.BENSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddFriendCommand addAliceCommandCopy \u003d new AddFriendCommand(TypicalFriends.ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBensonCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that contains a single activity."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubWithActivity extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        private final Friend friend;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubWithActivity(Friend friend) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(friend);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.friend \u003d friend;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Friend friend \u003d (Friend) travelPlanObject;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return this.friend.isSameFriend(friend);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that always accept the friend being added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubAcceptingFriendAdded extends ModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final ArrayList\u003cFriend\u003e friendsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Friend friend \u003d (Friend) travelPlanObject;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return friendsAdded.stream().anyMatch(friend::isSameFriend);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public void addTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlanObject);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Friend friend \u003d (Friend) travelPlanObject;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            friendsAdded.add(friend);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public FriendList getFriendList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            FriendList friendList \u003d new FriendList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            friendList.setFriends(friendsAdded);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return friendList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new TravelPlanner();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 120,
      "jeannetoh99": 2,
      "lyeyixian": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/add/AddTravelPlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TRAVELPLAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.typicals.TypicalTravelPlans;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddTravelPlanCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void constructor_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTravelPlanCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_travelPlanAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubAcceptingTravelPlanAdded modelStub \u003d new ModelStubAcceptingTravelPlanAdded();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        TravelPlan validTravelPlan \u003d new TravelPlanBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CommandResult commandResult \u003d new AddTravelPlanCommand(validTravelPlan).execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(String.format(AddTravelPlanCommand.MESSAGE_SUCCESS, validTravelPlan),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(Arrays.asList(validTravelPlan), modelStub.travelPlansAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_duplicateTravelPlan_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        TravelPlan validTravelPlan \u003d new TravelPlanBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddTravelPlanCommand addTravelPlanCommand \u003d new AddTravelPlanCommand(validTravelPlan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTravelPlan(validTravelPlan);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_TRAVELPLAN, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                addTravelPlanCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddTravelPlanCommand addAustraliaCommand \u003d new AddTravelPlanCommand(TypicalTravelPlans.AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddTravelPlanCommand addBostonCommand \u003d new AddTravelPlanCommand(TypicalTravelPlans.BOSTON_TRIP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addAustraliaCommand.equals(addAustraliaCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        AddTravelPlanCommand addAustraliaCommandCopy \u003d new AddTravelPlanCommand(TypicalTravelPlans.AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(addAustraliaCommand.equals(addAustraliaCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAustraliaCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAustraliaCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(addAustraliaCommand.equals(addBostonCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that contains a single activity."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubWithTravelPlan extends ModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        private final TravelPlan travelPlan;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelStubWithTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.travelPlan \u003d travelPlan;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return this.travelPlan.isSameTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * A Model stub that always accept the travel plan being added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private class ModelStubAcceptingTravelPlanAdded extends ModelStub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final ArrayList\u003cTravelPlan\u003e travelPlansAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return travelPlansAdded.stream().anyMatch(travelPlan::isSameTravelPlan);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public void addTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            travelPlansAdded.add(travelPlan);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new TravelPlanner();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 110,
      "jeannetoh99": 2,
      "lyeyixian": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/add/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ObservableDirectory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Nameable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.UniqueTravelPlanList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setTravelPlannerFilePath(Path travelPlannerFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setTravelPlanner(ReadOnlyTravelPlanner travelPlanner) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean hasTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasTravelPlanObject(TravelPlanObject tPObj, int travelPlanIndex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void deleteTravelPlan(TravelPlan target) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void deleteTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void addTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void addActivity(Activity activity, Index travelPlanIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void addTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setTravelPlanObject(TravelPlanObject target, TravelPlanObject editedTravelPlanObject) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredWishlist() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFilteredFriendList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredTravelPlanList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredWishlist(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredAccommodationList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredFriendList(Predicate\u003cNameable\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setDirectory(int index) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableDirectory getObservableDirectory() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public UniqueTravelPlanList getTravelPlanList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Wishlist getWishlist() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public AccommodationList getAccommodationList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public FriendList getFriendList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortWishlist(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortActivityList(Comparator\u003cActivity\u003e comparator) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortAccommodationList(Comparator\u003cAccommodation\u003e comparator) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void sortFriendList(Comparator\u003cFriend\u003e comparator) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void copyActivity(Activity activity, Index travelPlanIndex) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isValidAccommodationDate(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isValidActivityDate(WanderlustDateTime activityDateTime) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isValidActivityDate(WanderlustDateTime activityDateTime, TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isDirectoryTypeTravelPlan() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 181,
      "jeannetoh99": 17,
      "lyeyixian": 57,
      "jiaweiteo": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/copy/CopyCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.logic.command.copy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getInvalidDateTestTravelPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class CopyCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.setDirectory(-1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String expectedMessage \u003d String.format(CopyCommand.MESSAGE_COPY_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                INDEX_FIRST.getOneBased(), INDEX_SECOND.getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Activity activityToCopy \u003d expectedModel.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedModel.setDirectory(-1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedModel.copyActivity(activityToCopy, INDEX_SECOND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandSuccess(copyCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_duplicateActivity_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(copyCommand, model, MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_invalidActivityIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(outOfBoundIndex, INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(copyCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_invalidTravelPlanIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTravelPlanList().size() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(INDEX_FIRST, outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(copyCommand, model, Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_invalidDate_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model \u003d new ModelManager(getInvalidDateTestTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(copyCommand, model, CopyCommand.MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_notWishList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(copyCommand, model, CopyCommand.MESSAGE_NOT_WISHLIST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand diffActivityCopyCommand \u003d new CopyCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand diffTravelPlanCopyCommand \u003d new CopyCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand bothDiffCopyCommand \u003d new CopyCommand(INDEX_SECOND, INDEX_SECOND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(copyCommand.equals(copyCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        CopyCommand copyCommandCopy \u003d new CopyCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(copyCommand.equals(copyCommandCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(copyCommand.equals(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(copyCommand.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(copyCommand.equals(diffActivityCopyCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different travel plan -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(copyCommand.equals(diffTravelPlanCopyCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity and travel plan -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(copyCommand.equals(bothDiffCopyCommand));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/copy/MoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.logic.command.copy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getInvalidDateTestTravelPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class MoveCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.setDirectory(-1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String expectedMessage \u003d String.format(MoveCommand.MESSAGE_MOVE_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                INDEX_FIRST.getOneBased(), INDEX_SECOND.getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Activity activityToMove \u003d expectedModel.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedModel.setDirectory(-1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedModel.copyActivity(activityToMove, INDEX_SECOND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedModel.deleteActivity(activityToMove);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandSuccess(moveCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_duplicateActivity_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(moveCommand, model, MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_invalidActivityIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(outOfBoundIndex, INDEX_FIRST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(moveCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_invalidTravelPlanIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTravelPlanList().size() + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST, outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(moveCommand, model, Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_invalidDate_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model \u003d new ModelManager(getInvalidDateTestTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(moveCommand, model, MoveCommand.MESSAGE_DATE_NOT_IN_RANGE_ACTIVITY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute_notWishList_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertCommandFailure(moveCommand, model, MoveCommand.MESSAGE_NOT_WISHLIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand diffActivityMoveCommand \u003d new MoveCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand diffTravelPlanMoveCommand \u003d new MoveCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand bothDiffMoveCommand \u003d new MoveCommand(INDEX_SECOND, INDEX_SECOND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(moveCommand.equals(moveCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        MoveCommand moveCommandCopy \u003d new MoveCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(moveCommand.equals(moveCommandCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(moveCommand.equals(1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(moveCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(moveCommand.equals(diffActivityMoveCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different travel plan -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(moveCommand.equals(diffTravelPlanMoveCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different activity and travel plan -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(moveCommand.equals(bothDiffMoveCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/delete/DeleteAccommodationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.showTpoAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_TEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Contains integration tests and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * {@code DeleteAccommodationCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteAccommodationCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Accommodation accommodationToDelete \u003d model.getFilteredAccommodationList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteAccommodationCommand deleteAccommodationCommand \u003d new DeleteAccommodationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(deleteAccommodationCommand.MESSAGE_DELETE_ACCOMMODATION_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                accommodationToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.deleteTravelPlanObject(accommodationToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(deleteAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAccommodationList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteAccommodationCommand deleteAccommodationCommand \u003d new DeleteAccommodationCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteAccommodationCommand, model, Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showTpoAtIndex(model, INDEX_FIRST, \"Accommodation\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Accommodation accommodationToDelete \u003d model.getFilteredAccommodationList()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteAccommodationCommand deleteAccommodationCommand \u003d new DeleteAccommodationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAccommodationCommand.MESSAGE_DELETE_ACCOMMODATION_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                accommodationToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.deleteTravelPlanObject(accommodationToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        showNoAccommodationList(expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(deleteAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showTpoAtIndex(model, INDEX_FIRST, \"Accommodation\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_TEN;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteAccommodationCommand deleteAccommodationCommand \u003d new DeleteAccommodationCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteAccommodationCommand, model, Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteAccommodationCommand deleteFirstCommand \u003d new DeleteAccommodationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteAccommodationCommand deleteSecondCommand \u003d new DeleteAccommodationCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteAccommodationCommand deleteFirstCommandCopy \u003d new DeleteAccommodationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different travelPlan -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private void showNoAccommodationList(Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredAccommodationList(p -\u003e false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(model.getFilteredAccommodationList().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 30,
      "lyeyixian": 9,
      "jiaweiteo": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/delete/DeleteActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.showTpoAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.showTravelPlanAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_TEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Contains integration tests and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * {@code DeleteActivityCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteActivityCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                activityToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.deleteTravelPlanObject(activityToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showTpoAtIndex(model, INDEX_FIRST, \"Activity\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                activityToDelete);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.deleteTravelPlanObject(activityToDelete);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showNoActivityList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showTravelPlanAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_TEN;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteActivityCommand deleteFirstCommand \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteActivityCommand deleteSecondCommand \u003d new DeleteActivityCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteActivityCommand deleteFirstCommandCopy \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different travelPlan -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private void showNoActivityList(Model model) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredActivityList(p -\u003e false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(model.getFilteredActivityList().isEmpty());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 28,
      "lyeyixian": 11,
      "jiaweiteo": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/delete/DeleteFriendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.showTpoAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_TEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Contains integration tests and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * {@code DeleteFriendCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteFriendCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend friendToDelete \u003d model.getFilteredFriendList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteFriendCommand deleteFriendCommand \u003d new DeleteFriendCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFriendCommand.MESSAGE_DELETE_FRIEND_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                friendToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.deleteTravelPlanObject(friendToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(deleteFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFriendList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteFriendCommand deleteFriendCommand \u003d new DeleteFriendCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteFriendCommand, model, Messages.MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showTpoAtIndex(model, INDEX_FIRST, \"Friend\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend friendToDelete \u003d model.getFilteredFriendList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteFriendCommand deleteFriendCommand \u003d new DeleteFriendCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFriendCommand.MESSAGE_DELETE_FRIEND_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                friendToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.deleteTravelPlanObject(friendToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        showNoFriendList(expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(deleteFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        showTpoAtIndex(model, INDEX_FIRST, \"Friend\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_TEN;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteFriendCommand deleteFriendCommand \u003d new DeleteFriendCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteFriendCommand, model, Messages.MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteFriendCommand deleteFirstCommand \u003d new DeleteFriendCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteFriendCommand deleteSecondCommand \u003d new DeleteFriendCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DeleteFriendCommand deleteFirstCommandCopy \u003d new DeleteFriendCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different travelPlan -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private void showNoFriendList(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredFriendList(p -\u003e false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(model.getFilteredFriendList().isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 30,
      "lyeyixian": 9,
      "jiaweiteo": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/delete/DeleteTravelPlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.showTravelPlanAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_TRAVELPLAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND_TRAVELPLAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_TEN_TRAVELPLAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Contains integration tests and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * {@code DeleteTravelPlanCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteTravelPlanCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        TravelPlan travelPlanToDelete \u003d model.getFilteredTravelPlanList().get(INDEX_FIRST_TRAVELPLAN.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteTravelPlanCommand \u003d new DeleteTravelPlanCommand(INDEX_FIRST_TRAVELPLAN);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTravelPlanCommand.MESSAGE_DELETE_TRAVELPLAN_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                travelPlanToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.deleteTravelPlan(travelPlanToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(deleteTravelPlanCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTravelPlanList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteTravelPlanCommand \u003d new DeleteTravelPlanCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteTravelPlanCommand, model, Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        showTravelPlanAtIndex(model, INDEX_FIRST_TRAVELPLAN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        TravelPlan travelPlanToDelete \u003d model.getFilteredTravelPlanList().get(INDEX_FIRST_TRAVELPLAN.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteTravelPlanCommand \u003d new DeleteTravelPlanCommand(INDEX_FIRST_TRAVELPLAN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTravelPlanCommand.MESSAGE_DELETE_TRAVELPLAN_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                travelPlanToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.deleteTravelPlan(travelPlanToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        showNoTravelPlan(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(deleteTravelPlanCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        showTravelPlanAtIndex(model, INDEX_FIRST_TRAVELPLAN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_TEN_TRAVELPLAN;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteTravelPlanCommand \u003d new DeleteTravelPlanCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandFailure(deleteTravelPlanCommand, model, Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteFirstCommand \u003d new DeleteTravelPlanCommand(INDEX_FIRST_TRAVELPLAN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteSecondCommand \u003d new DeleteTravelPlanCommand(INDEX_SECOND_TRAVELPLAN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        DeleteTravelPlanCommand deleteFirstCommandCopy \u003d new DeleteTravelPlanCommand(INDEX_FIRST_TRAVELPLAN);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different travelPlan -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private void showNoTravelPlan(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.updateFilteredTravelPlanList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(model.getFilteredTravelPlanList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "lyeyixian": 9,
      "jiaweiteo": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/edit/EditAccommodationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACCOMMODATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_HOME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_INN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_INN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.edit.EditAccommodationCommand.MESSAGE_EDIT_ACCOMMODATION_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditAccommodationDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditAccommodationCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        //inside a travelplan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setDirectory(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation editedAccommodation \u003d new AccommodationBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditAccommodationDescriptorBuilder(editedAccommodation).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand editAccommodationCommand \u003d new EditAccommodationCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ACCOMMODATION_SUCCESS, editedAccommodation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanObject(model.getFilteredAccommodationList().get(0), editedAccommodation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand editAccommodationCommand \u003d new EditAccommodationCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditDescriptor());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation editedAccommodation \u003d model.getFilteredAccommodationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ACCOMMODATION_SUCCESS, editedAccommodation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation accommodationInFilteredList \u003d model.getFilteredAccommodationList()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation editedAccommodation \u003d new AccommodationBuilder(accommodationInFilteredList)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withName(VALID_NAME_INN).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand editAccommodationCommand \u003d new EditAccommodationCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditAccommodationDescriptorBuilder().withName(VALID_NAME_INN).build());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ACCOMMODATION_SUCCESS, editedAccommodation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanObject(model.getFilteredAccommodationList().get(0), editedAccommodation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateAccommodationUnfilteredList_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation firstAccommodation \u003d model.getFilteredAccommodationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditAccommodationDescriptorBuilder(firstAccommodation).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand editAccommodationCommand \u003d new EditAccommodationCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editAccommodationCommand, model, MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateAccommodationFilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // edit Accommodation in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Accommodation accommodationInList \u003d model.getFilteredAccommodationList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand editAccommodationCommand \u003d new EditAccommodationCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditAccommodationDescriptorBuilder(accommodationInList).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editAccommodationCommand, model, MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_invalidAccommodationIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAccommodationList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditAccommodationDescriptorBuilder().withName(VALID_NAME_INN).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand editAccommodationCommand \u003d new EditAccommodationCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editAccommodationCommand, model, Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        final EditAccommodationCommand standardCommand \u003d new EditAccommodationCommand(INDEX_FIRST, DESC_INN);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor copyDescriptor \u003d new EditDescriptor(DESC_INN);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditAccommodationCommand commandWithSameValues \u003d new EditAccommodationCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAccommodationCommand(INDEX_SECOND, DESC_INN)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAccommodationCommand(INDEX_FIRST, DESC_HOME)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 122,
      "jeannetoh99": 10,
      "lyeyixian": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/edit/EditActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_SKI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_ZOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_ZOO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.edit.EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "//temp handling within travelplan only, wishlist directory tests to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditActivityCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        //inside a travelplan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditActivityDescriptorBuilder(editedActivity).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanObject(model.getFilteredActivityList().get(0), editedActivity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST, new EditDescriptor());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity editedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity activityInFilteredList \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder(activityInFilteredList).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditActivityDescriptorBuilder().withName(VALID_NAME_AMY).build());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanObject(model.getFilteredActivityList().get(0), editedActivity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateActivityUnfilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity firstActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditActivityDescriptorBuilder(firstActivity).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editActivityCommand, model, MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateActivityFilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // edit Activity in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Activity activityInList \u003d model.getFilteredActivityList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditActivityDescriptorBuilder(activityInList).build());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editActivityCommand, model, MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_invalidActivityIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_ZOO).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editActivityCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        final EditActivityCommand standardCommand \u003d new EditActivityCommand(INDEX_FIRST, DESC_SKI);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor copyDescriptor \u003d new EditDescriptor(DESC_SKI);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditActivityCommand commandWithSameValues \u003d new EditActivityCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditActivityCommand(INDEX_SECOND, DESC_SKI)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditActivityCommand(INDEX_FIRST, DESC_ZOO)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 116,
      "jeannetoh99": 15,
      "lyeyixian": 13,
      "jiaweiteo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/edit/EditDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_COST_SKI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LOCATION_HOME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditDescriptorTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void isAnyFieldEdited_withNewEditDescriptor_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(editDescriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void isAnyFieldEdited_withEditedNames_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setName(new Name(VALID_NAME_AMY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(editDescriptor.isAnyFieldEdited());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void buildFromSource_withNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EditDescriptor.buildFromSource(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void buildFromSource_validArgumentMultimap_returnsCorrectEditDescriptor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String args \u003d NAME_DESC_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editDescriptor \u003d EditDescriptor.buildFromSource(argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor compareDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        compareDescriptor.setName(new Name(VALID_NAME_AMY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(editDescriptor, compareDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void buildFromSource_validArgumentMultimap_returnsModifiedEditDescriptor() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String args \u003d NAME_DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            editDescriptor \u003d EditDescriptor.buildFromSource(argMultimap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor compareDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(compareDescriptor.equals(editDescriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void wrongFieldEdited_validActivityField_false() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditActivityDescriptorBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setLocation(new Location(VALID_LOCATION_HOME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(editDescriptor.wrongFieldEdited(Activity.TPO_WORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void wrongFieldEdited_invalidFriendField_true() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditActivityDescriptorBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setCost(new Cost(VALID_COST_SKI));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(editDescriptor.wrongFieldEdited(Friend.TPO_WORD));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 86,
      "lyeyixian": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/edit/EditFriendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.edit.EditFriendCommand.MESSAGE_EDIT_FRIEND_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditFriendDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditFriendCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        //inside a travelplan"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        model.setDirectory(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend editedFriend \u003d new FriendBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditFriendDescriptorBuilder(editedFriend).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand editFriendCommand \u003d new EditFriendCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_FRIEND_SUCCESS, editedFriend);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanObject(model.getFilteredFriendList().get(0), editedFriend);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand editFriendCommand \u003d new EditFriendCommand(INDEX_FIRST, new EditDescriptor());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend editedFriend \u003d model.getFilteredFriendList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_FRIEND_SUCCESS, editedFriend);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend friendInFilteredList \u003d model.getFilteredFriendList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend editedFriend \u003d new FriendBuilder(friendInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand editFriendCommand \u003d new EditFriendCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditFriendDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_FRIEND_SUCCESS, editedFriend);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setDirectory(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedModel.setTravelPlanObject(model.getFilteredFriendList().get(0), editedFriend);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertCommandSuccess(editFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateFriendUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend firstFriend \u003d model.getFilteredFriendList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditFriendDescriptorBuilder(firstFriend).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand editFriendCommand \u003d new EditFriendCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editFriendCommand, model, MESSAGE_DUPLICATE_FRIEND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateFriendFilteredList_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // edit Friend in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend friendInList \u003d model.getFilteredFriendList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand editFriendCommand \u003d new EditFriendCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditFriendDescriptorBuilder(friendInList).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editFriendCommand, model, MESSAGE_DUPLICATE_FRIEND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_invalidFriendIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFriendList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditFriendDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand editFriendCommand \u003d new EditFriendCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editFriendCommand, model, Messages.MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        final EditFriendCommand standardCommand \u003d new EditFriendCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor copyDescriptor \u003d new EditDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditFriendCommand commandWithSameValues \u003d new EditFriendCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditFriendCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditFriendCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 117,
      "jeannetoh99": 10,
      "lyeyixian": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/edit/EditTravelPlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TRAVELPLAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_EUROPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.DESC_NYC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_NYC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.edit.EditTravelPlanCommand.MESSAGE_EDIT_TRAVELPLAN_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.EditTravelPlanDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class EditTravelPlanCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditTravelPlanDescriptorBuilder(editedTravelPlan).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand editTravelPlanCommand \u003d new EditTravelPlanCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TRAVELPLAN_SUCCESS, editedTravelPlan);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setTravelPlan(model.getFilteredTravelPlanList().get(0), editedTravelPlan);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandSuccess(editTravelPlanCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand editTravelPlanCommand \u003d new EditTravelPlanCommand(INDEX_FIRST, new EditDescriptor());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan editedTravelPlan \u003d model.getFilteredTravelPlanList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TRAVELPLAN_SUCCESS, editedTravelPlan);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandSuccess(editTravelPlanCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan travelPlanInFilteredList \u003d model.getFilteredTravelPlanList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan editedTravelPlan \u003d new TravelPlanBuilder(travelPlanInFilteredList).withName(VALID_NAME_NYC).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand editTravelPlanCommand \u003d new EditTravelPlanCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditTravelPlanDescriptorBuilder().withName(VALID_NAME_NYC).build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TRAVELPLAN_SUCCESS, editedTravelPlan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new TravelPlanner(model.getTravelPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedModel.setTravelPlan(model.getFilteredTravelPlanList().get(0), editedTravelPlan);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandSuccess(editTravelPlanCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateTravelPlanUnfilteredList_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan firstTravelPlan \u003d model.getFilteredTravelPlanList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditTravelPlanDescriptorBuilder(firstTravelPlan).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand editTravelPlanCommand \u003d new EditTravelPlanCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editTravelPlanCommand, model, MESSAGE_DUPLICATE_TRAVELPLAN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_duplicateTravelPlanFilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // edit TravelPlan in filtered list into a duplicate in wanderlust"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        TravelPlan travelPlanInList \u003d model.getFilteredTravelPlanList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand editTravelPlanCommand \u003d new EditTravelPlanCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditTravelPlanDescriptorBuilder(travelPlanInList).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editTravelPlanCommand, model, MESSAGE_DUPLICATE_TRAVELPLAN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void execute_invalidTravelPlanIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTravelPlanList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditTravelPlanDescriptorBuilder().withName(VALID_NAME_NYC).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand editTravelPlanCommand \u003d new EditTravelPlanCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertCommandFailure(editTravelPlanCommand, model, Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        final EditTravelPlanCommand standardCommand \u003d new EditTravelPlanCommand(INDEX_FIRST, DESC_EUROPE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor copyDescriptor \u003d new EditDescriptor(DESC_EUROPE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditTravelPlanCommand commandWithSameValues \u003d new EditTravelPlanCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTravelPlanCommand(INDEX_SECOND, DESC_EUROPE)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTravelPlanCommand(INDEX_FIRST, DESC_NYC)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 113,
      "jeannetoh99": 4,
      "lyeyixian": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/sort/SortAccommodationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACCOMMODATION_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortAccommodationCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_COST \u003d \"cost\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortAccommodationName_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortAccommodationCommand sortAccommodationCommand \u003d new SortAccommodationCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortAccommodationCommand.MESSAGE_SORT_ACCOMMODATION_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cAccommodation\u003e nameComparator \u003d Comparator.comparing(d -\u003e d.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortAccommodationList(nameComparator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortAccommodationCost_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortAccommodationCommand sortAccommodationCommand \u003d new SortAccommodationCommand(KEYWORD_COST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortAccommodationCommand.MESSAGE_SORT_ACCOMMODATION_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_COST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cAccommodation\u003e costComparator \u003d Comparator.comparingInt(c -\u003e -c.getCostAsInt());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortAccommodationList(costComparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortAccommodationDate_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortAccommodationCommand sortAccommodationCommand \u003d new SortAccommodationCommand(KEYWORD_DATE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortAccommodationCommand.MESSAGE_SORT_ACCOMMODATION_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cAccommodation\u003e dateComparator \u003d Comparator.comparing(d -\u003e d.getStartDate().getValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortAccommodationList(dateComparator);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortAccommodationCommand, model, expectedMessage, expectedModel, ACCOMMODATION_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortAccommodationCommand sortAccommodationFirstCommand \u003d new SortAccommodationCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortAccommodationCommand sortAccommodationSecondCommand \u003d new SortAccommodationCommand(KEYWORD_COST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(sortAccommodationFirstCommand.equals(sortAccommodationFirstCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortAccommodationCommand sortAccommodationFirstCommandCopy \u003d new SortAccommodationCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(sortAccommodationFirstCommand.equals(sortAccommodationFirstCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortAccommodationFirstCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortAccommodationFirstCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different sort keyword -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortAccommodationFirstCommand.equals(sortAccommodationSecondCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/sort/SortActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.ACTIVITY_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortActivityCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_COST \u003d \"cost\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_IMPORTANCE \u003d \"importance\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_DATETIME \u003d \"datetime\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortActivityName_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivityCommand \u003d new SortActivityCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortActivityCommand.MESSAGE_SORT_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cActivity\u003e nameComparator \u003d Comparator.comparing(d -\u003e d.getName().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortActivityList(nameComparator);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortActivityCost_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivityCommand \u003d new SortActivityCommand(KEYWORD_COST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortActivityCommand.MESSAGE_SORT_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_COST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cActivity\u003e costComparator \u003d Comparator.comparingInt(c -\u003e -c.getCostAsInt());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortActivityList(costComparator);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortActivityImportance_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivityCommand \u003d new SortActivityCommand(KEYWORD_IMPORTANCE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortActivityCommand.MESSAGE_SORT_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_IMPORTANCE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cActivity\u003e importanceComparator \u003d Comparator.comparing(i -\u003e -i.getImportanceAsInt());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortActivityList(importanceComparator);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortActivityDateTime_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivityCommand \u003d new SortActivityCommand(KEYWORD_DATETIME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortActivityCommand.MESSAGE_SORT_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_DATETIME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cActivity\u003e dateComparator \u003d Comparator.comparing(d -\u003e d.getActivityDateTime().getValue());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortActivityList(dateComparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortActivityCommand, model, expectedMessage, expectedModel, ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivityFirstCommand \u003d new SortActivityCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivitySecondCommand \u003d new SortActivityCommand(KEYWORD_COST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(sortActivityFirstCommand.equals(sortActivityFirstCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortActivityCommand sortActivityFirstCommandCopy \u003d new SortActivityCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(sortActivityFirstCommand.equals(sortActivityFirstCommandCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortActivityFirstCommand.equals(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortActivityFirstCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different sort keyword -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortActivityFirstCommand.equals(sortActivitySecondCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/command/sort/SortFriendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FRIEND_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortFriendCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_MOBILE \u003d \"mobile\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String KEYWORD_PASSPORT \u003d \"passport\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setDirectory(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortFriendName_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortFriendCommand sortFriendCommand \u003d new SortFriendCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortFriendCommand.MESSAGE_SORT_FRIEND_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cFriend\u003e nameComparator \u003d Comparator.comparing(d -\u003e d.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortFriendList(nameComparator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortFriendMobile_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortFriendCommand sortFriendCommand \u003d new SortFriendCommand(KEYWORD_MOBILE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortFriendCommand.MESSAGE_SORT_FRIEND_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_MOBILE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cFriend\u003e mobileComparator \u003d Comparator.comparing(f -\u003e f.getMobile().getValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortFriendList(mobileComparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void execute_sortFriendPassport_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortFriendCommand sortFriendCommand \u003d new SortFriendCommand(SortCommand.KEYWORD_PASSPORT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String expectedMessage \u003d String.format(SortFriendCommand.MESSAGE_SORT_FRIEND_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                KEYWORD_PASSPORT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Comparator\u003cFriend\u003e passportComparator \u003d Comparator.comparing(f -\u003e f.getPassport().getValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.setDirectory(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expectedModel.sortFriendList(passportComparator);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertCommandSuccess(sortFriendCommand, model, expectedMessage, expectedModel, FRIEND_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortFriendCommand sortFriendFirstCommand \u003d new SortFriendCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortFriendCommand sortFriendSecondCommand \u003d new SortFriendCommand(KEYWORD_MOBILE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(sortFriendFirstCommand.equals(sortFriendFirstCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        SortFriendCommand sortFriendFirstCommandCopy \u003d new SortFriendCommand(KEYWORD_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(sortFriendFirstCommand.equals(sortFriendFirstCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortFriendFirstCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortFriendFirstCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different sort keyword -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(sortFriendFirstCommand.equals(sortFriendSecondCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.GoToCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the DeleteCommand parsing of {@code userInput} by {@code parser} is successful"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * and the command created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static void assertDeleteParseSuccess(DeleteCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                                DeleteCommand expectedCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the DeleteCommand parsing of {@code userInput} by {@code parser} is unsuccessful"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * and the error message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static void assertDeleteParseFailure(DeleteCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                                                String expectedMessage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the FindCommand parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertFindParseSuccess(FindCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                                              FindCommand expectedCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            FindCommand command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the FindCommand parsing of {@code userInput} by {@code parser} failed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * and the error message equals to {@code expectedMessage}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertFindParseFailure(FindCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                              String expectedMessage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the SortCommand parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static void assertSortParserSuccess(SortCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                               SortCommand expectedCommand) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the SortCommand parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static void assertSortParserFailure(SortCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                               String expectedMessage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (seedu.address.logic.parser.exceptions.ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Asserts that the ShowCommand parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static void assertShowParseSuccess(ShowCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                              ShowCommand expectedCommand) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            ShowCommand command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the ShowCommand parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static void assertShowParseFailure(ShowCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                              String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the EditCommand parsing of {@code userInput} by {@code parser} is"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * successful and the command created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static void assertEditParseSuccess(EditCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                              EditCommand expectedCommand) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            EditCommand command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the EditCommand parsing of {@code userInput} by {@code parser} is unsuccessful"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * and the error message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static void assertEditParseFailure(EditCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                              String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Asserts that the parsing of an GoToCommand {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static void assertParseGoToSuccess(GoToCommandParser parser, String userInput, GoToCommand"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            expectedCommand) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            GoToCommand command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Asserts that the GoTo parsing of {@code userInput} by {@code parser} is unsuccessful"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * and the error message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static void assertParseGoToFailure(GoToCommandParser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 50,
      "lyeyixian": 41,
      "jiaweiteo": 48,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertDeleteParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertDeleteParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.delete.DeleteAccommodationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteActivityCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.logic.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.delete.DeleteFriendCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.delete.DeleteTravelPlanCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validActivityArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertDeleteParseSuccess(parser, \" -activity 1\", new DeleteActivityCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validAccommodationArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertDeleteParseSuccess(parser, \" -accommodation 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                new DeleteAccommodationCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validFriendArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertDeleteParseSuccess(parser, \" -friend 1\", new DeleteFriendCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validTravelPlanArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertDeleteParseSuccess(parser, \" -travelplan 1\", new DeleteTravelPlanCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertDeleteParseFailure(parser, \" -activiti 1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_invalidArgsLength_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertDeleteParseFailure(parser, \" -activity 1 asdasd\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 3,
      "lyeyixian": 4,
      "jiaweiteo": 28,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.edit.EditCommand.INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.edit.EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertEditParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertEditParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.edit.EditAccommodationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.edit.EditActivityCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditFriendCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.edit.EditTravelPlanCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //simple edit friend"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_editFriend_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setName(new Name(\"Bobby\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEditParseSuccess(parser, \" -friend 1 n/Bobby\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditFriendCommand(INDEX_FIRST, editDescriptor));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_editActivity_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setName(new Name(\"Ice Skating\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseSuccess(parser, \" -activity 1 n/Ice Skating\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditActivityCommand(INDEX_FIRST, editDescriptor));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_editAccommodation_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setName(new Name(\"Ice Lodge\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseSuccess(parser, \" -accommodation 1 n/Ice Lodge\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditAccommodationCommand(INDEX_FIRST, editDescriptor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_editTravelPlan_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setName(new Name(\"Iceland\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseSuccess(parser, \" -travelplan 1 n/Iceland\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditTravelPlanCommand(INDEX_FIRST, editDescriptor));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_editMultipleFields_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor editDescriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setName(new Name(\"Ice Skating\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editDescriptor.setCost(new Cost(\"20\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseSuccess(parser, \" -activity 1 n/Ice Skating c/20\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new EditActivityCommand(INDEX_FIRST, editDescriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /** Missing Index*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_missingIndex_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseFailure(parser, \"edit -activity i/2\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                EditActivityCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /** Edit type unspecified*/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_missingEditType_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseFailure(parser, \"edit 1 i/2\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_incorrectFieldSpecified_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseFailure(parser, \"edit -friend 1 i/2\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_invalidFormat_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEditParseFailure(parser, \"edit friend 1 n/alice\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 50,
      "lyeyixian": 5,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GoToCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseGoToFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseGoToSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_TRAVELPLAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.GoToCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class GoToCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private GoToCommandParser parser \u003d new GoToCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void parse_validTravelPlanArgs_returnsGoToCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertParseGoToSuccess(parser, \" -travelplan 1\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new GoToCommand(INDEX_FIRST_TRAVELPLAN, true));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void parse_validWishlistArgs_returnsGoToCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertParseGoToSuccess(parser, \" -wishlist\", new GoToCommand(false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void parse_missingTravelPlanIndex_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertParseGoToFailure(parser, \" -travelplan\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_MISSING_INDEX));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void parse_redundantWishlistArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertParseGoToFailure(parser, \" -wishlist 1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertParseGoToFailure(parser, \"1\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void parse_invalidDirectoryType_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertParseGoToFailure(parser, \" -activity 1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "lyeyixian": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ShowCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertShowParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertShowParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validArgs_returnsShowCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertShowParseSuccess(parser, \" -activity\", new ShowCommand(\"activity\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertShowParseFailure(parser, \" -activity asd\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertSortParserFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertSortParserSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortAccommodationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortActivityCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.command.sort.SortFriendCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validArgs_returnsSortActivityCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserSuccess(parser, \" -activity cost\", new SortActivityCommand(\"cost\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_invalidArgsActivity_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserFailure(parser, \" -activity cost cost\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validArgs_returnsSortAccommodationCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserSuccess(parser, \" -accommodation cost\", new SortAccommodationCommand(\"cost\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_invalidArgsAccommodation_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserFailure(parser, \" -accommodation cost cost\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_validArgs_returnsSortFriendCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserSuccess(parser, \" -friend mobile\", new SortFriendCommand(\"mobile\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_invalidArgsFriend_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserFailure(parser, \" -friend name name\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertSortParserFailure(parser, \" -activiti cost\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WanderlustFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertFindParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertFindParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class WanderlustFindCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\"); //find activity"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseSuccess(parser, \"find -activity foo bar baz\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(keywords), ParserUtil.ACTIVITY_INDEX));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findFriend_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"tom\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseSuccess(parser, \"find -friend tom\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(keywords), ParserUtil.FRIEND_INDEX));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findAccommodation_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"inn\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseSuccess(parser, \"find -accommodation inn\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(keywords), ParserUtil.ACCOMMODATION_INDEX));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findActivity_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"skating\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseSuccess(parser, \"find -activity skating\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(keywords), ParserUtil.ACTIVITY_INDEX));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findMultipleKeyword_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"skating\", \"eating\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseSuccess(parser, \"find -activity skating eating\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(keywords), ParserUtil.ACTIVITY_INDEX));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findActivityMissingKeyword_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        FindCommand validCommand \u003d new FindCommand(new NameContainsKeywordsPredicate(keywords),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                ParserUtil.ACTIVITY_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            Assertions.assertFalse(validCommand.equals(new FindCommandParser().parse(\"find -activity\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            System.out.println(\"Invalid input\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findMissingType_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String missingTypeInput \u003d \"find ice\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedErrorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseFailure(parser, missingTypeInput, expectedErrorMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findMissingDash_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String invalidInput \u003d \"find activity foo bar baz\"; //missing dash"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedErrorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseFailure(parser, invalidInput, expectedErrorMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void parse_findInvalidInputFormat_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String invalidInput \u003d \"find\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expectedErrorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MISSING_KEYWORDS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFindParseFailure(parser, invalidInput, expectedErrorMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WanderlustParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_TRAVELPLAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddActivityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteActivityCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditActivityCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.testutil.ActivityUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class WanderlustParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustParser wanderlustParser \u003d new WanderlustParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity activity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        AddActivityCommand command \u003d (AddActivityCommand) wanderlustParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .parseCommand(ActivityUtil.getAddCommand(activity));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Assertions.assertTrue(new AddActivityCommand(activity).equals(command));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(wanderlustParser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(wanderlustParser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        DeleteActivityCommand command \u003d (DeleteActivityCommand) wanderlustParser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" -activity \" + INDEX_FIRST_TRAVELPLAN.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(new DeleteActivityCommand(INDEX_FIRST_TRAVELPLAN), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //checks if commands are equal"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        EditDescriptor descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(new Name(\"Change name\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        EditActivityCommand command \u003d (EditActivityCommand) wanderlustParser.parseCommand(EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                + \" -activity \" + INDEX_FIRST_TRAVELPLAN.getOneBased() + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                + ActivityUtil.getNewEditActivityDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(new EditActivityCommand(INDEX_FIRST_TRAVELPLAN, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(wanderlustParser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(wanderlustParser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\"); //find activity"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FindCommand command \u003d (FindCommand) wanderlustParser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                FindCommand.COMMAND_WORD + \" -\" + Activity.TPO_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords), 0), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(wanderlustParser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(wanderlustParser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            -\u003e wanderlustParser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e wanderlustParser"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 6,
      "lyeyixian": 28,
      "jiaweiteo": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.BOSTON_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.testutil.builders.TravelPlannerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(new TravelPlanner(), new TravelPlanner(modelManager.getTravelPlanner()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefs.setTravelPlannerFilePath(Paths.get(\"travel/planner/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefs.setTravelPlannerFilePath(Paths.get(\"new/travel/planner/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTravelPlannerFilePath(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath_validPath_setsTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Path path \u003d Paths.get(\"travel/planner/file/path\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelManager.setTravelPlannerFilePath(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(path, modelManager.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTravelPlan(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_travelPlanNotInTravelPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(modelManager.hasTravelPlan(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_travelPLanInTravelPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelManager.addTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(modelManager.hasTravelPlan(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void getFilteredTravelPlanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .getFilteredTravelPlanList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner travelPlanner \u003d new TravelPlannerBuilder().withTravelPlan(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .withTravelPlan(BOSTON_TRIP)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner differentTravelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelManager \u003d new ModelManager(travelPlanner, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(travelPlanner, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // different travelPlanner -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTravelPlanner, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelManager.deleteTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelPlanner, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelManager.addTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        differentUserPrefs.setTravelPlannerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelPlanner, differentUserPrefs)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 35,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TravelPlannerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.exceptions.DuplicateTravelPlanException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlannerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final TravelPlanner travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(Collections.emptyList(), travelPlanner.getObservableTravelPlanList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(Collections.emptyList(), travelPlanner.getObservableWishlist());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void constructor_withValidReadOnlyTravelPlanner() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner newData \u003d getTypicalTravelPlanner();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner newTravelPlanner \u003d new TravelPlanner(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(newData, newTravelPlanner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPlanner.resetData(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData_withValidReadOnlyTravelPlanner_replacesData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner newData \u003d getTypicalTravelPlanner();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(newData, travelPlanner);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData_withDuplicateTravelPlans_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // Two travel plans with the same identity fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .withActivityList(getTypicalActivityList(2))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        List\u003cTravelPlan\u003e newTravelPlans \u003d Arrays.asList(AUSTRALIA_TRIP, editedAustraliaTrip);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlannerStub newData \u003d new TravelPlannerStub(newTravelPlans);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e travelPlanner.resetData(newData));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPlanner.hasTravelPlan(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPlanner.hasActivity(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_travelPlanNotInTravelPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(travelPlanner.hasTravelPlan(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasActivity_activityNotInTravelPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(travelPlanner.hasActivity(ARCHERY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_travelPlanInTravelPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(travelPlanner.hasTravelPlan(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasActivity_activityInTravelPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addActivity(ARCHERY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(travelPlanner.hasActivity(ARCHERY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasTravelPlan_travelPlanWithSameIdentityFieldsInTravelPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .withActivityList(getTypicalActivityList(2))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(travelPlanner.hasTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void hasActivity_activityWithSameIdentityFieldsInTravelPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addActivity(ARCHERY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Activity editedArchery \u003d new ActivityBuilder(ARCHERY).withCost(ActivityBuilder.DEFAULT_COST).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(travelPlanner.hasActivity(editedArchery));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void getTravelPlanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlanner.getObservableTravelPlanList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void getWishlist_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlanner.getObservableWishlist().remove(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * A stub ReadOnlyTravelPlanner whose travel plan list and wishlist can violate interface constraints."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static class TravelPlannerStub implements ReadOnlyTravelPlanner {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        private final ObservableList\u003cTravelPlan\u003e travelPlans \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        private final ObservableList\u003cActivity\u003e wishlist \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlannerStub(Collection\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.travelPlans.setAll(travelPlans);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cTravelPlan\u003e getObservableTravelPlanList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return travelPlans;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cActivity\u003e getObservableWishlist() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return wishlist;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTravelPlannerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/accommodation/AccommodationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.ALICEHOTEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.BOBHOTEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AccommodationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void isSameAccommodation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(ALICEHOTEL.isSameAccommodation(ALICEHOTEL));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.isSameAccommodation(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different Cost and Location -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation editedAlice \u003d new AccommodationBuilder(ALICEHOTEL)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .withCost(\"10\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .withLocation(\"Not Alice\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(ALICEHOTEL.isSameAccommodation(editedAlice));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withName(\"Bob Hotel\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.isSameAccommodation(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation aliceCopy \u003d new AccommodationBuilder(ALICEHOTEL).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(ALICEHOTEL.equals(aliceCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(ALICEHOTEL.equals(ALICEHOTEL));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different Activity -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(BOBHOTEL));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withName(\"Adam\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different Cost -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withCost(\"10\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different Location -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withLocation(\"123 Pasir Ris Park\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withStartDate(\"2019-12-31\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withEndDate(\"2021-05-31\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(ALICEHOTEL.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 72,
      "jiaweiteo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/accommodation/UniqueAccommodationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.ALICEHOTEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.BOBHOTEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.exceptions.AccommodationNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.exceptions.DuplicateAccommodationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class UniqueAccommodationListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final UniqueAccommodationList uniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void contains_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccommodationList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void contains_accommodationNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertFalse(uniqueAccommodationList.contains(ALICEHOTEL));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void contains_accommodationInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(uniqueAccommodationList.contains(ALICEHOTEL));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void contains_accommodationWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withLocation(\"Not Alice\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertTrue(uniqueAccommodationList.contains(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void add_nullAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccommodationList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void add_duplicateAccommodation_throwsDuplicateAccommodationException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(DuplicateAccommodationException.class, () -\u003e uniqueAccommodationList.add(ALICEHOTEL));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_nullTargetAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodation(null, ALICEHOTEL));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_nullEditedAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodation(ALICEHOTEL, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_targetAccommodationNotInList_throwsAccommodationNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(AccommodationNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodation(ALICEHOTEL, ALICEHOTEL));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_editedAccommodationIsSameAccommodation_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.setAccommodation(ALICEHOTEL, ALICEHOTEL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        UniqueAccommodationList expectedUniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedUniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(expectedUniqueAccommodationList, uniqueAccommodationList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_editedAccommodationHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation editedAlice \u003d new AccommodationBuilder(ALICEHOTEL).withLocation(\"Not Alice\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.setAccommodation(ALICEHOTEL, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        UniqueAccommodationList expectedUniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedUniqueAccommodationList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(expectedUniqueAccommodationList, uniqueAccommodationList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_editedAccommodationHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.setAccommodation(ALICEHOTEL, BOBHOTEL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        UniqueAccommodationList expectedUniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedUniqueAccommodationList.add(BOBHOTEL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(expectedUniqueAccommodationList, uniqueAccommodationList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation_editedAccommodationHasNonUniqueIdentity_throwsDuplicateAccommodationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(BOBHOTEL);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(DuplicateAccommodationException.class, () -\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodation(ALICEHOTEL, BOBHOTEL));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void remove_nullAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccommodationList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void remove_accommodationDoesNotExist_throwsAccommodationNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(AccommodationNotFoundException.class, () -\u003e uniqueAccommodationList.remove(ALICEHOTEL));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void remove_existingAccommodation_removesAccommodation() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.remove(ALICEHOTEL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        UniqueAccommodationList expectedUniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(expectedUniqueAccommodationList, uniqueAccommodationList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations_nullUniqueAccommodationList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodations((UniqueAccommodationList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations_uniqueAccommodationList_replacesOwnListWithProvidedUniqueAccommodationList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        UniqueAccommodationList expectedUniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedUniqueAccommodationList.add(BOBHOTEL);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.setAccommodations(expectedUniqueAccommodationList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(expectedUniqueAccommodationList, uniqueAccommodationList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodations((List\u003cAccommodation\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.add(ALICEHOTEL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        List\u003cAccommodation\u003e accommodationList \u003d Collections.singletonList(BOBHOTEL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        uniqueAccommodationList.setAccommodations(accommodationList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        UniqueAccommodationList expectedUniqueAccommodationList \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        expectedUniqueAccommodationList.add(BOBHOTEL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(expectedUniqueAccommodationList, uniqueAccommodationList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations_listWithDuplicateAccommodations_throwsDuplicateAccommodationException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        List\u003cAccommodation\u003e listWithDuplicateAccommodations \u003d Arrays.asList(ALICEHOTEL, ALICEHOTEL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(DuplicateAccommodationException.class, () -\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.setAccommodations(listWithDuplicateAccommodations));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                uniqueAccommodationList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.THEMEPARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ActivityTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isSameActivity() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.isSameActivity(ZOO));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.isSameActivity(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different Cost -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withCost(\"10\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.isSameActivity(editedZoo));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withName(\"Singapore Mandai Bird Park\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.isSameActivity(editedZoo));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity zooCopy \u003d new ActivityBuilder(ZOO).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.equals(zooCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.equals(ZOO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Activity -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(THEMEPARK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withName(\"Park\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Cost -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withCost(\"10\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Location -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withLocation(\"123 Pasir Ris Park\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different level of importance -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withLevelOfImportance(\"1\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withDateTime(\"2020-12-31 12:00\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "jiaweiteo": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ImportanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ImportanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Importance(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidImportance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidImportance \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Importance(invalidImportance));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidImportance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null Importance number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Importance.isValidImportance(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid Importance numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"-91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"Importance\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"6\")); // out of range"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid Importance numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Importance.isValidImportance(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Importance.isValidImportance(\"2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Importance.isValidImportance(\"5\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/UniqueActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.THEMEPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class UniqueActivityListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(uniqueActivityList.contains(ZOO));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(uniqueActivityList.contains(ZOO));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_activityWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withLocation(ZOO.getLocation().getValue())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withName(ZOO.getName().getValue()).withDateTime(ZOO.getActivityDateTime().getDateTime()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(uniqueActivityList.contains(editedZoo));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void add_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void add_duplicateActivity_throwsDuplicateactivityException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e uniqueActivityList.add(ZOO));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_nullTargetActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(null, ZOO));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_nullEditedActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(ZOO, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_targetActivityNotInList_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(ActivityNotFoundException.class, () -\u003e uniqueActivityList.setActivity(ZOO, ZOO));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityIsSameActivity_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivity(ZOO, ZOO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withLocation(\"2020-10-10 12:00\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivity(ZOO, editedZoo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(editedZoo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivity(ZOO, THEMEPARK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityHasNonUniqueIdentity_throwsDuplicateactivityException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e uniqueActivityList.setActivity(ZOO, THEMEPARK));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove_activityDoesNotExist_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(ActivityNotFoundException.class, () -\u003e uniqueActivityList.remove(ZOO));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove_existingActivity_removesActivity() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.remove(ZOO);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_nullUniqueActivityList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((UniqueActivityList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_uniqueActivityList_replacesOwnListWithProvideduniqueActivityList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivities(expecteduniqueActivityList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((List\u003cActivity\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cActivity\u003e activityList \u003d Collections.singletonList(THEMEPARK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivities(activityList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_listWithDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cActivity\u003e listWithDuplicateActivities \u003d Arrays.asList(ZOO, ZOO);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(DuplicateActivityException.class, ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            -\u003e uniqueActivityList.setActivities(listWithDuplicateActivities));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            -\u003e uniqueActivityList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "jiaweiteo": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/CostTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class CostTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Cost(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidCost_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidCost \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Cost(invalidCost));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidCost() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null Cost number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(Cost.isValidCost(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid Cost numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"-91\")); // negative cost"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"Cost\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid Cost numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Cost.isValidCost(\"911\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Cost.isValidCost(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(Cost.isValidCost(\"124293842033123\")); // long Cost numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 37,
      "lyeyixian": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null Location"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid Locationes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid Locationes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Zoo\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Zoo Park\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Keywords match Cost, Location and Date, Level of Importance, but does not match name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withName(\"Hello\").withCost(\"100\").withLevelOfImportance(\"3\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .withLocation(\"124 Mandai Road\").withDateTime(\"2020-10-10 12:00\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 11,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/friend/FriendTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_MOBILE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_MOBILE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_PASSPORT_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_PASSPORT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.typicals.TypicalFriends;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "class FriendTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final Friend testFriend \u003d TypicalFriends.AMY; //test toString and public getter methods with valid Friend"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    // should return true if identity field (passport) is the same"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void isSameFriend() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(TypicalFriends.ALICE.isSameFriend(TypicalFriends.ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(TypicalFriends.ALICE.isSameFriend(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend editedAlice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different passport -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(TypicalFriends.ALICE.isSameFriend(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name with different mobile and passport -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withMobile(VALID_MOBILE_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(TypicalFriends.ALICE.isSameFriend(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same name, same passport with different mobile -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withMobile(VALID_MOBILE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(TypicalFriends.ALICE.isSameFriend(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same mobile, different passport -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(TypicalFriends.ALICE.isSameFriend(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different name, different mobile, same passport -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withName(VALID_NAME_BOB).withMobile(VALID_MOBILE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(TypicalFriends.ALICE.isSameFriend(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same name, same mobile, same passport -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(TypicalFriends.ALICE.isSameFriend(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //test if two friends have the same identity and data fields"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(TypicalFriends.ALICE, TypicalFriends.ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertNotEquals(null, TypicalFriends.ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Friend editedAlice;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertNotEquals(TypicalFriends.ALICE, editedAlice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same name with different mobile and passport -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withMobile(VALID_MOBILE_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertNotEquals(TypicalFriends.ALICE, editedAlice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same name, same passport with different mobile -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withMobile(VALID_MOBILE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertNotEquals(TypicalFriends.ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same name, same mobile, different passport -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertNotEquals(TypicalFriends.ALICE, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // same name, same mobile, same passport -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        editedAlice \u003d new FriendBuilder(TypicalFriends.ALICE).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(TypicalFriends.ALICE, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String expected \u003d \"Amy Choo\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                + \"Passport number: E1234567T\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                + \"Mobile phone: 81234567\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(testFriend.toString(), expected);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void getNameAsString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(\"Amy Choo\", testFriend.getNameAsString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Name compare \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(compare, testFriend.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void getPassport() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Passport compare \u003d new Passport(VALID_PASSPORT_AMY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(compare, testFriend.getPassport());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void getMobile() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        Mobile compare \u003d new Mobile(VALID_MOBILE_AMY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(compare, testFriend.getMobile());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 119,
      "jeannetoh99": 11,
      "lyeyixian": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/friend/MobileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "class MobileTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Mobile(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String invalidMobile \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Mobile(invalidMobile));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void isValidMobile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Mobile.isValidMobile(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\"9138\")); // less than 8 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Mobile.isValidMobile(\"124293842033123\")); // long mobile numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // valid mobile numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(Mobile.isValidMobile(\"86249932\")); // exactly 8 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(Mobile.isValidMobile(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/friend/PassportTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": "class PassportTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Passport(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void constructor_invalidPassport_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        String invalidPassport \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Passport(invalidPassport));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    void isValidPassport() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Passport.isValidPassport(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // invalid passport numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"S9138\")); // less than 7 digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"passport\")); // too many character and absent numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"S9011p04\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"S312 1534\")); // spaces within passport number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"S124293842033123\")); // more than 7 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(Passport.isValidPassport(\"1242A93842033123\")); //character is not at the start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        // valid passport numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(Passport.isValidPassport(\"E6249932A\")); // [E] + 7 numbers + [A-Z]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertTrue(Passport.isValidPassport(\"E3121534B\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 39,
      "lyeyixian": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/friend/UniqueFriendListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "underthehai"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.exceptions.DuplicateFriendException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.exceptions.FriendNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": "class UniqueFriendListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private final UniqueFriendList uniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void contains_nullFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void contains_friendNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertFalse(uniqueFriendList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void contains_friendInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(uniqueFriendList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void contains_friendWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend editedAlice \u003d new FriendBuilder().withPassport(ALICE.getPassport().getValue())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withMobile(ALICE.getMobile().getValue()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertTrue(uniqueFriendList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void add_nullFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void add_duplicateFriend_throwsDuplicateFriendException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(DuplicateFriendException.class, () -\u003e uniqueFriendList.add(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_nullTargetFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.setFriend(null, ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_nullEditedFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.setFriend(ALICE, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_targetFriendNotInList_throwsFriendNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(FriendNotFoundException.class, () -\u003e uniqueFriendList.setFriend(ALICE, ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_editedFriendIsSameFriend_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.setFriend(ALICE, ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        UniqueFriendList expectedUniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedUniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedUniqueFriendList, uniqueFriendList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_editedFriendHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend editedAlice \u003d new FriendBuilder(ALICE).withMobile(BOB.getMobile().getValue())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "underthehai"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.setFriend(ALICE, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        UniqueFriendList expectedUniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedUniqueFriendList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedUniqueFriendList, uniqueFriendList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_editedFriendHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.setFriend(ALICE, BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        UniqueFriendList expectedUniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedUniqueFriendList.add(BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedUniqueFriendList, uniqueFriendList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriend_editedFriendHasNonUniqueIdentity_throwsDuplicateFriendException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(DuplicateFriendException.class, () -\u003e uniqueFriendList.setFriend(ALICE, BOB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void remove_nullFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void remove_friendDoesNotExist_throwsFriendNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(FriendNotFoundException.class, () -\u003e uniqueFriendList.remove(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void remove_existingFriend_removesFriend() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.remove(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        UniqueFriendList expectedUniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedUniqueFriendList, uniqueFriendList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends_nullUniqueFriendList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.setFriends((UniqueFriendList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends_uniqueFriendList_replacesOwnListWithProvidedUniqueFriendList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        UniqueFriendList expectedUniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedUniqueFriendList.add(BOB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.setFriends(expectedUniqueFriendList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedUniqueFriendList, uniqueFriendList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFriendList.setFriends((List\u003cFriend\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cFriend\u003e friendList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        uniqueFriendList.setFriends(friendList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        UniqueFriendList expectedUniqueFriendList \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        expectedUniqueFriendList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertEquals(expectedUniqueFriendList, uniqueFriendList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void setFriends_listWithDuplicateFriends_throwsDuplicateFriendException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        List\u003cFriend\u003e listWithDuplicateFriends \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(DuplicateFriendException.class, () -\u003e uniqueFriendList.setFriends(listWithDuplicateFriends));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "underthehai"
        },
        "content": "            -\u003e uniqueFriendList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 167,
      "jeannetoh99": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/AccommodationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_COST_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.ALICEHOTEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.getTypicalAccommodationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.exceptions.DuplicateAccommodationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class AccommodationListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final AccommodationList accommodationList \u003d new AccommodationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(Collections.emptyList(), accommodationList.getObservableAccommodationList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accommodationList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData_withValidAccommodationList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationList newData \u003d getTypicalAccommodationList(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, accommodationList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateAccommodations_throwsDuplicateAccommodationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two accommodations with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Accommodation editedAliceHotel \u003d new AccommodationBuilder(ALICEHOTEL).withCost(VALID_COST_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cAccommodation\u003e newAccommodations \u003d Arrays.asList(ALICEHOTEL, editedAliceHotel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationListStub newData \u003d new AccommodationListStub(newAccommodations);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateAccommodationException.class, () -\u003e accommodationList.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_nullAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accommodationList.hasAccommodation(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_accommodationNotInAccommodationList_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(accommodationList.hasAccommodation(ALICEHOTEL));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_accommodationInAccommodationList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList.addAccommodation(ALICEHOTEL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(accommodationList.hasAccommodation(ALICEHOTEL));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_accommodationWithSameIdentityFieldsInAccommodationList_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList.addAccommodation(ALICEHOTEL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Accommodation editedAliceHotel \u003d new AccommodationBuilder(ALICEHOTEL).withCost(VALID_COST_B).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(accommodationList.hasAccommodation(editedAliceHotel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getAccommodationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                accommodationList.getObservableAccommodationList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * TODO:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyAccommodationList whose accommodations list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static class AccommodationListStub extends AccommodationList {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cAccommodation\u003e accommodations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationListStub(Collection\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.accommodations.setAll(accommodations);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cAccommodation\u003e getObservableAccommodationList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return accommodations;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 94,
      "lyeyixian": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/ActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(Collections.emptyList(), activityList.getObservableActivityList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityList.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidReadOnlyActivityList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityList newData \u003d getTypicalActivityList(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, activityList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two activities with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cActivity\u003e newActivities \u003d Arrays.asList(ZOO, editedZoo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityListStub newData \u003d new ActivityListStub(newActivities);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e activityList.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityList.hasActivity(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityNotInActivityList_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(activityList.hasActivity(ZOO));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityInActivityList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList.addActivity(ZOO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(activityList.hasActivity(ZOO));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e activityList.getObservableActivityList().remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyActivityList whose activities list can violate interface constraints."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static class ActivityListStub extends ActivityList {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityListStub(Collection\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.activities.setAll(activities);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cActivity\u003e getObservableActivityList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return activities;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 86,
      "lyeyixian": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/FriendListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.getTypicalFriendList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.exceptions.DuplicateFriendException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class FriendListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final FriendList friendList \u003d new FriendList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(Collections.emptyList(), friendList.getObservableFriendList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e friendList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidReadOnlyFriendList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendList newData \u003d getTypicalFriendList(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, friendList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateFriends_throwsDuplicateFriendException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two friends with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend editedAlice \u003d new FriendBuilder(ALICE).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cFriend\u003e newFriends \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendListStub newData \u003d new FriendListStub(newFriends);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateFriendException.class, () -\u003e friendList.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_nullFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e friendList.hasFriend(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_friendNotInFriendList_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(friendList.hasFriend(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_friendInFriendList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList.addFriend(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(friendList.hasFriend(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_friendWithSameIdentityFieldsInFriendList_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList.addFriend(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend editedAlice \u003d new FriendBuilder(ALICE).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(friendList.hasFriend(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getFriendList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e friendList.getObservableFriendList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyFriendList whose friends list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static class FriendListStub extends FriendList {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cFriend\u003e friends \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendListStub(Collection\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.friends.setAll(friends);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cFriend\u003e getObservableFriendList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return friends;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 94,
      "lyeyixian": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/TravelPlanTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACCOMMODATION_LIST_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACTIVITY_LIST_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_END_DATE_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_FRIEND_LIST_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_NAME_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_START_DATE_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.BOSTON_TRIP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlanTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan travelPlan \u003d new TravelPlanBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlan.getObservableFriendList().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlan.getObservableAccommodationList().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlan.getObservableActivityList().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void isSameTravelPlan() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.isSameTravelPlan(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same start date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_END_DATE_B)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_START_DATE_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same start date, same end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_START_DATE_B)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan australiaCopy \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.equals(australiaCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.equals(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(BOSTON_TRIP));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withStartDate(VALID_START_DATE_B).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_END_DATE_B).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different accommodation list -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different activity list -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withActivityList(VALID_ACTIVITY_LIST_B).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different friend list -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withFriendList(VALID_FRIEND_LIST_B).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 100,
      "lyeyixian": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/UniqueTravelPlanListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACCOMMODATION_LIST_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACTIVITY_LIST_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_FRIEND_LIST_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.BOSTON_TRIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.exceptions.DuplicateTravelPlanException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.exceptions.TravelPlanNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class UniqueTravelPlanListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueTravelPlanList uniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_travelPlanNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(uniqueTravelPlanList.contains(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_travelPlanInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(uniqueTravelPlanList.contains(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_travelPlanWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(uniqueTravelPlanList.contains(editedAustraliaTrip));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void add_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void add_duplicateTravelPlan_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e uniqueTravelPlanList.add(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_nullTargetTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.setTravelPlan(null, AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_nullEditedTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_targetTravelPlanNotInList_throwsTravelPlanNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(TravelPlanNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanIsSameTravelPlan_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanHasSameIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, editedAustraliaTrip);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(editedAustraliaTrip);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, BOSTON_TRIP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanHasNonUniqueIdentity_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, BOSTON_TRIP));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void remove_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.remove(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void remove_travelPlanDoesNotExist_throwsTravelPlanNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(TravelPlanNotFoundException.class, () -\u003e uniqueTravelPlanList.remove(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void remove_existingTravelPlan_removesTravelPlan() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.remove(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_nullUniqueTravelPlanList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlans((UniqueTravelPlanList) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_uniqueTravelPlanList_replacesOwnListWithProvidedUniqueTravelPlanList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlans(expectedUniqueTravelPlanList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.setTravelPlans((List\u003cTravelPlan\u003e) null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTravelPlan\u003e travelPlanList \u003d Collections.singletonList(BOSTON_TRIP);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlans(travelPlanList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_listWithDuplicateTravelPlans_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTravelPlan\u003e listWithDuplicateTravelPlans \u003d Arrays.asList(AUSTRALIA_TRIP, AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlans(listWithDuplicateTravelPlans));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/model/wishlist/WishlistTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.wishlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalWishlist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class WishlistTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Wishlist wishlist \u003d new Wishlist();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(Collections.emptyList(), wishlist.getObservableActivityList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor_withValidWishlist_setsData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Wishlist wishlist \u003d new Wishlist(getTypicalWishlist());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(wishlist, getTypicalWishlist());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Wishlist(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wishlist.resetData(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidWishlist_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Wishlist newData \u003d getTypicalWishlist();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, wishlist);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two activities with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ARCHERY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cActivity\u003e newActivities \u003d Arrays.asList(ARCHERY, editedZoo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        WishlistStub newData \u003d new WishlistStub(newActivities);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e wishlist.resetData(newData));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wishlist.hasActivity(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityNotInWishlist_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(wishlist.hasActivity(ARCHERY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityInWishlist_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.addActivity(ARCHERY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(wishlist.hasActivity(ARCHERY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_activityInWishlist_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.addTpo(ARCHERY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(wishlist.contains(ARCHERY));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_activityNotInWishlist_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(wishlist.contains(ARCHERY));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_nonActivityTpo_throwsAssertionError() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e wishlist.contains(ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getWishlist_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wishlist.getObservableActivityList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivity_activityInWishlist_editsActivity() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.addActivity(ARCHERY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder(ARCHERY).withCost(\"10\").build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.setActivity(ARCHERY, editedActivity);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(wishlist.getObservableActivityList().contains(editedActivity));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(wishlist.getObservableActivityList().contains(ARCHERY));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyWishlist whose activities list can violate interface constraints."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static class WishlistStub extends Wishlist {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        WishlistStub(Collection\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.activities.setAll(activities);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        public ObservableList\u003cActivity\u003e getObservableActivityList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return activities;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 122,
      "lyeyixian": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAccommodationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAccommodation.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.ALICEHOTEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedAccommodationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"20200202\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"20200203\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_COST \u003d \"-23\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_NAME \u003d ALICEHOTEL.getName().getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_START_DATE \u003d ALICEHOTEL.getStartDate().getDate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_END_DATE \u003d ALICEHOTEL.getEndDate().getDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_COST \u003d ALICEHOTEL.getCost().getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_LOCATION \u003d ALICEHOTEL.getLocation().getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_validAccommodationDetails_returnsAccommodation() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d new JsonAdaptedAccommodation(ALICEHOTEL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(ALICEHOTEL, accommodation.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(INVALID_NAME, VALID_START_DATE, VALID_END_DATE, VALID_COST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(null, VALID_START_DATE, VALID_END_DATE, VALID_COST, VALID_LOCATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, INVALID_START_DATE, VALID_END_DATE, VALID_COST,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d WanderlustDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, null, VALID_END_DATE, VALID_COST, VALID_LOCATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, WanderlustDate.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, VALID_START_DATE, INVALID_END_DATE, VALID_COST,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d WanderlustDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, VALID_START_DATE, null, VALID_COST, VALID_LOCATION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, WanderlustDate.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, VALID_START_DATE, VALID_END_DATE, INVALID_COST,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Cost.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, VALID_START_DATE, VALID_END_DATE, null,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, VALID_START_DATE, VALID_END_DATE, VALID_COST,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        INVALID_LOCATION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedAccommodation accommodation \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedAccommodation(VALID_NAME, VALID_START_DATE, VALID_END_DATE, VALID_COST, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, accommodation::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedActivityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.storage.JsonAdaptedActivity.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedActivityTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_COST \u003d \"-23\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_IMPORTANCE \u003d \"9\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"2020020214:20\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_NAME \u003d ARCHERY.getName().getValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_LOCATION \u003d ARCHERY.getLocation().getValue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_COST \u003d ARCHERY.getCost().getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_IMPORTANCE \u003d ARCHERY.getLevelOfImportance().getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d ARCHERY.getActivityDateTime().getDateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_validActivityDetails_returnsActivity() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(ARCHERY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(ARCHERY, activity.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(INVALID_NAME, VALID_LOCATION, VALID_COST, VALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(null, VALID_LOCATION, VALID_COST, VALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, INVALID_LOCATION, VALID_COST, VALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, null, VALID_COST, VALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, VALID_LOCATION, INVALID_COST, VALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Cost.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, VALID_LOCATION, null, VALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidImportance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, VALID_LOCATION, VALID_COST, INVALID_IMPORTANCE, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Importance.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullImportance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, VALID_LOCATION, VALID_COST, null, VALID_DATE_TIME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Importance.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, VALID_LOCATION, VALID_COST, VALID_IMPORTANCE, INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d WanderlustDateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedActivity(VALID_NAME, VALID_LOCATION, VALID_COST, VALID_IMPORTANCE, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, WanderlustDateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFriendTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFriend.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedFriendTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_PASSPORT \u003d \"fddf934734\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+39347384\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_NAME \u003d ALICE.getName().getValue();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_PASSPORT \u003d ALICE.getPassport().getValue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_PHONE \u003d ALICE.getMobile().getValue();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_validFriendDetails_returnsFriend() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(ALICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(ALICE, friend.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(INVALID_NAME, VALID_PASSPORT, VALID_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, friend::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(null, VALID_PASSPORT, VALID_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, friend::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidPassport_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(VALID_NAME, INVALID_PASSPORT, VALID_PHONE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Passport.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, friend::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullPassport_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(VALID_NAME, null, VALID_PHONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Passport.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, friend::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(VALID_NAME, VALID_PASSPORT, INVALID_PHONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Mobile.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, friend::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedFriend friend \u003d new JsonAdaptedFriend(VALID_NAME, VALID_PASSPORT, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Mobile.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, friend::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "lyeyixian": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTravelPlanTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTravelPlan.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.ALICEHOTEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedTravelPlanTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"20200202\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"20200203\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_ACTIVITY_NAME \u003d \"ASDF#$%\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_ACCOMMODATION_NAME \u003d \"ASDF^%\u0026\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final String INVALID_FRIEND_NAME \u003d \"!@#ADSF\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_NAME \u003d AUSTRALIA_TRIP.getName().getValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_START_DATE \u003d AUSTRALIA_TRIP.getStartDate().getDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_END_DATE \u003d AUSTRALIA_TRIP.getEndDate().getDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final List\u003cJsonAdaptedActivity\u003e VALID_ACTIVITIES \u003d AUSTRALIA_TRIP.getObservableActivityList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACTIVITY_LOCATION \u003d ARCHERY.getLocation().getValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACTIVITY_COST \u003d ARCHERY.getCost().getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACTIVITY_IMPORTANCE \u003d ARCHERY.getLevelOfImportance().getValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACTIVITY_DATE_TIME \u003d ARCHERY.getActivityDateTime().getDateTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final List\u003cJsonAdaptedAccommodation\u003e VALID_ACCOMMODATIONS \u003d AUSTRALIA_TRIP"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .getObservableAccommodationList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .map(JsonAdaptedAccommodation::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACCOMMODATION_START_DATE \u003d ALICEHOTEL.getStartDate().getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACCOMMODATION_END_DATE \u003d ALICEHOTEL.getEndDate().getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACCOMMODATION_COST \u003d ALICEHOTEL.getCost().getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_ACCOMMODATION_LOCATION \u003d ALICEHOTEL.getLocation().getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final List\u003cJsonAdaptedFriend\u003e VALID_FRIENDS \u003d AUSTRALIA_TRIP.getObservableFriendList().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .map(JsonAdaptedFriend::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_FRIEND_PASSPORT \u003d ALICE.getPassport().getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String VALID_FRIEND_PHONE \u003d ALICE.getMobile().getValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_validTravelPlanDetails_returnsTravelPlan() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d new JsonAdaptedTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(AUSTRALIA_TRIP, travelPlan.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedTravelPlan(INVALID_NAME, VALID_START_DATE, VALID_END_DATE, VALID_ACTIVITIES,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, travelPlan::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d new JsonAdaptedTravelPlan(null, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                VALID_ACTIVITIES, VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, travelPlan::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedTravelPlan(VALID_NAME, INVALID_START_DATE, VALID_END_DATE, VALID_ACTIVITIES,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d WanderlustDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, travelPlan::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d new JsonAdaptedTravelPlan(VALID_NAME, null, VALID_END_DATE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                VALID_ACTIVITIES, VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedTravelPlan.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                WanderlustDate.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, travelPlan::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedTravelPlan(VALID_NAME, VALID_START_DATE, INVALID_END_DATE, VALID_ACTIVITIES,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d WanderlustDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, travelPlan::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d new JsonAdaptedTravelPlan(VALID_NAME, VALID_START_DATE, null,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                VALID_ACTIVITIES, VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedTravelPlan.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                WanderlustDate.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, travelPlan::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidActivities_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        List\u003cJsonAdaptedActivity\u003e invalidActivities \u003d new ArrayList\u003c\u003e(VALID_ACTIVITIES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        invalidActivities.add(new JsonAdaptedActivity(INVALID_ACTIVITY_NAME, VALID_ACTIVITY_LOCATION,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                VALID_ACTIVITY_COST, VALID_ACTIVITY_IMPORTANCE, VALID_ACTIVITY_DATE_TIME));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedTravelPlan(VALID_NAME, VALID_START_DATE, VALID_END_DATE, invalidActivities,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_ACCOMMODATIONS, VALID_FRIENDS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, travelPlan::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidAccommodations_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        List\u003cJsonAdaptedAccommodation\u003e invalidAccommodations \u003d new ArrayList\u003c\u003e(VALID_ACCOMMODATIONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        invalidAccommodations.add(new JsonAdaptedAccommodation(INVALID_ACCOMMODATION_NAME,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                VALID_ACCOMMODATION_START_DATE, VALID_ACCOMMODATION_END_DATE, VALID_ACCOMMODATION_COST,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                VALID_ACCOMMODATION_LOCATION));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedTravelPlan(VALID_NAME, VALID_START_DATE, VALID_END_DATE, VALID_ACTIVITIES,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        invalidAccommodations, VALID_FRIENDS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, travelPlan::toModelType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidFriends_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        List\u003cJsonAdaptedFriend\u003e invalidFriends \u003d new ArrayList\u003c\u003e(VALID_FRIENDS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        invalidFriends.add(new JsonAdaptedFriend(INVALID_FRIEND_NAME, VALID_FRIEND_PASSPORT, VALID_FRIEND_PHONE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonAdaptedTravelPlan travelPlan \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                new JsonAdaptedTravelPlan(VALID_NAME, VALID_START_DATE, VALID_END_DATE, VALID_ACTIVITIES,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                        VALID_ACCOMMODATIONS, invalidFriends);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, travelPlan::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 13,
      "lyeyixian": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTravelPlannerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.typicals.TypicalTravelPlans;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonSerializableTravelPlannerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            \"JsonSerializableTravelPlannerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Path TYPICAL_TRAVEL_PLANS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .resolve(\"typicalTravelPlansTravelPlanner.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Path INVALID_TRAVEL_PLAN_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .resolve(\"invalidTravelPlanTravelPlanner.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Path DUPLICATE_TRAVEL_PLAN_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .resolve(\"duplicateTravelPlanTravelPlanner.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_typicalTravelPlansFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonSerializableTravelPlanner dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TRAVEL_PLANS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                JsonSerializableTravelPlanner.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner travelPlannerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner typicalTravelPlansTravelPlanner \u003d TypicalTravelPlans.getTypicalTravelPlanner();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(travelPlannerFromFile, typicalTravelPlansTravelPlanner);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_invalidTravelPlanFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonSerializableTravelPlanner dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TRAVEL_PLAN_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                JsonSerializableTravelPlanner.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonSerializableTravelPlanner dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TRAVEL_PLAN_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                JsonSerializableTravelPlanner.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTravelPlanner.MESSAGE_DUPLICATE_TRAVEL_PLAN,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "lyeyixian": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTravelPlannerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.SINGAPORE_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonTravelPlannerStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonTravelPlannerStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void readTravelPlanner_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTravelPlanner(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new JsonTravelPlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .readTravelPlanner(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertFalse(readTravelPlanner(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTravelPlanner(\"notJsonFormatTravelPlanner.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void readTravelPlanner_invalidTravelPlanTravelPlanner_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                readTravelPlanner(\"invalidTravelPlanTravelPlanner.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void readTravelPlanner_invalidAndValidTravelPlanTravelPlanner_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                readTravelPlanner(\"invalidAndValidTravelPlanTravelPlanner.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void readAndSaveTravelPlanner_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTravelPlanner.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner original \u003d getTypicalTravelPlanner();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonTravelPlannerStorage jsonTravelPlannerStorage \u003d new JsonTravelPlannerStorage(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        jsonTravelPlannerStorage.saveTravelPlanner(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ReadOnlyTravelPlanner readBack \u003d jsonTravelPlannerStorage.readTravelPlanner(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(original, new TravelPlanner(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // Modify data, overwrite existing file, and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        original.addTravelPlan(SINGAPORE_TRIP);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        original.removeTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        jsonTravelPlannerStorage.saveTravelPlanner(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        readBack \u003d jsonTravelPlannerStorage.readTravelPlanner(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(original, new TravelPlanner(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        original.addActivity(ZOO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        original.removeActivity(ARCHERY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        jsonTravelPlannerStorage.saveTravelPlanner(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        readBack \u003d jsonTravelPlannerStorage.readTravelPlanner(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(original, new TravelPlanner(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        original.addTravelPlan(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        jsonTravelPlannerStorage.saveTravelPlanner(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        readBack \u003d jsonTravelPlannerStorage.readTravelPlanner().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(original, new TravelPlanner(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner_nullTravelPlanner_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTravelPlanner(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Saves {@code travelPlanner} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            new JsonTravelPlannerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    .saveTravelPlanner(travelPlanner, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTravelPlanner(new TravelPlanner(), null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefs.setTravelPlannerFilePath(Paths.get(\"travelplanner.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 5,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.getTypicalTravelPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonTravelPlannerStorage travelPlannerStorage \u003d new JsonTravelPlannerStorage(getTempFilePath(\"tp\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage((getTempFilePath(\"prefs\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        storageManager \u003d new StorageManager(travelPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // Need Help Here!!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void travelPlannerReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "         * {@link JsonTravelPlannerStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTravelPlannerStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner original \u003d getTypicalTravelPlanner();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        storageManager.saveTravelPlanner(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ReadOnlyTravelPlanner retrieved \u003d storageManager.readTravelPlanner().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertEquals(original, new TravelPlanner(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        assertNotNull(storageManager.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 16,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActivityUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.add.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ActivityUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns an add command string for adding the {@code activity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static String getAddCommand(Activity activity) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" -activity \" + getActivityDetails(activity);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the part of command string for the given {@code activity}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static String getActivityDetails(Activity activity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        sb.append(PREFIX_NAME + activity.getName().getValue() + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        sb.append(PREFIX_COST + activity.getCost().getValue() + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        sb.append(PREFIX_LOCATION + activity.getLocation().getValue() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        sb.append(PREFIX_DATETIME + activity.getActivityDateTime().getDateTime() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        sb.append(PREFIX_IMPORTANCE + activity.getLevelOfImportance().getValue() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the part of command string for the given {@code EditactivityDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static String getEditActivityDescriptorDetails(EditDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        descriptor.getCost().ifPresent(cost -\u003e sb.append(PREFIX_COST).append(cost.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION).append(location.getValue())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        descriptor.getActivityDateTime().ifPresent(date -\u003e sb.append(PREFIX_DATETIME).append(date.getDateTime())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        descriptor.getLevelOfImportance().ifPresent(importance -\u003e sb.append(PREFIX_DATETIME)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(importance.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns edited activity for editActivity Command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param descriptor EditDescriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return string for edit command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static String getNewEditActivityDescriptorDetails(EditDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 12,
      "jiaweiteo": 41,
      "lyeyixian": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConstructorUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.getTypicalAccommodationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.getTypicalFriendList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ConstructorUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_NAME_A \u003d \"Alice\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_NAME_B \u003d \"Bob\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_START_DATE_A \u003d \"2020-01-01\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_START_DATE_B \u003d \"2020-03-03\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_END_DATE_A \u003d \"2020-12-12\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_END_DATE_B \u003d \"2020-11-11\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PHONE_A \u003d \"94351253\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PHONE_B \u003d \"98765432\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PASSPORT_A \u003d \"A1234567\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PASSPORT_B \u003d \"B1234567\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_COST_A \u003d \"100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String VALID_COST_B \u003d \"255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final AccommodationList VALID_ACCOMMODATION_LIST_A \u003d getTypicalAccommodationList(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final AccommodationList VALID_ACCOMMODATION_LIST_B \u003d getTypicalAccommodationList(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ActivityList VALID_ACTIVITY_LIST_A \u003d getTypicalActivityList(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ActivityList VALID_ACTIVITY_LIST_B \u003d getTypicalActivityList(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final FriendList VALID_FRIEND_LIST_A \u003d getTypicalFriendList(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final FriendList VALID_FRIEND_LIST_B \u003d getTypicalFriendList(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 29,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAccommodationDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class EditAccommodationDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private EditDescriptor descriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder(EditDescriptor descriptor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.descriptor \u003d new EditDescriptor(descriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns an {@code EditAccommodationDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder(Accommodation accommodation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(accommodation.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setStartDate(accommodation.getStartDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setEndDate(accommodation.getEndDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setCost(accommodation.getCost());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setLocation(accommodation.getLocation());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAccommodationDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditAccommodationDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditAccommodationDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setCost(new Cost(cost));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditTravelPlanDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setStartDate(new WanderlustDate(startDate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditTravelPlanDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditAccommodationDescriptorBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setEndDate(new WanderlustDate(endDate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditDescriptor build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 75,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditActivityDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class EditActivityDescriptorBuilder extends EditDescriptor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private EditDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder(EditDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.descriptor \u003d new EditDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns an {@code EditActivityDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder(Activity activity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(activity.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setCost(activity.getCost());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setLevelOfImportance(activity.getLevelOfImportance());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setActivityDateTime(activity.getActivityDateTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setLocation(activity.getLocation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setCost(new Cost(cost));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder withImportance(String importance) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setLevelOfImportance(new Importance(importance));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditActivityDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setActivityDateTime(new WanderlustDateTime(dateTime));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 77,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFriendDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class EditFriendDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private EditDescriptor descriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditFriendDescriptorBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditFriendDescriptorBuilder(EditDescriptor descriptor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.descriptor \u003d new EditDescriptor(descriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns an {@code EditFriendDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditFriendDescriptorBuilder(Friend friend) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(friend.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setMobile(friend.getMobile());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setPassport(friend.getPassport());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFriendDescriptor} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditFriendDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditFriendDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditFriendDescriptorBuilder withMobile(String mobile) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setMobile(new Mobile(mobile));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditFriendDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditFriendDescriptorBuilder withPassport(String passport) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setPassport(new Passport(passport));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditDescriptor build() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 57,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTravelPlanDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.logic.command.edit.EditDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class EditTravelPlanDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private EditDescriptor descriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditTravelPlanDescriptorBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditTravelPlanDescriptorBuilder(EditDescriptor descriptor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.descriptor \u003d new EditDescriptor(descriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns an {@code EditTravelPlanDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditTravelPlanDescriptorBuilder(TravelPlan tp) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor \u003d new EditDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(tp.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setStartDate(tp.getStartDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setEndDate(tp.getEndDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTravelPlanDescriptor} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditTravelPlanDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditTravelPlanDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditTravelPlanDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setStartDate(new WanderlustDate(startDate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditTravelPlanDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditTravelPlanDescriptorBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        descriptor.setEndDate(new WanderlustDate(endDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditDescriptor build() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 57,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/AccommodationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class AccommodationBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Barry\u0027s Farmhouse\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2021-05-10\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"2021-05-11\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"100 Acre Woods\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private WanderlustDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private WanderlustDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Creates a {@code AccommodationBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        startDate \u003d new WanderlustDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        endDate \u003d new WanderlustDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Initializes the AccommodationBuilder with the data of {@code AccommodationToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder(Accommodation accommodationToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        name \u003d accommodationToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        location \u003d accommodationToCopy.getLocation();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        cost \u003d accommodationToCopy.getCost();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        startDate \u003d accommodationToCopy.getStartDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        endDate \u003d accommodationToCopy.getEndDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Name} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code startDate} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.startDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code endDate} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.endDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Cost} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Sets the {@code Location} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Accommodation build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Accommodation(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/ActivityBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Archery\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"33 Spring Valley\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"100\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_LEVELOFIMPORTANCE \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String DEFAULT_ACTIVITYDATETIME \u003d \"2021-10-10 11:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Importance levelOfImportance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDateTime activityDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code ActivityBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        levelOfImportance \u003d new Importance(DEFAULT_LEVELOFIMPORTANCE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityDateTime \u003d new WanderlustDateTime(DEFAULT_ACTIVITYDATETIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Initializes the ActivityBuilder with the data of {@code ActivityToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder(Activity activityToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d activityToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d activityToCopy.getLocation();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d activityToCopy.getCost();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        levelOfImportance \u003d activityToCopy.getLevelOfImportance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityDateTime \u003d activityToCopy.getActivityDateTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Location} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withLocation(String address) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.location \u003d new Location(address);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Cost} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code LevelOfImportance} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withLevelOfImportance(String importance) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.levelOfImportance \u003d new Importance(importance);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code activityDateTime} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withDateTime(String activityDateTime) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activityDateTime \u003d new WanderlustDateTime(activityDateTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Activity build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Activity(name, location, cost, levelOfImportance, activityDateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 89,
      "jiaweiteo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/FriendBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.friend.Mobile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * A utility class to help with building Friend objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class FriendBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String DEFAULT_PASSPORT \u003d \"E1233567A\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final String DEFAULT_MOBILE \u003d \"85355255\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private Passport passport;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Mobile mobile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Creates a {@code FriendBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public FriendBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        passport \u003d new Passport(DEFAULT_PASSPORT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        mobile \u003d new Mobile(DEFAULT_MOBILE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Initializes the FriendBuilder with the data of {@code friendToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public FriendBuilder(Friend friendToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        name \u003d friendToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        passport \u003d friendToCopy.getPassport();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        mobile \u003d friendToCopy.getMobile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Sets the {@code Name} of the {@code Friend} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public FriendBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Sets the {@code Mobile} of the {@code Friend} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public FriendBuilder withMobile(String phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.mobile \u003d new Mobile(phone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     * Sets the {@code Passport} of the {@code Friend} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "underthehai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public FriendBuilder withPassport(String passport) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        this.passport \u003d new Passport(passport);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public Friend build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new Friend(name, passport, mobile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 58,
      "timjkong": 5,
      "jeannetoh99": 2,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/TravelPlanBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlanBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Trip to Hawaii\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2020-12-12\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"2020-12-25\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDate startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDate endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private AccommodationList accommodationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private FriendList friendList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {TravelPlanBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d new WanderlustDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d new WanderlustDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList \u003d new AccommodationList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList \u003d new FriendList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Initializes the TravelPlanBuilder with the data of {@code TravelPlanToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder(TravelPlan travelPlanToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d travelPlanToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d travelPlanToCopy.getStartDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d travelPlanToCopy.getEndDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activityList \u003d travelPlanToCopy.getActivityList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        friendList \u003d travelPlanToCopy.getFriendList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        accommodationList \u003d travelPlanToCopy.getAccommodationList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Name} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code startDate} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code endDate} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code ActivityList} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withActivityList(ActivityList activityList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code AccommodationList} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withAccommodationList(AccommodationList accommodationList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodationList \u003d accommodationList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code FriendList} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withFriendList(FriendList friendList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friendList \u003d friendList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlan build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new TravelPlan(name, startDate, endDate, activityList, accommodationList, friendList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 95,
      "lyeyixian": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/TravelPlannerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A utility class to help with building TravelPlanner objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " *     {@code TravelPlanner tp \u003d new TravelPlannerBuilder().withTravelPlan(\"Australia Trip\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlannerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private TravelPlanner travelPlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlannerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlannerBuilder(TravelPlanner travelPlanner) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlanner \u003d travelPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds a new {@code TravelPlan} to the {@code TravelPlanner} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlannerBuilder withTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalAccommodations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_COST_HOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_COST_INN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_END_DATE_HOME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_END_DATE_INN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LOCATION_HOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LOCATION_INN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_HOME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_INN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_START_DATE_HOME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_START_DATE_INN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TypicalAccommodations {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation ALICEHOTEL \u003d new AccommodationBuilder().withName(\"Alice Hotel\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-01-01\").withEndDate(\"2021-02-02\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"100\").withLocation(\"109 Alice Avenue\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation BOBHOTEL \u003d new AccommodationBuilder().withName(\"Hostel by Bob\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-06-06\").withEndDate(\"2021-06-07\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"200\").withLocation(\"9 Balestier Road\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation CARLHOTEL \u003d new AccommodationBuilder().withName(\"Carl\u0027s Farmhouse\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-05-05\").withEndDate(\"2021-07-07\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"300\").withLocation(\"999 Calihan Street\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation DANHOTEL \u003d new AccommodationBuilder().withName(\"Danny\u0027s Lodge\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-06-06\").withEndDate(\"2021-08-08\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"400\").withLocation(\"1 Den Street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation ELLEHOTEL \u003d new AccommodationBuilder().withName(\"Elle\u0027s\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-05-05\").withEndDate(\"2021-06-06\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"500\").withLocation(\"333 Elmo\u0027s World\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation FIONAHOTEL \u003d new AccommodationBuilder().withName(\"Fiona Hotel\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-06-06\").withEndDate(\"2021-07-07\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"600\").withLocation(\"Fall Home\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation GEORGEHOTEL \u003d new AccommodationBuilder().withName(\"George and Georgina\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-07-07\").withEndDate(\"2021-08-08\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"700\").withLocation(\"7 GeorgeTown\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Manually added - Accommodations\u0027 details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation HOME \u003d new AccommodationBuilder().withName(VALID_NAME_HOME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(VALID_START_DATE_HOME).withEndDate(VALID_END_DATE_HOME)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(VALID_COST_HOME).withLocation(VALID_LOCATION_HOME).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation INN \u003d new AccommodationBuilder().withName(VALID_NAME_INN)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(VALID_START_DATE_INN).withEndDate(VALID_END_DATE_INN)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(VALID_COST_INN).withLocation(VALID_LOCATION_INN).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TypicalAccommodations() {} // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an {@code AccommodationList} with a set of typical accommodations (either set 1 or set 2)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static AccommodationList getTypicalAccommodationList(int set) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (set !\u003d 1 \u0026\u0026 set !\u003d 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"getTypicalAccommodationList only takes in set 1 or 2 as argument.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cAccommodation\u003e accommodations \u003d set \u003d\u003d 1 ? getTypicalAccommodations1() : getTypicalAccommodations2();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationList al \u003d new AccommodationList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Accommodation accommodation : accommodations) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            al.addAccommodation(new AccommodationBuilder(accommodation).build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cAccommodation\u003e getTypicalAccommodations1() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICEHOTEL, BOBHOTEL, CARLHOTEL, DANHOTEL));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cAccommodation\u003e getTypicalAccommodations2() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ELLEHOTEL, FIONAHOTEL, GEORGEHOTEL));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 62,
      "lyeyixian": 11,
      "jiaweiteo": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalActivities.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_ACTIVITYDATETIME_SKI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_ACTIVITYDATETIME_ZOO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_COST_SKI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_COST_ZOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LEVELOFIMPORTANCE_SKI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LEVELOFIMPORTANCE_ZOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LOCATION_SKI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_LOCATION_ZOO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_SKI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_ZOO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TypicalActivities {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity ARCHERY \u003d new ActivityBuilder().withName(\"Archery\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withCost(\"100\").withLevelOfImportance(\"1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"92 Archery Avenue\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withDateTime(\"2021-05-05 09:00\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity BUNGEEJUMPING \u003d new ActivityBuilder().withName(\"Bungee Jumping\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withCost(\"225\").withLevelOfImportance(\"5\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"1 BungeeJump Gateway\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withDateTime(\"2021-06-06 14:00\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity CAMPING \u003d new ActivityBuilder().withName(\"Camping\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"10\").withLevelOfImportance(\"2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"100 Secret Woods\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withDateTime(\"2021-05-31 20:00\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity DONUTDATE \u003d new ActivityBuilder().withName(\"Donut Date\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"2\").withLevelOfImportance(\"1\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"Dunkin Donut Palace\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withDateTime(\"2021-06-02 11:00\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity ZOO \u003d new ActivityBuilder().withName(VALID_NAME_ZOO)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(VALID_COST_ZOO).withLevelOfImportance(VALID_LEVELOFIMPORTANCE_ZOO)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(VALID_LOCATION_ZOO)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(VALID_ACTIVITYDATETIME_ZOO).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity THEMEPARK \u003d new ActivityBuilder().withName(\"Universal Studios Singapore\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"80\").withLevelOfImportance(\"5\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"8 Sentosa Gateway\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withDateTime(\"2021-10-11 12:00\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity SKI \u003d new ActivityBuilder().withName(VALID_NAME_SKI)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(VALID_COST_SKI).withLevelOfImportance(VALID_LEVELOFIMPORTANCE_SKI)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(VALID_LOCATION_SKI)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(VALID_ACTIVITYDATETIME_SKI).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity HIKING \u003d new ActivityBuilder().withName(\"Treetop Walk\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"0\").withLevelOfImportance(\"2\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"601 Island Club Rd\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withDateTime(\"2021-06-10 12:00\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TypicalActivities() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code Wishlist} with all the typical activities."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Wishlist getTypicalWishlist() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Wishlist wl \u003d new Wishlist();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : getTypicalActivities1()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            wl.addActivity(activity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : getTypicalActivities2()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            wl.addActivity(activity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return wl;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an {@code ActivityList} with a set of typical activities (either set 1 or set 2)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static ActivityList getTypicalActivityList(int set) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (set !\u003d 1 \u0026\u0026 set !\u003d 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"getTypicalActivityList only takes in set 1 or 2 as argument.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cActivity\u003e activities \u003d set \u003d\u003d 1 ? getTypicalActivities1() : getTypicalActivities2();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityList al \u003d new ActivityList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : activities) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            al.addActivity(new ActivityBuilder(activity).build());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities1() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ARCHERY, BUNGEEJUMPING, CAMPING, DONUTDATE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities2() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ZOO, THEMEPARK, SKI, HIKING));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 79,
      "lyeyixian": 12,
      "jiaweiteo": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalFriends.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_MOBILE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_MOBILE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_PASSPORT_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_PASSPORT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "underthehai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "underthehai"
        },
        "content": " * A utility class containing a list of {@code Friend} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "underthehai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "underthehai"
        },
        "content": "public class TypicalFriends {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    //Friend"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final Friend ALICE \u003d new FriendBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E1234567A\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"94351253\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final Friend BENSON \u003d new FriendBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E1234567B\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"98765432\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final Friend CARL \u003d new FriendBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E1234567C\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"95352563\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final Friend DANIEL \u003d new FriendBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E1234567D\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"87652533\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend ELLE \u003d new FriendBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E1234567E\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"94822241\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend FIONA \u003d new FriendBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E7654321F\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"94822427\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend GEORGE \u003d new FriendBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E7654321G\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"94824142\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend HOON \u003d new FriendBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E7654321H\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"84824224\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend IDA \u003d new FriendBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withPassport(\"E7654321I\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(\"84821631\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Manually added - Friends\u0027 details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend AMY \u003d new FriendBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(VALID_MOBILE_AMY).withPassport(VALID_PASSPORT_AMY).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend BOB \u003d new FriendBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withMobile(VALID_MOBILE_BOB).withPassport(VALID_PASSPORT_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    private TypicalFriends() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "underthehai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code FriendList} with a set of typical friends (either set 1 or 2)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static FriendList getTypicalFriendList(int set) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (set !\u003d 1 \u0026\u0026 set !\u003d 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"getTypicalFriendList only takes in set 1 or 2 as argument.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cFriend\u003e friends \u003d set \u003d\u003d 1 ? getTypicalFriends1() : getTypicalFriends2();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendList fl \u003d new FriendList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Friend friend : friends) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fl.addFriend(new FriendBuilder(friend).build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return fl;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cFriend\u003e getTypicalFriends1() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "underthehai"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cFriend\u003e getTypicalFriends2() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ELLE, FIONA, GEORGE, HOON, IDA));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "underthehai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 24,
      "jeannetoh99": 47,
      "lyeyixian": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1); // TODO: change the variable name?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Index INDEX_FIRST_TRAVELPLAN \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Index INDEX_SECOND_TRAVELPLAN \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Index INDEX_TEN_TRAVELPLAN \u003d Index.fromOneBased(10);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "underthehai"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Index INDEX_TEN \u003d Index.fromOneBased(10);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "underthehai": 2,
      "timjkong": 1,
      "jeannetoh99": 2,
      "lyeyixian": 1,
      "jiaweiteo": 3,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalTravelPlans.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_END_DATE_EUROPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_END_DATE_NYC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_EUROPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_NAME_NYC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_START_DATE_EUROPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.logic.command.CommandTestUtil.VALID_START_DATE_NYC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.getTypicalAccommodationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivities1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.getTypicalFriendList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.TravelPlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TypicalTravelPlans {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final TravelPlan AUSTRALIA_TRIP \u003d new TravelPlanBuilder().withName(\"Trip to Australia\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-01-01\").withEndDate(\"2021-12-12\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withAccommodationList(getTypicalAccommodationList(1))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withActivityList(getTypicalActivityList(1))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withFriendList(getTypicalFriendList(1)).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final TravelPlan BOSTON_TRIP \u003d new TravelPlanBuilder().withName(\"Trip to Boston\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-01-03\").withEndDate(\"2021-11-11\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withAccommodationList(getTypicalAccommodationList(2))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withActivityList(getTypicalActivityList(2))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withFriendList(getTypicalFriendList(2)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final TravelPlan SINGAPORE_TRIP \u003d new TravelPlanBuilder().withName(\"Trip to Singapore\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            .withStartDate(\"2021-01-01\").withEndDate(\"2020-12-31\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withAccommodationList(getTypicalAccommodationList(1))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withActivityList(getTypicalActivityList(1))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            .withFriendList(getTypicalFriendList(1)).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static final TravelPlan FEB_TRIP \u003d new TravelPlanBuilder().withName(\"Trip in February\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            .withStartDate(\"2021-02-01\").withEndDate(\"2020-02-20\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Manually added - TravelPlans\u0027 details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final TravelPlan EUROPE \u003d new TravelPlanBuilder().withName(VALID_NAME_EUROPE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(VALID_START_DATE_EUROPE).withEndDate(VALID_END_DATE_EUROPE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final TravelPlan NYC \u003d new TravelPlanBuilder().withName(VALID_NAME_NYC)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(VALID_START_DATE_NYC).withEndDate(VALID_END_DATE_NYC).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TypicalTravelPlans() {} // prevents instantiation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code TravelPlanner} with all typical travel plans and a typical wishlist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static TravelPlanner getTypicalTravelPlanner() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanner travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : getTypicalActivities1()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            travelPlanner.addActivity(new ActivityBuilder(activity).build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (TravelPlan travelPlan : getTypicalTravelPlans()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            travelPlanner.addTravelPlan(new TravelPlanBuilder(travelPlan).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static TravelPlanner getInvalidDateTestTravelPlanner() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        TravelPlanner travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        travelPlanner.addActivity(ARCHERY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        travelPlanner.addTravelPlan(FEB_TRIP);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cTravelPlan\u003e getTypicalTravelPlans() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AUSTRALIA_TRIP, BOSTON_TRIP));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 11,
      "jeannetoh99": 56,
      "lyeyixian": 12,
      "jiaweiteo": 3
    }
  }
]
