[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W10-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### This is project **Athena**, a contact book and events manager.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Athena provides support to manage large number of contacts and events at the same time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Athena also facilitates seamless integration between contacts management and events management."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* For the detailed documentation of this project, see the **[Athena Project Website](https://ay2021s1-cs2103t-w10-4.github.io/tp/)**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Acknowledgements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 9,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    archiveName \u003d \u0027Athena.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "run {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 4,
      "-": 72,
      "bangyiwu": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "You can reach us at the email `seer[at]u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Chan Jun Da"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "\u003cimg src\u003d\"images/chan-j-d.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "[[github](https://github.com/chan-j-d)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "[[portfolio](team/chan-j-d.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Responsibilities: Documentation, In charge of Contacts Search and Edit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "### Hendey Fan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "\u003cimg src\u003d\"images/linkedink.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "[[github](http://github.com/LinkedInk)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "### Illio Suardi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003cimg src\u003d\"images/fyshhh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "[[github](http://github.com/fyshhh)] [[portfolio](team/fyshhh.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "### Kim Sol"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003cimg src\u003d\"images/solkim-83.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "[[github](http://github.com/solkim-83)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "[[portfolio](team/solkim-83.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* Responsibilities: Documentation, In charge of Events"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "### Wu Bangyi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003cimg src\u003d\"images/bangyiwu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "[[github](http://github.com/bangyiwu)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "[[portfolio](team/bangyiwu.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "* Responsibilities: Documentation, UI, In charge of Contacts"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 6,
      "LinkedInk": 2,
      "fyshhh": 2,
      "solkim-83": 9,
      "-": 36,
      "bangyiwu": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "This document shows program architecture and implementation decisions for the contact-and-event management app, Athena."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "##### **Purpose**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The purpose of this document is to provide technical details and explanations for the high-level design of Athena and each subcomponent that Athena uses. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The intended audience for this document is software engineers maintaining or expanding on Athena, and software testers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete -c 1`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "1. `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "![Structure of the Model Component](images/ModelClassOverviewDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The `Model` encapsulates all data required for Athena to run. In particular, it stores all contacts (as `person` objects), `tag`s and `event`s."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "It is meant to fulfill the Facade pattern as the Facade class by hiding the individual classes that store the individual entities and forcing higher level components like the `Command`s and `Logic` to interact only with `Model`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "It is made up of three major components:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. `AddressBook` which manages the contacts in the form of `Person` objects."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. `TagTree` which manages `tag` to `tag` relations."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. `Calendar` which manages `Event` objects."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Additionally, `Model` also has the following characteristics: "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W10-4/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "### Displaying introduction window"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "##### General design"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "An introduction window is displayed by Athena for users unfamiliar with how the application works. This is done by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "checking if either `AddressBook.json` or `Calendar.json` exist in the designated save-path. If neither are found, Athena"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "assumes that the user has not opened the application before, and will display the introduction window. The introduction"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "comprises a tutorial on basic command use that prompts users to make changes to the default save, and thus will create"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "a new save file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "The sequence diagram below illustrates the interaction between `UiManager`, `MainWindow`, `LogicManager` and"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "`IntroCommand` when the application is launched."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "![intro_sequence_diagram](images/IntroSequenceDiagram.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "This implementation deviates from the sequence regular commands obey (see below) by implementing `executeIntro()`,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "whereas regular commands use `execute(String)`. This is to prevent users from being able to display the introduction"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "window through the invocation of a command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "##### Design choice"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "As the introduction window should be displayed when the application is opened, any method calls has to be done while"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "the system is aware that the application is in the phase of being set up. As a result, determining whether the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "introduction window should be shown is done when the Ui is being created and filled in."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "An important factor to consider when implementing this command is to prevent users from being to invoke it. This means"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "that, unlike regular commands, no keyword parsed should call the method, and thus it can be entirely absent from"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "`AddressBookParser`. Since it should not be parseable, regular methods that are used to handle command inputs are"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "inapplicable, thus necessitating creation of custom methods such as `handleIntro()` and `executeIntroCommand()`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "##### Design improvements"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "As the presence of save files are used to check if the introduction window should be shown, Athena will falsely flag"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "users who have no save file as first time users and show the introduction window nonetheless."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Contact and tag management"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "![contact_tag_diagram](images/ContactTagDiagram.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "##### General design"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**`Person`** component: "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "In Athena, contacts are represented by `Person` objects. `Person` objects have several properties such as email, address, etc. A `Person` can also be tagged with multiple `Tag`s."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `AddressBook` handles all direct matters concerning `Person` objects. It has a `TagManager` and `UniquePersonList`.  "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `UniquePersonList` keeps track of all `Person` objects. It uses `Person` class\u0027 `isSamePerson(Person)` method to ensure that there are no duplicate contacts in Athena."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `TagManager` keeps track of which contacts contain which tags. It uses a hash map, mapping each `Tag` to the set of `Person`s that contain the `Tag`. "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "All manipulation of `Person` objects have to be done through `AddressBook`. `AddressBook` provides simple methods that can be used by higher-level components such as "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `void removePerson(Person)`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `void addPerson(Person)`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `boolean hasPerson(Person)`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- and more"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**`Tag`** component:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "`Tag`s are represented by a single alphanumeric string with no spaces. There is support for child-tagging. This allows directional relations to be established between `Tag`s. Certain commands will group a `Tag` together with its child-tags to perform an action."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `TagTree` handles tag-to-tag relations. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `TagTreeImpl` extends from the abstract class `TagTree`. It uses a tree data structure to store directional tag-to-tag relations. "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The implementation of the tree is done with a hash map, mapping each `Tag` to its set of child-tags. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Any new links established between tags have to go through the `TagTree`. `TagTree` provides several simple methods such as "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `void addSubTagTo(Tag tag)`  "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `boolean hasTag(Tag tag)`  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- and more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**`Integration`** component:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The `ContactTagIntegrationManager` class provides a few predefined methods that affect both `Person`s and `Tag`s together. Methods include:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `void deleteTag(Tag)`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- `void deleteTagRecursive(Tag)` - deletes a `Tag` and all its sub-tags"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- and more"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "This class is meant to address the difficulty in preserving consistency within the system."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "For example, two different `deleteTag` methods are implemented in both `TagTree` and `ContactTagIntegrationManager`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "However, the method in `TagTree` only deletes the specific `Tag` in `TagTree`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The method in `ContactTagIntegrationManager` uses `TagTree`\u0027s `deleteTag(Tag)` method, then removes the `Tag` from all `Person` objects that has the `Tag`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The sequence diagram below illustrates the interactions between the `ContactTagIntegrationManager`, `AddressBook` and `TagTree` when `execute(\"delete -t t/cs2103\")`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "![delete-tag-demonstration](images/DeleteTagSequenceDiagram.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "As such, the `ContactTagIntegrationManager`\u0027s job is to preserve consistency in the `Model` when a change is made to `Tag`s that will affect `Person`s stored."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Thus, higher-level modules should use the methods in `ContactTagIntegrationManager` if available."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "##### Design choice"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "In the context of tag management, this design choice is aimed at properly encapsulating two separate functionalities."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. `AddressBook` - uses `TagManager` to track which `Person` objects falls under which `Tag`s. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    - `TagManager` is necessary to avoid cyclic dependency between `Person` and `Tag`. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    - `TagManager` is embedded in `AddressBook`, so whenever there is a change to the list of `Person`s, the tag-to-person map can be updated immediately."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "2. `TagTree` tracks the tag-to-tag relationships only. In particular, it keeps track of which set of `Tag`s are child-tags of which `Tag`. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Using these two mutable constructs, it allows for accurate realtime queries by higher-level components even though the internal mapping changes frequently between commands."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "To ensure that the right commands are called at the right time, `Model` only implements a limited set of methods that can change the internal mapping."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "To support a greater variety of `Command`s, ensure that the correct methods from either `AddressBook`, `TagTree` or `ContactTagIntegrationManager` are chosen. "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "A rule of thumb is to search for the method in `ContactTagIntegrationManager` first before looking for a similar method in the other two classes. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "To view the full list of methods and documentation for the three major classes, you can view them at [`AddressBook`](https://github.com/AY2021S1-CS2103T-W10-4/tp/blob/master/src/main/java/seedu/address/model/AddressBook.java), "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "[`TagTree`](https://github.com/AY2021S1-CS2103T-W10-4/tp/blob/master/src/main/java/seedu/address/model/tag/TagTree.java) and [`ContactTagIntegrationManager`](https://github.com/AY2021S1-CS2103T-W10-4/tp/blob/master/src/main/java/seedu/address/model/ContactTagIntegrationManager.java)."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "##### Design improvement"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "A possible way to improve the current design is to remove dependency from `ModelManager` to `TagTree`, `AddressBook` and `ContactTagIntegrationManager` by creating another Facade class containing these three classes."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "As such, only the relevant methods required for specific `Command`s to work will be exposed to `Model`. For example, right now, both `ContactTagIntegrationManager`\u0027s `deleteTag(Tag)` method and `TagTree`\u0027s `deleteTag(Tag)` method are exposed to `ModelManager` when only one of them is actually used."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "This makes it easier for others working at a similar level of abstraction to avoid using the wrong methods.  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "##### Additional notes:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "_Definitions_:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- For a `Tag` to _exist_ in Athena, the `Tag` must have either at least one `Person` with the `Tag` **or** at least one child-tag."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- A _child-tag_ of a tag signifies a directional relation from a tag to its _child-tag_. It allows for some commands that affect a tag to also affect its _child-tag_. The reverse cannot be done. The other tag in the relationship is the _parent-tag_."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- _Parent-tag_: see _child-tag_."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- A _sub-tag_ of a tag signifies a multi-step directional relation from a tag to the _sub-tag_ (i.e. a sub-tag of a tag is a child-tag, or a child-tag of a child-tag, etc.)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "A child-tag of a tag is also a _sub-tag_."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "_Delete single tag behavior_: \u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Suppose we delete a single `Tag`, the parent-tags of `Tag` will be reconnected to the child-tags of `Tag` as illustrated by the image below."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "![single-tag-delete](images/DeleteSingleTagPic.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "We have intentionally chosen this design in order to preserve the effectiveness of top-down queries of all sub-tags."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "### Sort events feature"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "The sort events feature is facilitated by `Calendar` that stores event entries and their details in Athena. "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Additionally, it executes the sorting operation based on 2 sorting patterns:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `sort -e 1` - Sorts the events based on the description of the events in alphabetical order."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `sort -e 2` - Sorts the events based on the time of the events in chronological order. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommand#execute() : Does validity check of input and then sorts the event according to user input (index))"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "The sorting function is designed with the aim of temporary modification of the event-related entries in the `Calendar`. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "This is to create a default sorting pattern (based on the description of the events in alphabetical order) for easier reference. "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "The following sequence diagram shows how the `sort -e` operation works:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "![Interactions Inside the Logic Component for the `sort -e 1` Command](images/SortEventSequenceDiagram.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "##### Aspect: How sort executes"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* **Alternative 1 (current choice):** Temporarily sorts the event entries."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  * Pros: Will use less memory."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  * Cons: May cause inconvenience to the users."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* **Alternative 2:** Automatically sorts the event entries based on one sorting order as they are being added/ deleted/ edited."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  * Pros: Will be more convenient for the users. (As they do not need to manually sort) "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  * Cons: May restrict the usage and benefit of the app. (As only one sorting pattern is available)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "The following activity diagram summarizes what happens when a user executes `sort -e` command:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "![CommitActivityDiagram](images/SortEventActivityDiagram.png)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "### Display feature"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "The display feature for the events is facilitated by `Calendar` that stores event entries and their details in Athena,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "and has a specific command of `list -e` where the command makes use of `ListEventCommand`. "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "ListEventCommand#execute() : Does validity check of current list and displayed all event-related entries."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "The feature is designed to provide the users with the entire list of event-related entries, especially after "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "when user executes certain commands that display partial list of event list (e.g. SearchEvent Command)."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* has a need to manage a significant number of contacts and events"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* requires seamless integration between contact and event tracking (vastly differing participants for different events, for instance)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Value proposition**: manage contacts and events faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                  | I want to …​                       | So that I can…​                                                                                        |"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| -------- | ------------------------------------------- | ------------------------------------- | --------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | new user                                    | see usage instructions                | understand how to get started by adding new contacts, removing sample ones and learning advanced commands |"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | user                                        | add a new contact                     | keep track of my contacts                                                                                 |"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | user                                        | delete a contact                      | remove contacts that I no longer need, keeping my contact storage neat and uncluttered                    |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | user                                        | view my contacts in an ordered manner | view the details of my contacts                                                                           |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | user                                        | add a new event                       | keep track of my events                                                                                   |"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | user                                        | delete an event                       | remove events that I no longer need, keeping my event storage neat and uncluttered                        |"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* * *`  | user                                        | view my events in an ordered manner   | view the details of my events                                                                             |"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* *`    | user                                        | search for a contact                  | locate details of contacts without having to go through the entire list                                   |"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* *`    | user                                        | edit a contact\u0027s details              | change outdated information without having to delete and re-add contacts                                  |"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* *`    | user with many contacts in the address book | sort contacts by name                 | so that I can view my contacts in a more consistent manner and find the contacts I want quickly           |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* *`    | user                                        | search for an event                   | locate details of events without having to go through the entire list                                     |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* *`    | user                                        | edit an event\u0027s details               | change outdated information without having to delete and re-add events                                    |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "| `* *`    | user with many events in the address book   | sort events by name                   | so that I can view my events in a more consistent manner and find the events I want quickly               |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "(For all use cases below, the **System** is the `Athena` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**Use case: View introduction**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1.  User opens Athena for the first time"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1.  Athena displays an introduction message, with a guide on how to use basic commands."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**Use case: Add a contact**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "1.  User requests to add a contact"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "* 1a. User input missing one or multiple fields"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    * 1a1. Athena shows an error message."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**Use case: Delete a contact**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "2.  Athena shows a list of contacts"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "3.  User requests to delete a specific contact in the list"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "4.  Athena deletes the contact"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**Use case: Sort through contacts**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2.  Athena shows a list of contacts in default order"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "3.  User requests to sort the contacts in the list"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "4.  Athena displays the contacts in the requested order"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Use case: Editing contact information**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Preconditions: The contact the user wishes to edit is displayed on the UI."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  User uses the edit command to inform the system of which fields of the contact they wish to change."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2.  Athena updates the contact information."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "3.  Athena sends an acknowledgement message to the user to notify of the edits made."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 1a. Tag to be removed does not exist."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 1a1. Athena notifies the user of the error."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 1a2. Athena aborts the command without making changes."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Use case: Searching for contacts**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1. User uses the find command and informs the systems of keywords and additional fields the contact has to match."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2. Athena displays a list of contacts that matches the keywords and contains the additional fields."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 2a1. Athena informs the user that their search did not come up with any valid matches."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "       Use case ends."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Use case: Add an event**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  User requests to add an event"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 2a. The description and/or date time is missing."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 2a1. Athena shows an error message."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 3a. The date time format is not accepted."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "       "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Use case: Delete an event**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  User requests to view events"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2.  Athena shows a list of events"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "3.  User requests to delete a specific event in the list"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "4.  Athena deletes the event"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Use case: Edit an event**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  User requests to view events"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2.  Athena shows a list of events"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "3.  User requests to edit a specific event in the list"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "4.  Athena edits the event"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* 4a. The persons to be added or removed is not found."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 4a1. Athena shows an error message."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "#### **Use case: search for events**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "1.  User requests to search for a particular event "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2.  Athena shows a list of events that match the criteria (e.g. contain a certain keyword) "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* 3a. The given keyword is invalid."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "      "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "#### **Use case: view all saved events**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "1.  User requests to view all events recorded "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "2.  Athena shows a list of events  "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### **Use case: list all tags**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. User requests to view all tags in Athena"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "2. Athena shows a list of tags."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### **Use case: Add a tag**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. User requests to add a tag "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "2. User specifies contacts to be added to this tag"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "3. User specifies other tags to be added as child-tags"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "4. Athena adds the new tag and its relations to specified contacts and child-tags"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* 1a. The tag already exists in Athena."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    * 1a1. Athena shows an error message."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* 2a. Contact specified is invalid."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    * 2a1. Athena shows an error message."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* 3a. Child-tag specified does not exist."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    * 3a1. Athena shows an error message."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  Should be able to hold up to 1000 contacts and events without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  Should be sufficiently intuitive for new or inexperienced users to understand and navigate."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "1.  Should not require an internet connection (bar downloading the app)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* **Contact**: A person to be tracked by Athena; comprises a name, phone number, email and address, as well as an arbitrary quantity of tags"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* **Event**: An event to be tracked by Athena; comprises a name and a date and time, as well as an arbitrary quantity of tags"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Editing a person"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. Editing a person while all persons are being shown"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `edit -c 1 n/test name p/912345 t/edittest` \u003cbr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: Contact at index `1` in the list has its name changed to `test name`, phone number to `912345` and the tag `edittest` added."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `edit -c 1 t/cs2103 t/cs2101 rt/edittest` (done after step 1) \u003cbr\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: Contact at index `1` has tag `edittest` removed and tags `cs2103` and `cs2101` added."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `edit -c 1 rt/*` \u003cbr\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: Contact at index `1` has all its tags removed."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `edit -c 1 n/$%^\u0026a` \u003cbr\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: Error message shown as the name input fails the field constraints."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Finding a person"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. Finding a person."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `find -c n/alex betsy`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: For default contact list, shows `Alex Yeoh` and `Betsy Crower` (and possibly other contacts containing either `alex` or `betsy`)."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `find -c e/@example`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: Lists all persons with `@example` in their emails."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    1. Test case: `find -c t/friends`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       Expected: Lists all persons with the tag `cs2030`."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `delete -c 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `delete -c 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Other incorrect delete commands to try: `delete -c`, `delete -c x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Adding a tag"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. Add a new tag to various contacts."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `add -t n/testtag1 i/1 i/2`\u003cbr\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Contacts at indices `1` and `2` now have the tag `testtag1`."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `add -t n/testtag2 i/3 t/testtag1`\u003cbr\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Contact at index `3` has the tag `testtag2`. When `list -t` command is used, `testtag2` will be labelled as a `supertag`."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `add -t n/testtag1 i/4` (has to be done after step 2) \u003cbr\u003e "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Error message shown, saying that `testtag1` already exists."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Deleting a tag"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. Deleting a tag."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Perform steps 1 \u0026 2 of [Adding a tag](#adding-a-tag) if it has not been done. Then perform `add -t n/testtag3 t/testtag2`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `delete -t t/testtag2` \u003cbr\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Contact at index 3 no longer has the tag `testtag2`. When `list -t` is used, `testtag2` can no longer be found. When using `view -t t/testtag3`, `testtag1` is listed as a child-tag of `testtag3`."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "       "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `delete -t t/testtag3 r/1` \u003cbr\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Contacts at indices 1 and 2 no longer have the tag `testtag1`. `list -t` now has neither `testtag1` nor `testtag3`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Editing a tag"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "1. Editing a tag."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Perform steps 1 \u0026 2 of [Adding a tag](#adding-a-tag) if it has not been done. "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `edit -t n/testtag2 i/2 ri/3` \u003cbr\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Contact at index 3 no longer has the tag `testtag2`. Contact at index 1 has the tag `testtag1`."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `edit -t n/testtag2 rt/testtag1` \u003cbr\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: When `view -t t/testtag2`, `testtag1` is no longer listed as a child-tag of `testtag2`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Test case: `edit -t n/testtag2 t/testtag1` followed by `edit -t n/testtag1 t/testtag2`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: Error message shown, indicating an attempt in making a cyclic relationship."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. In the directory with Athena, open the folder `data` and edit the json save files."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Open Athena. "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: The individual lists should be blank as a corrupted save file has been detected."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Add some contacts and events to ensure that Athena has a proper save file."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "   1. Delete one of either `Calendar.json` or `AddressBook.json`."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "      Expected: When opening Athena again, a default set of entries will fill up the component that was deleted."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "---"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "## **Appendix: Effort**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* **Contact and Tag management**: It was difficult to come up with a good OOP solution in order to keep track of tag-contact and tag-tag relations while avoiding cyclic dependency. Such functionality was not present within AB3 prior so it had to be implemented from scratch."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Additionally, a major challenge was that we intended to implement commands that could affect tags and persons in a way where other persons and tags that were not specified could also be affected (e.g. deleting a tag requires removal of the tag from contacts with it)."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "There were also issues that were more difficult to spot, such as the ability to create cyclic relations between tags."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "As such, multiple solutions and designs were considered, outlining exact behavior that could be supported and allowed within this tracking system."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Extensive testing was also necessary for every single method as many higher-level components and commands rely on accurate queries of tags and persons."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 226,
      "LinkedInk": 124,
      "fyshhh": 47,
      "solkim-83": 57,
      "-": 275,
      "bangyiwu": 28
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "This document is a *User Guide* for Athena, a contact- and event- management desktop application. For more details on"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "the suitability and functionalities of the application for your usage, please refer to the [Introduction](#Introduction)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "section below."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [Introduction](#Introduction)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [Quick Start](#Quick-start)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [Features](#Features)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    * [General](#General)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`help`](#viewing-help) - Viewing help"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`exit`](#exiting-the-program--exit) - Exiting the program"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    * [Contact](#Contact)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`add`](#adding-a-contact-add) - Adding a contact"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`clear`](#clearing-all-contacts--clear) - Clearing all contacts"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`delete`](#deleting-a-contact--delete) - Deleting a contact"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`edit`](#editing-a-contact--edit) - Editing a contact"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`find`](#finding-a-contact--find) - Finding a contact"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`list`](#listing-all-contacts--list) - Listing all contacts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`sort`](#sorting-displayed-contacts--sort) - Sorting displayed contacts"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    * [Event](#event)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`add`](#adding-an-event-add) - Adding an event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`clear`](#clearing-all-events--clear) - Clearing all events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`delete`](#deleting-an-event--delete) - Deleting an event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`edit`](#editing-an-event--edit) - Editing an event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`find`](#finding-an-event--find) - Finding an event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`list`](#listing-all-events--list) - Listing all events"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`sort`](#sorting-displayed-events--sort) - Sorting displayed events"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    * [Tag](#tag)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`add`](#adding-a-tag-add) - Adding a tag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`delete`](#deleting-a-tag-delete) - Deleting a tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`edit`](#editing-a-tag-edit) - Editing a tag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`list`](#listing-all-tags-list) - Listing all tags"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        * [`view`](#viewing-tags-view) - Viewing tag details"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    * [Reminder](#reminder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        * [`add`](#adding-a-reminder-add) - Adding a reminder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        * [`list`](#listing-all-reminders-list) - Listing all reminders"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [FAQ](#FAQ)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [Command Summary](#Command-summary)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* [Glossary](#glossary)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "---"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Athena is a **desktop app for managing contacts and events, optimized for use via a Command Line Interface** (CLI) while"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Athena is perfect for you if you:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* need to categorise a huge number of contacts or events,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* need to keep track of the people who attend specific events,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* can type fast!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. Ensure you have Java `11` or above installed in your computer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. Download the latest `Athena.jar` from [here](https://github.com/AY2021S1-CS2103T-W10-4/tp/releases)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "1. Copy the JAR file to the folder you want to use as the _home folder_ for Athena."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. Double-click the file or run it with `java -jar Athena.jar` to start the app. A window similar to the one below"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   Some commands you can try:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   * **`list`**`-c` : Lists all contacts."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   * **`add`**`-c n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to Athena."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   * **`delete`**`-e 3` : Deletes the 3rd event shown in the current list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "   * **`add`**`-e d/Meeting at/12-12-1234 12:34` : Adds an event named `Meeting` to Athena."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Athena supports two key functionalities - the management of contacts and events. Thus, commands are tailored to manage "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "each of these specific functionalities. In addition, to better categorise contacts, they may also be *tagged* with"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "specific key-words. Thus, there are **four** types of commands:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [general](#general) - commands that are not targeted at any specific functionality"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [contact](#contact) - commands that are targeted at contacts, distinguished by `-c`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [event](#event) - commands that are targeted at events, distinguished by `-e`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* [tag](#tag) - commands that are targeted at tags, distinguished by `-t`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* Items with `…`​ after them can be used any number of times.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "---"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "### General"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Viewing help: `help`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Exiting the program : `exit`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "---"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "### Contact"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Adding a contact: `add`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Adds a contact to Athena."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `add -c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "If you are missing some of the information, like ADDRESS, you can just end the field with a \".\" (e.g. \"a/.\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `add -c n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `add -c n/Betsy Crowe t/friend e/betsycrowe@example.com a/. p/1234567 t/criminal`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Clearing all contacts : `clear`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Clears all contacts from Athena."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `clear -c`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Deleting a contact : `delete`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Deletes the specified contact from Athena."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `delete -c INDEX`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* Deletes the contact at the specified `INDEX`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `list -c` followed by `delete -c 2` deletes the 2nd contact in Athena."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `find -c n/Betsy` followed by `delete -c 1` deletes the 1st contact in the results of the `find` command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Editing a contact : `edit`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `edit -c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [rt/TAG]…`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* Edits the contact at the specified `INDEX`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Tags that are not mentioned will *NOT* be affected."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `t/TAG` adds `TAG` to the user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `rt/TAG` removes `TAG` from the user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Tag removal is done before new tags are added."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* You can remove all the person’s tags by typing `rt/*`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `edit -c 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st contact to be `91234567` "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `edit -c 2 n/Betsy Crower t/CS2030` Edits the name of the 2nd contact to be `Betsy Crower` and adds the tag `CS2030`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `edit -c 3 t/CS2103 rt/*` Removes all tags that contact at index `3` has and then adds the tag `CS2103` to it."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Finding a contact : `find`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Finds persons whose names contain any of the given keywords. Also supports search with additional specifiers such as "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "phone number or email."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `find -c [n/KEYWORDS] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Search field must contain at least one of the optional fields."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* The search is case-insensitive for all fields except tags. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* For name keywords, only full words will be matched. e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* For name keywords, you can specify multiple words you would like to match. e.g. `n/Hans John`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* For search without additional specifiers, persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* The order of the name keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* The `t/TAG` specifier must use an existing tag and does not support partial tag-name searches."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* If additional specifiers are included, only contacts whose specified field contains the specifier details"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " will be returned. `find n/John a/Serangoon` will return only contacts whose names contain `John` **and** with "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " `Serangoon` as part of the address."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `find -c n/John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `find -c n/alex david` returns `Alex Yeoh`, `David Li`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `find -c a/Serangoon` returns all contacts with an address that contains `Serangoon` "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `find -c n/alex david e/gmail` returns `Alex Tan e/...@gmail.com` and `David Lim e/...@gmail.com` but not "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "`Alex Yeoh e/...@hotmail.com` "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Listing all contacts : `list`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Shows a list of all contacts in Athena."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `list -c`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Sorting displayed contacts : `sort`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Sorts all currently displayed contacts in Athena."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `sort -c INDEX`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* Sorts through all contacts currently on screen and lists them according to the user-requested order"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* Index definitions:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. By lexicographical order of their names"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. By lexicographical order of their address"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "1. By lexicographical order of their email"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `sort -c 2` would sort all currently displayed contacts by their names in alphabetical order."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "---"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "### Event"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Adding an event: `add`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Adds an event to the event list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Format: `add -e d/DESCRIPTION at/DATE_TIME [ap/CONTACT_INDEX_LIST]`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `CONTACT_INDEX_LIST` are the indexes of contacts in the middle panel you want to add to the event."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* You can add all the attendees from the contact list to the event by using `ap/*`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "DATE_TIME formats currently accepted"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* dd-MM-yyyy HH:mm"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Legend:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Short form | What it represents"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "----------- | -----------"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "dd | Digits for date"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "MM | Digits for month"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "yyyy | Digits for year"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "HH | Digits for hour of the day in 24-hr time"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "mm | Digits for minutes of an hour"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Behaviour: a new event item will be added to the event list and displayed on the right most panel as shown below."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "![Add Event Behaviour](images/ug-images/add-event-behaviour.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `add -e d/CS2103 Team meeting at/20-10-2020 14:00 ap/1,2,3` Adds an event with the description \"CS2103 Team meeting\", at 20th October 2020, 2pm. With persons 1, 2 and 3 from the contact list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `add -e at/20-10-2020 14:00 d/CS2103 Team meeting ap/5,1,3` Adds an event with the description \"CS2103 Team meeting\", at 20th October 2020, 2pm. With persons 5, 1 and 3 from the contact list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Clearing all events : `clear`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Clears all events from Athena\u0027s calendar."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `clear -e`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ":exclamation: **WARNING:** :exclamation: **All events will be deleted following the use of this command! (shown below)**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "![Clear Event Behaviour](images/ug-images/clear-event-behaviour.png)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Deleting an event : `delete`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Deletes the specified event from the event list."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `delete -e INDEX`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `list -e` followed by `delete -e 2` deletes the 2nd event in the event list."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Editing an event : `edit`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Edits an existing event in the event list. `d/DESCRIPTION` and `at/DATE_TIME` have the same specifications as the ones in `add -e` command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `edit -e INDEX [d/DESCRIPTION] [at/DATE_TIME]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "[ap/CONTACT_INDEX_LIST] [rp/ATTENDEE_INDEX_LIST]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* Edits the event at the specified INDEX. "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `[ap/CONTACT_INDEX_LIST]` adds contacts with the specified indexes to the event."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `[rp/ATTENDEE_INDEX_LIST]` removes contacts with the specified indexes from the event."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* You can add all the attendees from the contact list to the event by using `ap/*`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* You can remove all the attendees for the event by using `rp/*`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "* `edit -e 1 d/CS2101 Tutorial at/23-10-1234 12:30` Edits the details and datetime of the 1st event to be CS2101 Tutorial and 23-10-1234 12:30 respectively."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `edit -e 2 at/23-10-1234 12:30` Edits the time of the 2nd event to be 23-10-1234 12:30"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "* `edit -e 1 ap/1,2 rp/1,2`  Adds the contacts at index 1 and 2 from the contact list to event 1 attendees list. Removes the first 2 contacts from event 1 attendees list."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Picture example:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "Before"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "![Edit Event Behaviour before](images/ug-images/edit-event-behaviour-before.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "After"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "![Edit Event Behaviour after](images/ug-images/edit-event-behaviour-after.png)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "#### Finding an event : `find`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Finds events which names contain any of the given keywords."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `find -e KEYWORD`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* The search is case-insensitive. e.g `meeting` will match `Meeting`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* If the event contains the particular keyword in the command, the name of the event will appear."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* Only full words will be matched e.g. `meetin` will not match `meeting`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `find -e Meeting` returns `CS2103 Meeting` and `CS2101 meeting`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `find -e seminar` returns `CS Seminar` and `seminar 1`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Listing all events : `list`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Shows a list of all events saved in Athena\u0027s calendar."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "Format: `list -e`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "#### Sorting displayed events : `sort`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Sorts all currently displayed events in Athena."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Format: `sort -e INDEX`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* Sorts through all events currently on screen and lists them according to the user-requested order."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* Index definitions:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    1. By lexicographical order of the events\u0027 descriptions."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    2. By lexicographical order of the events\u0027 timing."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `sort -e 2` Sorts all currently displayed events by their descriptions in alphabetical order."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "---"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "### Tag"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Tags present a new way for you to classify and group your contacts together. Managing your tags properly will "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "allow you to perform tag-level actions (to be implemented) such as adding all contacts under a tag into an event. "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Below are some commands to facilitate tag management."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**Note: For a tag to exist, it has to have at least one contact tagged OR contains at least one child-tag.**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Tags that do not meet this criterion will be deleted. "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Adding a tag: `add`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Adds a new tag to Athena. Use this when you want to retroactively assign contacts to a tag and/or classify a group "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "of tags under one parent-tag."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Format: `add -t n/TAG_NAME [i/CONTACT_INDEX]… [t/CHILD_TAG]…`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG_NAME` must be alphanumeric with no spaces."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* At least one of `CONTACT_INDEX` or `CHILD_TAG` must be provided."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `CONTACT_INDEX` refers to the index of a contact as is shown in the contact panel."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `CONTACT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG_NAME` must not be a tag that already exists."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `CHILD_TAG`s specified must already exist in Athena."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `add -t n/cs2103 i/1` Creates a new tag `cs2103` and assigns contact at index `1` the tag `cs2103`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `add -t n/computing i/1 i/2 t/cs2030 t/cs2040` Creates a new tag `computing`. Contacts at indices `1` and `2` "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "will be assigned the `computing` tag. `cs2030` and `cs2040` are assigned as child-tags of `computing`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Deleting a tag: `delete`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Deletes a tag from Athena. Use this when you would like to remove a specific tag from Athena instead of manually editing each contact with the tag. "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Additionally, if you would like to delete a tag and all its sub-tags, you can specify `true` under the `r/` input field."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Format: `delete -t t/TAG_NAME [r/BOOLEAN]`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG_NAME` must be the name of an existing tag in Athena."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "* `BOOLEAN` must be of the form `1`, `t`, `true` for a true case or `0`, `f`, `false` for a false case."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `r/BOOLEAN` field is optional. The default value for this field is `false`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* On single `tag` deletion, every parent-tag of `tag` will be reconnected to every child-tag of `tag` (as shown by the image below)."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "![delete_single_tag_pic](images/DeleteSingleTagPic.png) "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `delete -t t/cs2030` Deletes the tag `cs2030`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `delete -t t/computing r/t` Deletes the tag `computing` and all its sub-tags."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Editing a tag: `edit`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Edits an existing tag in Athena. Use this when you would like perform either or both of the following functionalities:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- add and/or remove contacts from a tag"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- add and/or remove child-tags from a tag"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Format: `edit -t n/TAG_NAME [i/INDEX_ADD]… [ri/INDEX_REMOVE]… [t/TAG_ADD]… [rt/TAG_REMOVE]…` "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG_NAME` specified must be of an existing tag."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `INDEX` refers to the contact currently being displayed at `INDEX` in the contact panel."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Contacts at `INDEX_ADD`s must not have `TAG_NAME` as a tag."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* Contacts at `INDEX_REMOVE`s must have `TAG_NAME` as a tag."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG_ADD`s must be existing tags that are not already child-tags of `TAG_NAME`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG_REMOVE`s must be existing child-tags of `TAG_NAME`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `edit -t n/computing i/1` Adds the contact at index `1` to `computing`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `edit -t n/computing ri/1 t/cs2030 rt/cs2040` Removes the contact at index `1` from `computing`. Also, adds `cs2030` as a child-tag to `computing` and removes `cs2040` as a child-tag."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Listing all tags: `list`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Lists all tags in the remarks panel including the corresponding contacts of each tag. Super-tags are also denoted with `(supertag)`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `list -t` "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "#### Viewing tags: `view`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Shows specific details of a tag. Use this when you would like to view full details of a tag."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Details include:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- Child-tags"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- Contacts tagged with the specified tag"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- All other sub-tags"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- All other contacts containing sub-tags"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Format: `view -t t/TAG [t/TAG]…`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `TAG` must be a valid existing tag in Athena."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `view -t t/cs2030` Shows the details (as specified above) for the tag `cs2030` only."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "* `view -t t/cs2030 t/cs2040` Shows the details for the tags `cs2030` and `cs2040` in a sequential order."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "### Reminders"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Reminders allows you to set custom reminders for your events. You can call up your reminders in application or"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "have them pop up whenever Athena starts. "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "#### Adding a reminder: `add`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Adds a new reminder for an event."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Format: `add -r [EVENT_INDEX] [in/DAYS]`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "* `EVENT_INDEX` refers to the index of an event as is shown in the event window."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "* `DAYS` refers to the number of days in advance for the reminder to start showing in the pop-up window."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "* `add -r 3 in/4` Creates a new reminder for the 3rd event, the reminder will start to pop up every time"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Athena opens 4 days prior to that event "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "#### Listing all reminders: `list`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Lists all reminders in the remarks panel. It lists each reminder and a countdown to its event."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "* `list -r` "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "---"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Q**: How do I save changes?"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**A**: Athena\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**Q**: Where are the save files that Athena uses stored?\u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**A**: The default save directory is in `{Athena home directory}/data`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**Q**: What are the save files that Athena uses?\u003cbr\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**A**: Athena uses three separate save files. They are `addressbook.json`, `calendar.json` and `tagtree.json`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**A**: Install the app on the other computer and overwrite the empty data files it creates with the three save files from the previous computer. "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Add Contact** | `add -c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add -c n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Add Event** | `add -e d/DESCRIPTION at/DATE_TIME [ap/CONTACT_INDEX_LIST]`\u003cbr\u003e e.g., `add -e d/CS2103 Team meeting at/20-10-2020 14:00 ap/5,1,3`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Add Tag** | `add -t n/TAG_NAME [i/CONTACT_INDEX]… [t/CHILD_TAG]…` \u003cbr\u003e e.g., `add -t n/computing i/1 i/2 t/cs2030 t/cs2040`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**Add Reminder** | `add -r [EVENT_INDEX] [in/DAYS]`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**Clear Contacts** | `clear -c`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**Clear Events** | `clear -e`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Delete Contact** | `delete -c INDEX`\u003cbr\u003e e.g., `delete -c 3`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Delete Event** | `delete -e INDEX`\u003cbr\u003e e.g., `delete -e 2`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Delete Tag** | `delete -t t/TAG_NAME [r/BOOLEAN]` \u003cbr\u003e e.g., `delete -t t/computing r/t`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Edit Contact** | `edit -c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [rt/TAG]…`\u003cbr\u003e e.g.,`edit -c 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "**Edit Event** | `edit -e INDEX [d/DESCRIPTION] [at/DATE_TIME] [ap/CONTACT_INDEX_LIST] [rp/ATTENDEE_INDEX_LIST]`\u003cbr\u003e e.g., `edit -e 1 d/CS2101 Tutorial at/23-10-1234 12:30 ap/1,2,3 rp/1,2`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Edit Tag** | `edit -t n/TAG_NAME [i/INDEX_ADD]… [ri/INDEX_REMOVE]… [t/TAG_ADD]… [rt/TAG_REMOVE]…` \u003cbr\u003e e.g., `edit -t n/computing ri/1 t/cs2030 rt/cs2040`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Find Contact** | `find -c [n/KEYWORDS] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…`\u003cbr\u003e e.g., `find -c n/alex david e/gmail`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Find Event** | `find -e KEYWORD`\u003cbr\u003e e.g., `find -e Seminar`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**List Contact** | `list -c`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "**List Events** | `list -e`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**List Tags** | `list -t`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "**List Reminders** | `list -r`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**Sort Contacts** | `sort -c INDEX`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "**Sort Events** | `sort -e INDEX`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "**View Tags** | `view -t t/TAG [t/TAG]…` \u003cbr\u003e e.g., `view -t t/cs2030 t/cs2040`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "###### _Child-tag_ "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- A _child-tag_ of a tag signifies a directional relation from a tag to its _child-tag_. It allows for some commands that affect a tag to also affect its _child-tag_. The reverse cannot be done."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The other tag in the relation is known as a [_parent-tag_](#parent-tag)."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "###### _Parent-tag_ "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- A _parent-tag_ of a tag signifies a directional relation from a _parent-tag_ to a tag. It allows for some commands that affect a _parent-tag_ to also affect the other tag in the relation. The reverse cannot be done."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "The other tag in the relation is known as a [_child-tag_](#child-tag)."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "###### _Sub-tag_"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "- A _sub-tag_ of a tag signifies a multi-step directional relation from a tag to the _sub-tag_ (i.e. a sub-tag of a tag is a [child-tag](#child-tag), or a child-tag of a child-tag, ...)."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "A child-tag of a tag is also a _sub-tag_."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 140,
      "LinkedInk": 61,
      "fyshhh": 121,
      "solkim-83": 68,
      "-": 123,
      "bangyiwu": 43
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete -c 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete -c 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/ContactTagDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "skinparam arrowColor MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "skinparam classBackgroundColor MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Interface TagManager \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class TagManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class TagManagerImpl"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Abstract Class TagTree"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class TagTreeImpl"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -down-\u003e AddressBook"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -down-\u003e TagTree"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager ..\u003e Tag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager ..\u003e Person"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "AddressBook -down-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "AddressBook -down-\u003e \"1\" TagManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagManager ..\u003e Person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagManager ..\u003e Tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagManagerImpl .up.|\u003e TagManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagManagerImpl -right-\u003e \"*\" Person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagManagerImpl -right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "UniquePersonList -down-\u003e \"*\" Person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagTreeImpl -up-|\u003e TagTree"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagTreeImpl --\u003e \"*\" Tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Person --\u003e Tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e ContactTagIntegrationManager MODEL_COLOR"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e TagTree MODEL_COLOR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e AddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 49
    }
  },
  {
    "path": "docs/diagrams/DeleteTagSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "participant \":ContactTagIntegrationManager\" as ContactTagIntegrationManager MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "participant \":AddressBook\" as AddressBook MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "participant \":TagTree\" as TagTree MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "[-\u003e LogicManager : execute(\"delete -t t/cs2103\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "LogicManager -\u003e ModelManager : deleteTag(tagCS2103)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -\u003e ContactTagIntegrationManager : deleteTag(tagCS2103)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "activate ContactTagIntegrationManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -\u003e TagTree : deleteTag(tagCS2103)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "activate TagTree"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagTree --\u003e ContactTagIntegrationManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deactivate TagTree"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -\u003e AddressBook : getPersonsWithTag(tagCS2103)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "activate AddressBook"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "AddressBook --\u003e ContactTagIntegrationManager : set_tagCS2103"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "loop for each person in set_tagCS2103"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -\u003e ContactTagIntegrationManager : copyPersonWithoutTag(person)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "activate ContactTagIntegrationManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager --\u003e ContactTagIntegrationManager : personWithoutTag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deactivate ContactTagIntegrationManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -\u003e AddressBook : setPerson(person, personWithoutTag)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deactivate AddressBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "end loop"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager --\u003e ModelManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deactivate ContactTagIntegrationManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager --\u003e LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 54
    }
  },
  {
    "path": "docs/diagrams/IntroSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "participant \":UiManager\" as UiManager UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "participant \":IntroCommand\" as IntroCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "[-\u003e UiManager : start()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "activate UiManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "UiManager -\u003e MainWindow : executeIntroCommand()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "MainWindow -\u003e MainWindow : handleIntro()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "MainWindow -\u003e LogicManager : executeIntroCommand()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "LogicManager -\u003e IntroCommand : execute(model)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "activate IntroCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "IntroCommand --\u003e LogicManager :"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "deactivate IntroCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "LogicManager --\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "MainWindow --\u003e UiManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "UiManager --\u003e["
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 39
    }
  },
  {
    "path": "docs/diagrams/ModelClassOverviewDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class ContactTagIntegrationManager MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class SortedList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class AddressBook MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Person MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Abstract Class TagTree MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Tag MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Package Event {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Calendar MODEL_EVENT_COLOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class Event MODEL_EVENT_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class HiddenOutside2 #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "HiddenOutside2 --\u003e ObservableList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -left-\u003e UserPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -right-\u003e SortedList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "SortedList .up.|\u003e ObservableList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e \"1\" ContactTagIntegrationManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e \"1 \" AddressBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e \"1  \" Calendar"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager -down-\u003e \"1\" TagTree"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager .down.-\u003e Person"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager .down.-\u003e Tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ModelManager .down.-\u003e Event"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -down-\u003e AddressBook MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "ContactTagIntegrationManager -down-\u003e TagTree MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "AddressBook -down-\u003e \"*\" Person MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "TagTree -down-\u003e \"*\" Tag MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Calendar -down-\u003e \"*\" Event MODEL_EVENT_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "AddressBook ..\u003e Tag MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Person -right-\u003e Tag MODEL_CONTACT_TAG_COLOR"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 60
    }
  },
  {
    "path": "docs/diagrams/SortEventActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "if () then ([command commits AddressBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "if () then ([sorting index \u003d\u003d 1])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    : Sort the events in alphabetical order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "else ([sorting index \u003d\u003d 2])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    : Sort the events in chronological order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    : Display the updated event list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "else ([command has formatting error])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    : Display a formatting error;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "solkim-83": 19
    }
  },
  {
    "path": "docs/diagrams/SortEventSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "participant \":SortEventCommandParser\" as SortEventCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "participant \"sortEventCommand:SortEventCommand\" as SortEventCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "[-\u003e LogicManager : execute(\"sort -e 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"sort -e 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "create SortEventCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "AddressBookParser -\u003e SortEventCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate SortEventCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate SortEventCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "AddressBookParser -\u003e SortEventCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate SortEventCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "create SortEventCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommandParser -\u003e SortEventCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate SortEventCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommand --\u003e SortEventCommandParser : sortEventCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate SortEventCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommandParser --\u003e AddressBookParser : sortEventCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate SortEventCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "destroy SortEventCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "AddressBookParser --\u003e LogicManager : sortEventCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "LogicManager -\u003e SortEventCommand : sortEventCommand.execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate SortEventCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommand -\u003e Model : sortEvent(chooseComparator(1))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "Model --\u003e SortEventCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "CommandResult --\u003e SortEventCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "SortEventCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate SortEventCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "solkim-83": 69
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Interface ManagementClassStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "Class JsonManagementClassStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "StorageManager o--\u003e ManagementClassStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "JsonManagementClassStorage .left.|\u003e ManagementClassStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "JsonManagementClassStorage .down.\u003e JsonSerializableManagementClass"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "JsonSerializableManagementClass .right.\u003e JsonAdaptedXYZData"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "JsonAdaptedXYZData .right.\u003e JsonAdaptedABCData"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "note bottom of ManagementClassStorage : ManagementClass \u003d \\nAddressBook,\\nTagTree, Calendar"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "note \"XYZData/ABCData refers to any basic\\ndata type like Tag, Person, Event, etc.\" as tagNote"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "tagNote .. JsonAdaptedXYZData"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "tagNote .. JsonAdaptedABCData"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 14,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "!define MODEL_CONTACT_TAG_COLOR #e66574"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "!define MODEL_EVENT_COLOR #f20f29"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 2,
      "-": 75
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-6.4.1-bin.zip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.RemindersImpl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.JsonCalendarStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.JsonRemindersStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.JsonTagTreeStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.RemindersStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.TagTreeStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        CalendarStorage calendarStorage \u003d new JsonCalendarStorage(userPrefs.getCalendarFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeStorage tagTreeStorage \u003d new JsonTagTreeStorage(userPrefs.getTagTreeFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        RemindersStorage remindersStorage \u003d new JsonRemindersStorage(userPrefs.getRemindersFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, calendarStorage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                userPrefsStorage, tagTreeStorage, remindersStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns a {@code ModelManager} with the data from"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code storage} (storage\u0027s AddressBook, Calendar and TagTree)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * If {@code storage}\u0027s AddressBook/Calendar is not found;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The data from the sample AddressBook/Calendar will be used instead."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * If {@code storage}\u0027s TagTree is not found;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * An empty TagTree is used instead."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * If errors occur when reading {@code storage}\u0027s AddressBook/Calendar/TagTree;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * An empty AddressBook/Calendar/TagTree will be used instead."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ReadOnlyAddressBook initialAddressBook \u003d addressBookFromStorage(storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ReadOnlyCalendar initialCalendar \u003d calendarFromStorage(storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ReadOnlyTagTree initialTagTree \u003d tagTreeFromStorage(storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        ReadOnlyReminders initialReminders \u003d remindersFromStorage(storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new ModelManager(initialAddressBook, initialCalendar, initialTagTree, userPrefs, initialReminders);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // private methods below just to split up logic for initModelManager"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Refer to {@link #initModelManager(Storage, ReadOnlyUserPrefs)} for specifications"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param storage storage to be read from"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @return {@link ReadOnlyAddressBook}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private ReadOnlyAddressBook addressBookFromStorage(Storage storage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ReadOnlyAddressBook initialAddressBook;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                logger.info(\"AddressBook file not found. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        + \"Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            initialAddressBook \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.warning(\"AddressBook file not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.warning(\"Problem while reading from the AddressBook file. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return initialAddressBook;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Refer to {@link #initModelManager(Storage, ReadOnlyUserPrefs)} for specifications"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param storage storage to be read from"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @return {@link ReadOnlyCalendar}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private ReadOnlyCalendar calendarFromStorage(Storage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Optional\u003cReadOnlyCalendar\u003e calendarOptional;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ReadOnlyCalendar initialCalendar;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            calendarOptional \u003d storage.readCalendar();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (calendarOptional.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                logger.info(\"Calendar file not found. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        + \"Will be starting with a sample Calendar\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            initialCalendar \u003d calendarOptional.orElseGet(SampleDataUtil::getSampleCalendar);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.warning(\"Calendar file not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    + \"Will be starting with an empty Calendar\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            initialCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.warning(\"Problem while reading from the Calendar file. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    + \"Will be starting with an empty Calendar\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            initialCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return initialCalendar;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Refer to {@link #initModelManager(Storage, ReadOnlyUserPrefs)} for specifications"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param storage storage to be read from"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @return {@link ReadOnlyTagTree}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private ReadOnlyTagTree tagTreeFromStorage(Storage storage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Optional\u003cReadOnlyTagTree\u003e tagTreeOptional;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ReadOnlyTagTree initialTagTree;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagTreeOptional \u003d storage.readTagTree();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (tagTreeOptional.isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                logger.info(\"TagTree file not found. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        + \"Will be starting with an empty TagTree\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            initialTagTree \u003d tagTreeOptional.orElse(new TagTreeImpl());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.warning(\"TagTree file not in the correct format. \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    + \"Will be starting with an empty TagTree\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            initialTagTree \u003d new TagTreeImpl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.warning(\"Problem while reading from the TagTree file. \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    + \"Will be starting with an empty TagTree\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            initialTagTree \u003d new TagTreeImpl();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return initialTagTree;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Refer to {@link #initModelManager(Storage, ReadOnlyUserPrefs)} for specifications"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param storage storage to be read from"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @return {@link ReadOnlyTagTree}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private ReadOnlyReminders remindersFromStorage(Storage storage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Optional\u003cReadOnlyReminders\u003e remindersOptional;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        ReadOnlyReminders initialReminders;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            remindersOptional \u003d storage.readReminders();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            if (remindersOptional.isEmpty()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                logger.info(\"Reminders file not found. \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                        + \"Will be starting with an empty Reminders storage\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            initialReminders \u003d remindersOptional.orElse(new RemindersImpl());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            logger.warning(\"Reminders file not in the correct format. \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    + \"Will be starting with an empty Reminders storage\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            initialReminders \u003d new RemindersImpl();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            logger.warning(\"Problem while reading from the TagTree file. \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    + \"Will be starting with an empty TagTree\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            initialReminders \u003d new RemindersImpl();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return initialReminders;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // private methods for initModelManager ends"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        logger.info(\"Starting Athena \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Athena ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 9,
      "LinkedInk": 86,
      "fyshhh": 3,
      "-": 174,
      "bangyiwu": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 1,
      "solkim-83": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/booleaninput/BooleanInput.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.commons.core.booleaninput;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Represents a boolean user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * {@code BooleanInput} should be used to parse user input when determining a boolean input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * The format of the possible {@code BooleanInput}s for {@code true} and {@code false} are specified in this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Upon receiving a {@code BooleanInput}, use the {@code getBooleanValue()} method to obtain the actual boolean literal."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class BooleanInput {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cString\u003e SET_TRUE_STRINGS \u003d Set.of(\"t\", \"true\", \"1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cString\u003e SET_FALSE_STRINGS \u003d Set.of(\"f\", \"false\", \"0\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final BooleanInput BOOLEAN_TRUE \u003d new BooleanInput(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final BooleanInput BOOLEAN_FALSE \u003d new BooleanInput(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"A boolean indicator must be one of the following: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + String.join(\",\", SET_TRUE_STRINGS) + \" (true) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + String.join(\",\", SET_FALSE_STRINGS) + \" (false)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final boolean boolValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a BooleanInput with the given boolean value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For internal usage only to create static true and false BooleanInputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private BooleanInput(boolean boolValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.boolValue \u003d boolValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Private constructor for accepting string inputs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private BooleanInput(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!isValidBooleanInput(input)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new IllegalArgumentException(\"Not a valid boolean input!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolValue \u003d SET_TRUE_STRINGS.contains(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if the {@code input} matches any of the Strings in the true set or the false set."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static boolean isValidBooleanInput(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return SET_TRUE_STRINGS.contains(input) || SET_FALSE_STRINGS.contains(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a new {@code BooleanInput} object based on the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static BooleanInput ofInput(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new BooleanInput(input.toLowerCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a default true {@code BooleanInput}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static BooleanInput isTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return BOOLEAN_TRUE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a default false {@code BooleanInput}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static BooleanInput isFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return BOOLEAN_FALSE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the boolean literal value of {@code BooleanInput}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean getBooleanValue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return boolValue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(o instanceof BooleanInput)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return boolValue \u003d\u003d ((BooleanInput) o).boolValue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Executes the introduction command and returns the result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    CommandResult executeIntro() throws CommandException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns the Calendar"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @see seedu.address.model.Model#getCalendar()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    ReadOnlyCalendar getCalendar();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the Reminders"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @see seedu.address.model.Model#getReminders()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    ReadOnlyReminders getReminders();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns the user prefs\u0027 calendar file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the user prefs\u0027 reminders file path."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 9,
      "fyshhh": 8,
      "solkim-83": 8,
      "-": 50,
      "bangyiwu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.general.IntroCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public CommandResult executeIntro() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        logger.info(\"----------------[SYSTEM COMMAND][introduction]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        Command command \u003d new IntroCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            storage.saveCalendar(model.getCalendar());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            storage.saveTagTree(model.getTagTree());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            storage.saveReminders(model.getReminders());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return model.getSortedFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return model.getCalendar();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ReadOnlyReminders getReminders() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return model.getReminders();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return model.getSortedFilteredEventList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return model.getSortedFilteredReminderList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return model.getCalendarFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return model.getRemindersFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 2,
      "LinkedInk": 1,
      "fyshhh": 10,
      "solkim-83": 17,
      "-": 80,
      "bangyiwu": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Enumeration for the type of command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Types of commands by the functionality it targets, along with the inputString to look for. DEFAULT is for"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * commands that should not have an inputString."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    CONTACT(\"-c\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    EVENT(\"-e\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    TAG(\"-t\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    REMINDER(\"-r\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    DEFAULT(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Unfortunately, {@code switch} statements do not permit the use of cases that are not constant at compile-time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * This means that the actual enumerations should be used in the cases instead. As such, there needs to be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * a way to retrieve an enumeration given an input - this is done in the {@code HashMap} below, and with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * {@code get}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private static final Map\u003cString, CommandType\u003e inputs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        inputs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        for (CommandType commandType : CommandType.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            inputs.put(commandType.inputString, commandType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private final String inputString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    CommandType(String inputString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        this.inputString \u003d inputString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static CommandType get(String inputString) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return Optional.ofNullable(inputs.get(inputString)).orElse(DEFAULT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return inputString;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "fyshhh": 49,
      "bangyiwu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public enum CommandWord {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Types of commands by its word, along with the inputString to look for. DEFAULT is for commands that should not"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * have an inputString."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    ADD(\"add\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    CLEAR(\"clear\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    EDIT(\"edit\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    EXIT(\"exit\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    HELP(\"help\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    INTRO(\"intro\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    VIEW(\"view\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    SORT(\"sort\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    SHOW(\"show\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    PERMASORT(\"psort\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    DEFAULT(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Unfortunately, {@code switch} statements do not permit the use of cases that are not constant at compile-time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * This means that the actual enumerations should be used in the cases instead. As such, there needs to be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * a way to retrieve an enumeration given an input - this is done in the {@code HashMap} below, and with"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * {@code get}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private static final Map\u003cString, CommandWord\u003e inputs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        inputs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        for (CommandWord commandWord : CommandWord.values()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            inputs.put(commandWord.inputString, commandWord);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private final String inputString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    CommandWord(String inputString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        this.inputString \u003d inputString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static CommandWord get(String inputString) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return Optional.ofNullable(inputs.get(inputString)).orElse(DEFAULT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return inputString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "fyshhh": 54,
      "bangyiwu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Adds a person to the Athena."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.ADD.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \": Adds a person to Athena.\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + PREFIX_PHONE + \"PHONE\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in Athena.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please enter a name for this contact.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Refer to the command format below.\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public AddContactCommand(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 2,
      "fyshhh": 24,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/ClearContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Clears Athena."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class ClearContactCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.CLEAR.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Athena has been cleared!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 11,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from Athena."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class DeleteContactCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.DELETE.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "LinkedInk": 2,
      "fyshhh": 15,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/EditContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Edits the details of an existing person in Athena."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EditContactCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.EDIT.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Existing non-tag values will be overwritten by the input values.\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Tag values to be added can be specified with t/ and removed with rt/.\\n\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\nINDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME]\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE]\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_REMOVE_TAG + \"TAG]...\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_TAG + \"CS2103\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in Athena.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_TAG_TO_BE_REMOVED_NOT_PRESENT \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"The specified contact does not have at least one of the tags designated for removal.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditContactCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getSortedFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d processTagUpdates(personToEdit, editPersonDescriptor.getTagsToAdd(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                editPersonDescriptor.getTagsToRemove());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *  Creates a new set of tags from the {@code Person} with the {@code tagsToRemove} removed BEFORE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *  {@code tagsToAdd} are added."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static Set\u003cTag\u003e processTagUpdates(Person personToEdit, Optional\u003cSet\u003cTag\u003e\u003e tagsToAdd,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Optional\u003cSet\u003cTag\u003e\u003e tagsToRemove) throws CommandException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e finalTagSet \u003d new HashSet\u003c\u003e(personToEdit.getTags());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e tagSetToRemove \u003d tagsToRemove.isPresent() ? tagsToRemove.get() : Set.of();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag tagToRemove: tagSetToRemove) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (tagToRemove.equals(Tag.ALL_TAGS_TAG)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (!finalTagSet.contains(tagToRemove)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new CommandException(INDICATOR_TAG_TO_BE_REMOVED_NOT_PRESENT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagsToRemove.ifPresent(set -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (set.contains(Tag.ALL_TAGS_TAG)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                finalTagSet.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                finalTagSet.removeAll(set);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagsToAdd.ifPresent(set -\u003e finalTagSet.addAll(set));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return finalTagSet;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private Set\u003cTag\u003e tagsToAdd \u003d Set.of();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private Set\u003cTag\u003e tagsToRemove \u003d Set.of();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            setTagsToAdd(toCopy.tagsToAdd);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            setTagsToRemove(toCopy.tagsToRemove);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    || !tagsToAdd.isEmpty()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    || !tagsToRemove.isEmpty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * Adds {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void setTagsToAdd(Set\u003cTag\u003e tagsToAdd) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            this.tagsToAdd \u003d (tagsToAdd !\u003d null) ? new HashSet\u003c\u003e(tagsToAdd) : null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * Returns an unmodifiable tag set of tags to be added, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTagsToAdd() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return (tagsToAdd !\u003d null) ? Optional.of(Collections.unmodifiableSet(tagsToAdd)) : Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * Removes {@code tags} from this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void setTagsToRemove(Set\u003cTag\u003e tagsToRemove) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            this.tagsToRemove \u003d (tagsToRemove !\u003d null) ? new HashSet\u003c\u003e(tagsToRemove) : null;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * Returns an unmodifiable tag set of tags to be removed, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "         */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTagsToRemove() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return (tagsToRemove !\u003d null) ? Optional.of(Collections.unmodifiableSet(tagsToRemove)) : Optional.empty();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 getTagsToAdd().equals(e.getTagsToAdd())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 (getTagsToRemove().equals(e.getTagsToRemove())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                            || checksForWildcardTagEquality(getTagsToRemove(), e.getTagsToRemove()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if both tag sets contains the all_tags_tag."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static boolean checksForWildcardTagEquality(Optional\u003cSet\u003cTag\u003e\u003e tagSet1, Optional\u003cSet\u003cTag\u003e\u003e tagSet2) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSet1.isPresent() \u0026\u0026 tagSet1.get().contains(Tag.ALL_TAGS_TAG)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 (tagSet2.isPresent() \u0026\u0026 tagSet2.get().contains(Tag.ALL_TAGS_TAG));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 81,
      "LinkedInk": 3,
      "fyshhh": 21,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Finds and lists all persons in Athena whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class FindContactCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.FIND.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Finds all persons whose fields contain any of \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"the specified keywords (case-insensitive) and matches the tags specified. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"For fields that are not specified, all contacts are matched by default.\\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME KEYWORDS]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE KEYWORD]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL KEYWORD]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS KEYWORD]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alice bob charlie e/hotmail t/CS2103\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final ContactContainsFieldsPredicate predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public FindContactCommand(ContactContainsFieldsPredicate predicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getSortedFilteredPersonList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                || (other instanceof FindContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ContactContainsFieldsPredicate getPredicate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 17,
      "LinkedInk": 2,
      "fyshhh": 20,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Lists all persons in Athena to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class ListContactCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.LIST.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 10,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/PermaSortContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.comparators.PersonComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Sorts the contacts in Athena\u0027s address book permanently."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Index entered determines the specific order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class PermaSortContactCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"psort\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Sort your contacts permanently \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"by the index command entered:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"1 sorts by lexicographical order of their names,\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"2 sorts by lexicographical order of their address,\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"3 sorts by lexicographical order of their email.\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\nINDEX (must be between 1 and 3)\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index entered, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            + \"refer to below for the command\u0027s proper usage: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param index the order in which to sort the address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public PermaSortContactCommand(Index index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (index.getOneBased() \u003c 0 || index.getOneBased() \u003e 3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new CommandException(PermaSortContactCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        model.permaSortContacts(PersonComparator.chooseComparator(index));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new CommandResult(indexMessage(index));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private void requireNonNull(Model model) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the appropriate console message for the index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String indexMessage(Index index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        int input \u003d index.getOneBased();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Sorted by name in alphabetical order\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Sorted by address in alphabetical order\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Sorted by email in alphabetical order\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!(other instanceof PermaSortContactCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        PermaSortContactCommand e \u003d (PermaSortContactCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 9,
      "bangyiwu": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contacts/SortContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.comparators.PersonComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Sorts the currently displayed persons in a specific order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Index entered determines the specific order."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class SortContactCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.SORT.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.CONTACT.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Sorts the currently displayed list\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"by the index command entered:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"1 sorts by lexicographical order of their names,\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"2 sorts by lexicographical order of their address,\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"3 sorts by lexicographical order of their email.\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\nINDEX (must be between 1 and 3)\\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param index the order in which to sort the address book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public SortContactCommand(Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        model.sortPerson(PersonComparator.chooseComparator(index));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new CommandResult(indexMessage(index));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the appropriate console message for the index."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String indexMessage(Index index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        int input \u003d index.getOneBased();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Sorted by name in alphabetical order\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Sorted by address in alphabetical order\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Sorted by email in alphabetical order\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"Invalid index entered, refer to below for the command\u0027s proper usage: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        if (!(other instanceof SortContactCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        SortContactCommand e \u003d (SortContactCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 17,
      "bangyiwu": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.association.FauxPerson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Adds an event to Athena."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.ADD.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \": Adds an event to Athena.\\n\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_DATETIME + \"DATE_TIME\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"[\" + PREFIX_ADD_PERSON + \"CONTACT_INDEX_LIST]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CS2103 Team meeting\" + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_DATETIME + \"12-12-1234 12:34\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_ADD_PERSON + \"1,2,3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in Athena\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final AddEventDescriptor addEventDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code Event} modified with {@code AddEventDescriptor}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public AddEventCommand(AddEventDescriptor addEventDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(addEventDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.addEventDescriptor \u003d addEventDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Event toAdd \u003d createEvent(addEventDescriptor, model.getSortedFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * edited with {@code addEventDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static Event createEvent(AddEventDescriptor addEventDescriptor,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                                           List\u003cPerson\u003e lastShownPersonList) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Description updatedDescription \u003d addEventDescriptor.getDescription().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Time updatedTime \u003d addEventDescriptor.getTime().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // updatedAssociatedPersons\u0027 part"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ArrayList\u003cFauxPerson\u003e tempAssociatedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        tempAssociatedPersons \u003d addFauxPersons(tempAssociatedPersons, addEventDescriptor, lastShownPersonList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Set\u003cFauxPerson\u003e updatedAssociatedPersons \u003d new HashSet\u003c\u003e(tempAssociatedPersons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Event(updatedDescription, updatedTime, updatedAssociatedPersons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static ArrayList\u003cFauxPerson\u003e addFauxPersons("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            ArrayList\u003cFauxPerson\u003e tempAssociatedPersons,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            AddEventDescriptor addEventDescriptor,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            List\u003cPerson\u003e lastShownPersonList) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // wildCard check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (addEventDescriptor.isWildCardAdd()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (Person person : lastShownPersonList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                FauxPerson newFauxPerson \u003d new FauxPerson(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                if (!tempAssociatedPersons.contains(newFauxPerson)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    tempAssociatedPersons.add(newFauxPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return tempAssociatedPersons;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // add FauxPersons to event, in user order, no sorting, duplicates are not added"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (addEventDescriptor.getPersonsToAdd().isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (Index index : addEventDescriptor.getPersonsToAdd().get()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                Person personToAdd \u003d lastShownPersonList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                FauxPerson newFauxPerson \u003d new FauxPerson(personToAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                // only new FauxPersons are added"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                if (!tempAssociatedPersons.contains(newFauxPerson)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    tempAssociatedPersons.add(newFauxPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return tempAssociatedPersons;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 addEventDescriptor.equals(((AddEventCommand) other).addEventDescriptor));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static class AddEventDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private ArrayList\u003cIndex\u003e personsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private boolean wildCardAdd \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public AddEventDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public AddEventDescriptor(AddEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            toCopy.getPersonsToAdd().ifPresent(this::setPersonsToAdd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.wildCardAdd \u003d toCopy.wildCardAdd;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setPersonsToAdd(ArrayList\u003cIndex\u003e personsToAdd) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.personsToAdd.addAll(personsToAdd);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cArrayList\u003cIndex\u003e\u003e getPersonsToAdd() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(personsToAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * Sets wild card add to be true, meaning all displayed persons are to be added"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setWildCardAdd() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.wildCardAdd \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public boolean isWildCardAdd() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return wildCardAdd;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (!(other instanceof AddEventDescriptor)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            AddEventDescriptor e \u003d (AddEventDescriptor) other;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 getPersonsToAdd().equals(e.getPersonsToAdd())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 wildCardAdd \u003d\u003d e.wildCardAdd;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 198,
      "fyshhh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/ClearEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Clears all event-related entries in Athena."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class ClearEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.CLEAR.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The Calendar has been cleared!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        model.setCalendar(new Calendar());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 5,
      "solkim-83": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Deletes an event identified using its displayed index from the Athena."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.DELETE.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getSortedFilteredEventList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 49,
      "fyshhh": 9,
      "solkim-83": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.association.FauxPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Edits the details of an existing event in the Athena."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.EDIT.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Description and time will be overwritten by the input values.\\n\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\nINDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATE_TIME]\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"[\" + PREFIX_ADD_PERSON + \"CONTACT_INDEX_LIST]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"[\" + PREFIX_REMOVE_PERSON + \"ATTENDEE_INDEX_LIST]\\n\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \\n\" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"New description \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_DATETIME + \"12-12-1234 12:34\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_ADD_PERSON + \"1,2,3\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + PREFIX_REMOVE_PERSON + \"1,2\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in Athena.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param index of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getSortedFilteredEventList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Event eventToEdit \u003d lastShownEventList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getSortedFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Event editedEvent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor, lastShownPersonList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                                           List\u003cPerson\u003e lastShownPersonList) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Time updatedTime \u003d editEventDescriptor.getTime().orElse(eventToEdit.getTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // updatedAssociatedPersons\u0027 part"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ArrayList\u003cFauxPerson\u003e tempAssociatedPersons \u003d new ArrayList\u003c\u003e(eventToEdit.getAssociatedPersons());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        tempAssociatedPersons \u003d removeFauxPersons(tempAssociatedPersons, editEventDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        tempAssociatedPersons \u003d addFauxPersons(tempAssociatedPersons, editEventDescriptor, lastShownPersonList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Set\u003cFauxPerson\u003e updatedAssociatedPersons \u003d new HashSet\u003c\u003e(tempAssociatedPersons);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Event(updatedDescription, updatedTime, updatedAssociatedPersons);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static ArrayList\u003cFauxPerson\u003e removeFauxPersons("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            ArrayList\u003cFauxPerson\u003e tempAssociatedPersons,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            EditEventDescriptor editEventDescriptor) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // wildCard check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (editEventDescriptor.isWildCardRemove()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // remove FauxPersons from event"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (editEventDescriptor.getPersonsToRemove().isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            ArrayList\u003cIndex\u003e indexArrayList \u003d editEventDescriptor.getPersonsToRemove().get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // sorting based on biggest index first, so as to not remove the wrong persons"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            indexArrayList.sort((current, other) -\u003e other.getZeroBased() - current.getOneBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (Index index : indexArrayList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                tempAssociatedPersons.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return tempAssociatedPersons;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static ArrayList\u003cFauxPerson\u003e addFauxPersons("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            ArrayList\u003cFauxPerson\u003e tempAssociatedPersons,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            EditEventDescriptor editEventDescriptor,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            List\u003cPerson\u003e lastShownPersonList) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // wildCard check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (editEventDescriptor.isWildCardAdd()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (Person person : lastShownPersonList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                FauxPerson newFauxPerson \u003d new FauxPerson(person);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                if (!tempAssociatedPersons.contains(newFauxPerson)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    tempAssociatedPersons.add(newFauxPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return tempAssociatedPersons;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // add FauxPersons to event, in user order, no sorting, duplicates are not added"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (editEventDescriptor.getPersonsToAdd().isPresent()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (Index index : editEventDescriptor.getPersonsToAdd().get()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                Person personToAdd \u003d lastShownPersonList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                FauxPerson newFauxPerson \u003d new FauxPerson(personToAdd);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                // only new FauxPersons are added"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                if (!tempAssociatedPersons.contains(newFauxPerson)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    tempAssociatedPersons.add(newFauxPerson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return tempAssociatedPersons;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private ArrayList\u003cIndex\u003e personsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private ArrayList\u003cIndex\u003e personsToRemove \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private boolean wildCardAdd \u003d false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private boolean wildCardRemove \u003d false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            toCopy.getPersonsToAdd().ifPresent(this::setPersonsToAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            toCopy.getPersonsToRemove().ifPresent(this::setPersonsToRemove);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.wildCardAdd \u003d toCopy.wildCardAdd;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.wildCardRemove \u003d toCopy.wildCardRemove;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, time, personsToAdd, personsToRemove);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setPersonsToAdd(ArrayList\u003cIndex\u003e personsToAdd) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.personsToAdd.addAll(personsToAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cArrayList\u003cIndex\u003e\u003e getPersonsToAdd() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(personsToAdd);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setPersonsToRemove(ArrayList\u003cIndex\u003e personsToRemove) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.personsToRemove.addAll(personsToRemove);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public Optional\u003cArrayList\u003cIndex\u003e\u003e getPersonsToRemove() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.ofNullable(personsToRemove);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * Sets wild card add to be true, meaning all displayed persons are to be added"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setWildCardAdd() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.wildCardAdd \u003d true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public boolean isWildCardAdd() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return wildCardAdd;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         * Sets wild card remove to be true, meaning all currently associated persons are to be removed"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void setWildCardRemove() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.wildCardRemove \u003d true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public boolean isWildCardRemove() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return wildCardRemove;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 getPersonsToAdd().equals(e.getPersonsToAdd())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 getPersonsToRemove().equals(e.getPersonsToRemove())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 wildCardAdd \u003d\u003d e.wildCardAdd"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    \u0026\u0026 wildCardRemove \u003d\u003d e.wildCardRemove;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 297,
      "fyshhh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/FindEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Finds and lists all events in calendar that have their descriptions containing any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class FindEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.FIND.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Finds all events that contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\nKEYWORD [MORE_KEYWORDS]...\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" meeting\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public FindEventCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getSortedFilteredEventList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public DescriptionContainsKeywordsPredicate getPredicate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 9,
      "solkim-83": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Lists all events in the calendar to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.LIST.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 8,
      "solkim-83": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/events/SortEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.comparators.EventComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Sorts the currently displayed events in a specific order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Index entered determines the specific order."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class SortEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.SORT.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Sorts the currently displayed list of events \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"by the index command entered:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"1 sorts by alphabetical order of the events\u0027 descriptions,\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"2 sorts by alphabetical order of the events\u0027 time.\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Parameters:\\nINDEX (must be between 1 and 2)\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" 1 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * @param index the order in which to sort the event entries in Athena."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public SortEventCommand(Index index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        model.sortEvent(EventComparator.chooseComparator(index));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return new CommandResult(indexMessage(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Returns the appropriate console message for the index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public String indexMessage(Index index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        int input \u003d index.getOneBased();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return \"Sorted by description in alphabetical order\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return \"Sorted by time in chronological order\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return \"Invalid index entered, refer to below for the command\u0027s proper usage: \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                    + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (!(other instanceof SortEventCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        SortEventCommand e \u003d (SortEventCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 9,
      "solkim-83": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.EXIT.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Athena as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.HELP.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 2,
      "fyshhh": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/IntroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Displays an introduction window for the user. Note that this command should not exist in the parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class IntroCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.INTRO.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String SHOWING_INTRO_MESSAGE \u003d \"Opened introduction window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return new CommandResult(SHOWING_INTRO_MESSAGE, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/ListReminderEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Lists all upcoming reminders to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class ListReminderEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.LIST.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.REMINDER.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are your reminders: \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        model.deleteObsoleteReminders();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        ReadOnlyReminders remindersToShow \u003d model.getReminders();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        String remindersList \u003d buildRemindersList(remindersToShow);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + remindersList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Builds a string for the listing of reminders."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String buildRemindersList(ReadOnlyReminders reminders) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        for (Reminder reminder: reminders.getRemindersList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            result +\u003d count + \". \" + reminder.toString() + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/RemindEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Sets a custom reminder for an event identified using its displayed index from the Athena."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class RemindEventCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.ADD.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.REMINDER.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            + \": Reminds you of an event \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \"in/10\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_REMIND_EVENT_SUCCESS \u003d \"Reminder set for event %d days prior: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please input a date with the prefix in/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final int daysInAdvance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param targetIndex the index of the event that you want the reminder for"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param daysInAdvance how many days in advance do you want to start getting reminders for this event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public RemindEventCommand(Index targetIndex, int daysInAdvance) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.daysInAdvance \u003d daysInAdvance;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getSortedFilteredEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Event eventForReminder \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Reminder toAdd \u003d new Reminder(eventForReminder, daysInAdvance);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (now.plusDays(daysInAdvance).isAfter(eventForReminder.getTime().time)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new CommandException(\"You cannot set a reminder for after the event is over.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } else if (model.hasReminder(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new CommandException(\"You already have an existing reminder for this event.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        model.addReminder(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMIND_EVENT_SUCCESS, daysInAdvance)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                + eventForReminder.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                || (other instanceof RemindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemindEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminders/ShowReminderEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.logic.commands.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class ShowReminderEventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.SHOW.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.REMINDER.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String SHOWING_REMINDER_MESSAGE \u003d \"Opened reminder window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new CommandResult(SHOWING_REMINDER_MESSAGE, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tags/AddTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Adds a new tag to the system. The tag can be assigned sub-tags and/or contacts."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.ADD.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.TAG.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \": Adds a new tag to Athena.\\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_NAME + \"TAG_NAME\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_INDEX + \"CONTACT_INDEX]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"SUB_TAG]...\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_INDEX + \"3 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_TAG + \"cs2103\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag has already been created!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_INDEX_FAILURE \u003d \"Assigned indices do not exist in the currently shown list!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_TAG_FAILURE \u003d \"Assigned tags do not exist!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please enter a tag name and at least one index or sub-tag \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"to be assigned to the newly created tag. You can refer to the command below.\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Tag tagToAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cTag\u003e subTagSet;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cIndex\u003e indicesSet;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates an AddTagCommand that creates the specified {@code tagToAdd} with {@code subTagSet} as its subtags and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code personSet} as persons directly under this tag."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public AddTagCommand(Tag tagToAdd, Set\u003cTag\u003e subTagSet, Set\u003cIndex\u003e indicesSet) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagToAdd \u003d tagToAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.subTagSet \u003d Set.copyOf(subTagSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.indicesSet \u003d Set.copyOf(indicesSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (model.hasTag(tagToAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        List\u003cPerson\u003e list \u003d model.getSortedFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean invalidIndices \u003d indicesSet.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(index -\u003e index.getZeroBased() \u003e\u003d list.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (invalidIndices) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_FAILURE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean invalidTags \u003d subTagSet.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(tag -\u003e !model.hasTag(tag));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (invalidTags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(MESSAGE_TAG_FAILURE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        subTagSet.stream().forEach(subTag -\u003e model.addSubTagTo(tagToAdd, subTag));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        indicesSet.stream().forEach(index -\u003e model.addPersonToTag(tagToAdd, list.get(index.getZeroBased())));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tagToAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(object instanceof AddTagCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            AddTagCommand other \u003d (AddTagCommand) object;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return other.tagToAdd.equals(tagToAdd)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.indicesSet.equals(indicesSet)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.subTagSet.equals(subTagSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tags/DeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURSIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.booleaninput.BooleanInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Deletes the specified tag from the system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * If {@code isRecursive} is true, then all sub-tags of the tag is deleted as well."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * If {@code isRecursive} is false, then all parent-tags of {@code tagToDelete} will be reconnected with the set of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * child-tags of {@code tagToDelete}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Parent tags of the {@code tagToDelete} that do not have any contacts tagged and have {@code tagToDelete}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * as the only child-tag will also be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.DELETE.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.TAG.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"Tag does not exist!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"%s has been deleted!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_DELETE_RECURSIVE_SUCCESS \u003d \"%s and sub-tags have been deleted!\\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Deleted sub-tags are %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \": Deletes a tag. If the \" + PREFIX_RECURSIVE + \" field is 1, it also \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"deletes all sub-tags.\\n\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_RECURSIVE + \"BOOLEAN]\\n\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" \" + PREFIX_TAG + \"CS2103 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_RECURSIVE + \"true\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Tag tagToDelete;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final BooleanInput isRecursive;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a DeleteTagCommand object with the specified {@code tagToDelete} and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code isRecursive} (for determining if the sub-tags should be deleted)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public DeleteTagCommand(Tag tagToDelete, BooleanInput isRecursive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagToDelete \u003d tagToDelete;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.isRecursive \u003d isRecursive;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!model.hasTag(tagToDelete)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isRecursive.getBooleanValue()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Set\u003cTag\u003e tagSetRecursiveToBeDeleted \u003d model.getSubTagsRecursive(tagToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            model.deleteTagRecursive(tagToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_RECURSIVE_SUCCESS, tagToDelete,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    tagSetRecursiveToBeDeleted));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            model.deleteTag(tagToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_SUCCESS, tagToDelete));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(o instanceof DeleteTagCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            DeleteTagCommand other \u003d (DeleteTagCommand) o;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return other.tagToDelete.equals(tagToDelete)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.isRecursive.equals(isRecursive);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tags/EditTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Edits an existing tag in Athena."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * The tag can be assigned new child-tags or have existing child-tags removed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Additionally, edits can be made to the set of contacts containing the tag."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class EditTagCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.EDIT.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.TAG.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_REMOVE_CONTACT_DOES_NOT_HAVE_TAG \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"One of the specified indices to remove does not have %s as a tag\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_ADD_CONTACT_HAS_TAG \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"One of the specified indices to add already has %s as a tag\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_REMOVE_TAG_NOT_PRESENT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"One of the specified tags to remove is already not a child-tag of %s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_ADD_TAG_PRESENT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"One of the specified tags to add is already a child-tag of %s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"%s has successfully been edited!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_CYCLIC_DEPENDENCY_DETECTED \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"Cyclic dependency detected between %s and %s! \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Do not assign a super-tag as a sub-tag to the tag you are editing.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"None of the edit fields have been properly specified! Please specify at least one\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_TAG_TO_EDIT_NOT_PRESENT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"%s does not exist in Athena!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \": Edits an existing tag in Athena. You can add and/or remove contacts from a tag, and/or \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"add and/or remove child-tags from the same tag. \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"At least one of the optional fields must be specified.\\n\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_NAME + \"TAG_NAME\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_INDEX + \"INDEX_TO_ADD]...\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_REMOVE_INDEX + \"INDEX_TO_REMOVE]...\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"SUB_TAG_TO_ADD]...\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_REMOVE_TAG + \"SUB_TAG_TO_REMOVE]...\\n\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_REMOVE_INDEX + \"9 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_TAG + \"newchildtag \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_REMOVE_TAG + \"oldchildtag\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Tag tagToEdit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cIndex\u003e indexSetToAdd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cIndex\u003e indexSetToRemove;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cTag\u003e tagSetToAdd;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cTag\u003e tagSetToRemove;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates an EditTagCommand object that edits {@code tagToEdit}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For contacts found at indices in {@code indexSetToAdd}, {@code tagToEdit} is added to these contacts."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For contacts found at indices in {@code indexSetToRemove}, {@code tagToEdit} is removed from these contacts."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For the child-tag set of {@code tagToEdit}, tags in {@code tagSetToAdd} will be added and tags in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code tagSetToRemove} will be removed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code tagToEdit}, and tags in {@code tagSetToAdd} and {@code tagSetToRemove} must already exist in Athena."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public EditTagCommand(Tag tagToEdit, Set\u003cIndex\u003e indexSetToAdd, Set\u003cIndex\u003e indexSetToRemove,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Set\u003cTag\u003e tagSetToAdd, Set\u003cTag\u003e tagSetToRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireAllNonNull(tagToEdit, indexSetToAdd, indexSetToRemove, tagSetToAdd, tagSetToRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagToEdit \u003d tagToEdit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.indexSetToAdd \u003d indexSetToAdd;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.indexSetToRemove \u003d indexSetToRemove;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagSetToAdd \u003d tagSetToAdd;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagSetToRemove \u003d tagSetToRemove;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        checkInputValidity(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeTagFromPersonsAtIndices(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addTagToPersonsAtIndices(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeChildTagsFromTag(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addChildTagsFromTag(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tagToEdit));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Checks the validity of the command with the given model."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Contact to have {@code tagToEdit} removed must have the tag prior to execution."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Contact to have {@code tagToEdit} added must not have the tag prior to execution."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tags from {@code tagSetToRemove} must already be in the child-tag set of {@code tagToEdit} prior to execution."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tags from {@code tagSetToAdd} must not be in the child-tag set of {@code tagToEdit} prior to execution."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tags from {@code tagSetToAdd} that are to added as child-tag cannot be super-tags of {@code tagToEdit}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws CommandException if any of the conditions are violated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void checkInputValidity(Model model) throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasPersonToRemoveWithoutTag \u003d getPersonsAtIndices(model, indexSetToRemove).stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(person -\u003e !person.getTags().contains(tagToEdit));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!model.hasTag(tagToEdit)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TAG_TO_EDIT_NOT_PRESENT, tagToEdit));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasPersonToRemoveWithoutTag) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_REMOVE_CONTACT_DOES_NOT_HAVE_TAG, tagToEdit));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasPersonToAddWithTag \u003d getPersonsAtIndices(model, indexSetToAdd).stream()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(person -\u003e person.getTags().contains(tagToEdit));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasPersonToAddWithTag) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ADD_CONTACT_HAS_TAG, tagToEdit));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasChildTagToRemoveNotPresent \u003d tagSetToRemove.stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(tag -\u003e !model.getChildTags(tagToEdit).contains(tag));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasChildTagToRemoveNotPresent) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_REMOVE_TAG_NOT_PRESENT, tagToEdit));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasChildTagToAddAlreadyPresent \u003d tagSetToAdd.stream()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(tag -\u003e model.getChildTags(tagToEdit).contains(tag));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasChildTagToAddAlreadyPresent) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ADD_TAG_PRESENT, tagToEdit));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag childTagToAdd : tagSetToAdd) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (model.isSubTagOf(childTagToAdd, tagToEdit)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_CYCLIC_DEPENDENCY_DETECTED, tagToEdit, childTagToAdd));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of person objects corresponding to the indices specified by {@code indices}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static Set\u003cPerson\u003e getPersonsAtIndices(Model model, Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return indices.stream()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(index -\u003e index.getZeroBased())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(index -\u003e model.getSortedFilteredPersonList().get(index))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes {@code tagToEdit} from all persons specified by indices in {@code indexSetToRemove}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void removeTagFromPersonsAtIndices(Model model) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e personSetToRemove \u003d getPersonsAtIndices(model, indexSetToRemove);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        personSetToRemove.stream().forEach(person -\u003e model.removePersonFromTag(tagToEdit, person));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds {@code tagToEdit} to all persons specified by indices in {@code indexSetToAdd}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void addTagToPersonsAtIndices(Model model) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e personSetToAdd \u003d getPersonsAtIndices(model, indexSetToAdd);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        personSetToAdd.stream().forEach(person -\u003e model.addPersonToTag(tagToEdit, person));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes tags found in {@code tagSetToRemove} from the child-tag set of {@code tagToEdit}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void removeChildTagsFromTag(Model model) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSetToRemove.stream().forEach(tag -\u003e model.removeChildTagFrom(tagToEdit, tag));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds tags found in {@code tagSetToAdd} to the child-tag set of {@code tagToEdit}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void addChildTagsFromTag(Model model) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSetToAdd.stream().forEach(tag -\u003e model.addSubTagTo(tagToEdit, tag));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(o instanceof EditTagCommand)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            EditTagCommand other \u003d (EditTagCommand) o;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return other.tagToEdit.equals(tagToEdit)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.indexSetToAdd.equals(indexSetToAdd)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.indexSetToRemove.equals(indexSetToRemove)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.tagSetToAdd.equals(tagSetToAdd)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 other.tagSetToRemove.equals(tagSetToRemove);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tags/ListTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Lists all tags in the system-message field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.LIST.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.TAG.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_NO_TAGS_FOUND \u003d \"No tag assignments were found!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_TAGS_FOUND \u003d \"Listed all tags and contacts directly under these tags:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_SUPERTAG \u003d \" (supertag)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_NO_CONTACTS_TAGGED \u003d \"no contacts tagged\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e tagPersonSet \u003d model.getPersonTags();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e superTagSet \u003d model.getSuperTags();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String message \u003d constructTagSummaryMessage(model, tagPersonSet, superTagSet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns one String containing a summary of all tags present in the system."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For a tag to be present, it has to have at least one {@code Person} with the tag OR has sub-tags."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Summary of each tag contains only the tag name and all contacts directly tagged with the tag."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static String constructTagSummaryMessage(Model model, Set\u003cTag\u003e tagPersonSet, Set\u003cTag\u003e superTagSet) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e fullTagSet \u003d new HashSet\u003c\u003e(tagPersonSet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        fullTagSet.addAll(superTagSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return fullTagSet.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(tag -\u003e tag.toString() + (superTagSet.contains(tag) ? INDICATOR_SUPERTAG : \"\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        + \": \" + parsePersonSetIntoString(model.getPersonsWithTag(tag), \"\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .reduce((s1, s2) -\u003e s1 + \u0027\\n\u0027 + s2)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(string -\u003e MESSAGE_TAGS_FOUND + \u0027\\n\u0027 + string)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .orElse(MESSAGE_NO_TAGS_FOUND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a string that combines the {@code Person} set by commas, then adds curly braces."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If the set is empty, returns {@code messageIfNoneFound}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static String parsePersonSetIntoString(Set\u003cPerson\u003e set, String messageIfNoneFound) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return set.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(t -\u003e t.getName().toString())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .reduce((s1, s2) -\u003e s1 + \", \" + s2)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(string -\u003e \"{ \" + string + \" }\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .orElse(messageIfNoneFound);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 65,
      "fyshhh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/tags/ViewTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ListTagCommand.INDICATOR_SUPERTAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ListTagCommand.parsePersonSetIntoString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Shows the full details of the specified tags in the system-message field."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ViewTagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWord.VIEW.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String COMMAND_TYPE \u003d CommandType.TAG.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"No information can be found for the tag %s!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String HEADER_CHILD_TAGS \u003d \"Child-tags: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String HEADER_CONTACTS_DIRECTLY_TAGGED \u003d \"Contacts directly tagged: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String HEADER_SUB_TAGS \u003d \"All other sub-tags: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String HEADER_RELATED_CONTACTS \u003d \"Related contacts: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_NO_CHILD_TAGS \u003d \"no child-tags found\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_NO_DIRECTLY_TAGGED_CONTACTS \u003d \"no directly tagged contacts\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_NO_SUB_TAGS \u003d \"no other sub-tags found\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INDICATOR_NO_RELATED_CONTACTS_FOUND \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            \"no other related contacts found (contacts belonging to sub-tags)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + COMMAND_TYPE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \": Views the details of \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"one or more tags specified by the input values.\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"There must be at least one specified tag.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_TAG + \"TAG \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + PREFIX_TAG + \"CS2103\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Set\u003cTag\u003e tagSetToView;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ViewTagCommand(Set\u003cTag\u003e tagSetToView) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagSetToView \u003d tagSetToView;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new CommandResult(constructSetTagDetails(model, tagSetToView));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if the {@code tag} is valid - that is it has at least one sub-tag or at least one"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code person} tagged with it."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static boolean isValidTag(Model model, Tag tag) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return model.getPersonTags().contains(tag) || model.getSuperTags().contains(tag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a single String containing the full information of each tag within the {@code tagSet}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For tags that cannot be found, the message will reflect that by prepending the appropriate message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static String constructSetTagDetails(Model model, Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String invalidTagString \u003d tagSet.stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .filter(tag -\u003e !isValidTag(model, tag))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(tag -\u003e String.format(MESSAGE_INVALID_TAG, tag))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .reduce((s1, s2) -\u003e s1 + \u0027\\n\u0027 + s2)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(string -\u003e string + \u0027\\n\u0027)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output \u003d tagSet.stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .filter(tag -\u003e isValidTag(model, tag))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(tag -\u003e constructTagDetailString(model, tag))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .reduce((sb1, sb2) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    sb1.append(\"\\n\\n\" + sb2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    return sb1; })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(sb -\u003e sb.toString())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return invalidTagString + output;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a StringBuilder of the full details of the {@code tag}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Firstly, it includes all {@code Person}s with the {@code tag}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Secondly, it includes all sub-tags below {@code tag} in the tag hierarchy."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Lastly, it includes all {@code Person}s related to a sub-tag but not tagged with {@code tag}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static StringBuilder constructTagDetailString(Model model, Tag tag) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isSuperTag \u003d model.getSuperTags().contains(tag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sb.append(tag + (isSuperTag ? INDICATOR_SUPERTAG : \"\") + \u0027:\u0027);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sb.append(\"\\n\" + HEADER_CHILD_TAGS"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + parseTagSetIntoString(model.getChildTags(tag), INDICATOR_NO_CHILD_TAGS));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sb.append(\"\\n\" + HEADER_CONTACTS_DIRECTLY_TAGGED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + parsePersonSetIntoString(model.getPersonsWithTag(tag), INDICATOR_NO_DIRECTLY_TAGGED_CONTACTS));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e otherSubTags \u003d new HashSet\u003c\u003e(model.getSubTagsRecursive(tag));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        otherSubTags.removeAll(model.getChildTags(tag));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sb.append(\"\\n\" + HEADER_SUB_TAGS + parseTagSetIntoString(otherSubTags, INDICATOR_NO_SUB_TAGS));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e relatedContacts \u003d new HashSet\u003c\u003e(model.getPersonsRecursive(tag));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        relatedContacts.removeAll(model.getPersonsWithTag(tag));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sb.append(\"\\n\" + HEADER_RELATED_CONTACTS + parsePersonSetIntoString(relatedContacts,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                INDICATOR_NO_RELATED_CONTACTS_FOUND));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a String of comma separated sub-tags within curly braces."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static String parseTagSetIntoString(Set\u003cTag\u003e tagSet, String messageIfEmpty) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSet.stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(tag -\u003e tag.toString())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .reduce((s1, s2) -\u003e s1 + \", \" + s2)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(string -\u003e \"{ \" + string + \" }\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .orElse(messageIfEmpty);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(o instanceof ViewTagCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagSetToView.equals(((ViewTagCommand) o).tagSetToView);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 135,
      "LinkedInk": 2,
      "fyshhh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparators/EventComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * A Comparator class that contains the event comparators to sort the event entries."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class EventComparator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private static final Comparator\u003cEvent\u003e DESCRIPTION_COMPARATOR \u003d new Comparator\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        public int compare(Event o1, Event o2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return o1.getDescription().fullDescription.compareToIgnoreCase(o2.getDescription().fullDescription);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private static final Comparator\u003cEvent\u003e TIME_COMPARATOR \u003d new Comparator\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        public int compare(Event o1, Event o2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return o1.getTime().time.compareTo(o2.getTime().time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * This method returns different comparator methods that deals with various sorting patterns of the Event class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static Comparator\u003cEvent\u003e chooseComparator(Index index) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        int input \u003d index.getOneBased();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return DESCRIPTION_COMPARATOR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return TIME_COMPARATOR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            throw new CommandException(\"Index should be either 1 or 2!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 1,
      "solkim-83": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparators/PersonComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.logic.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class PersonComparator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static final Comparator\u003cPerson\u003e NAME_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return o1.getName().fullName.compareToIgnoreCase(o2.getName().fullName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static final Comparator\u003cPerson\u003e ADDRESS_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return o1.getAddress().value.compareToIgnoreCase(o2.getAddress().value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static final Comparator\u003cPerson\u003e EMAIL_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return o1.getEmail().value.compareToIgnoreCase(o2.getEmail().value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the appropriate comparator for the model manager to sort with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static Comparator\u003cPerson\u003e chooseComparator(Index index) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        int input \u003d index.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return NAME_COMPARATOR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return ADDRESS_COMPARATOR;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return EMAIL_COMPARATOR;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new CommandException(\"Index should be between 1 to 3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.CommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.ClearContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.ListContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.ClearEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.ListEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.reminders.ListReminderEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.reminders.ShowReminderEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.tags.ListTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.AddContactCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.DeleteContactCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.EditContactCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.FindContactCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.PermaSortContactCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.SortContactCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.events.AddEventCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.events.DeleteEventCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.events.EditEventCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.events.FindEventCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.events.RemindEventCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.events.SortEventCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.tags.AddTagCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.tags.DeleteTagCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.tags.EditTagCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.tags.ViewTagCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \"(?\u003ccommandWord\u003e\\\\S+)\\\\s*(?\u003ccommandType\u003e[\\\\S]*)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        final CommandWord commandWord \u003d CommandWord.get(matcher.group(\"commandWord\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        final CommandType commandType \u003d CommandType.get(matcher.group(\"commandType\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        case CONTACT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new AddContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case EDIT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new EditContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new ClearContactCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new DeleteContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new FindContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new ListContactCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case SORT:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new SortContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            case PERMASORT:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                return new PermaSortContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case EDIT:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                return new ClearEventCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                return new FindEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                return new ListEventCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            case SORT:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                return new SortEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case TAG:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            case EDIT:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                return new EditTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                return new ListTagCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            case VIEW:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                return new ViewTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        case REMINDER:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            case SHOW:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                return new ShowReminderEventCommand();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                return new ListReminderEventCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                return new RemindEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 25,
      "LinkedInk": 4,
      "fyshhh": 65,
      "solkim-83": 6,
      "-": 58,
      "bangyiwu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Prefix PREFIX_REMOVE_TAG \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Prefix PREFIX_REMOVE_INDEX \u003d new Prefix(\"ri/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final Prefix PREFIX_RECURSIVE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final Prefix PREFIX_REMIND_IN \u003d new Prefix(\"in/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final Prefix PREFIX_ADD_PERSON \u003d new Prefix(\"ap/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final Prefix PREFIX_REMOVE_PERSON \u003d new Prefix(\"rp/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /* Symbol definitions */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String SYMBOL_WILDCARD \u003d \"*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 3,
      "LinkedInk": 8,
      "-": 15,
      "bangyiwu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.booleaninput.BooleanInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e inputs} into a {@code Set\u003cIndex\u003e}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndices(Collection\u003cString\u003e inputs) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert inputs !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (String index : inputs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            indexSet.add(parseIndex(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Allows for wildcard tags if {@code canbeWildcard} is true."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Tag parseTag(String tag, boolean canBeWildcard) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag, canBeWildcard)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Tag(trimmedTag, canBeWildcard);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Allows for wildcard tags if {@code canBeWildcard} is true."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags, boolean canBeWildcard) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagSet.add(parseTag(tagName, canBeWildcard));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Parses a {@code String name} into a {@code Description}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Parses a {@code String indexes} into an ArrayList of {@code Index}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * e.g. \"3,5,1\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed before parsing"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws ParseException if the given indexes are invalid."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static ArrayList\u003cIndex\u003e parseIndexes(String indexes) throws ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(indexes);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        String trimmedIndexes \u003d indexes.trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        String[] indexStrArr \u003d trimmedIndexes.split(\",\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        final ArrayList\u003cIndex\u003e indexArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        for (String index : indexStrArr) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            indexArrayList.add(ParserUtil.parseIndex(index));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return indexArrayList;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses a String {@code input} into a BooleanInput."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws ParseException if the given {@code input} is invalid for a BooleanInput."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static BooleanInput parseBooleanInput(String input) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!BooleanInput.isValidBooleanInput(trimmedInput)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(BooleanInput.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return BooleanInput.ofInput(trimmedInput);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 59,
      "LinkedInk": 51,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/AddContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.AddContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Parses input arguments and creates a new AddContactCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class AddContactCommandParser implements Parser\u003cAddContactCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String ADDRESS_PLACEHOLDER \u003d \"Address yet to be added\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String EMAIL_PLACEHOLDER \u003d \"Email yet to be added\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String PHONE_PLACEHOLDER \u003d \"Phone number yet to be added\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public AddContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(PHONE_PLACEHOLDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(EMAIL_PLACEHOLDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(ADDRESS_PLACEHOLDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return new AddContactCommand(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 17,
      "-": 48,
      "bangyiwu": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/DeleteContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Parses input arguments and creates a new DeleteContactCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class DeleteContactCommandParser implements Parser\u003cDeleteContactCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteContactCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * and returns a DeleteContactCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public DeleteContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 11,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/EditContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Parses input arguments and creates a new EditContactCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EditContactCommandParser implements Parser\u003cEditContactCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditContactCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * and returns an EditContactCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_REMOVE_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        parseTagsToEdit(argMultimap.getAllValues(PREFIX_TAG), false)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .ifPresent(editPersonDescriptor::setTagsToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        parseTagsToEdit(argMultimap.getAllValues(PREFIX_REMOVE_TAG), true)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .ifPresent(editPersonDescriptor::setTagsToRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return new EditContactCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If {@code canBeWildcard} is true, then the Tags produced can be the wildcard tag, i.e. ALL_TAGS_TAG."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsToEdit(Collection\u003cString\u003e tags, boolean canBeWildcard) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tags, canBeWildcard));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 10,
      "fyshhh": 16,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/FindContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.FindContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Parses input arguments and creates a new FindContactCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class FindContactCommandParser implements Parser\u003cFindContactCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindContactCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * and returns a FindContactCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public FindContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate findPredicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String trimmedNameKeywords \u003d parseNonTagPredicateField(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            findPredicate.setNameKeywords(Arrays.asList(trimmedNameKeywords.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String trimmedPhoneKeyword \u003d parseNonTagPredicateField(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            findPredicate.setPhoneKeyword(trimmedPhoneKeyword);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String trimmedEmailKeyword \u003d parseNonTagPredicateField(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            findPredicate.setEmailKeyword(trimmedEmailKeyword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String trimmedAddressKeyword \u003d parseNonTagPredicateField(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            findPredicate.setAddressKeyword(trimmedAddressKeyword);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        findPredicate.setTagKeywords(parseTagPredicateFields(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (findPredicate.isEmptyPredicate()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return new FindContactCommand(findPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a trimmed predicateField. If the field is not valid, throws a ParseException instead."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String parseNonTagPredicateField(String predicateField) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!ContactContainsFieldsPredicate.isValidPredicateField(predicateField)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(ContactContainsFieldsPredicate.NON_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return predicateField.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the same list of tags. Throws a ParseException if any of the tags violate Tag requirements."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private List\u003cString\u003e parseTagPredicateFields(List\u003cString\u003e tagList) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (String tagString : tagList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (!Tag.isValidTagName(tagString)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 55,
      "fyshhh": 12,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/PermaSortContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.PermaSortContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Parses input arguments and creates a new {@code SortCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class PermaSortContactCommandParser implements Parser\u003cPermaSortContactCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**9"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code SortCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * and returns a {@code SortCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public PermaSortContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return new PermaSortContactCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    PermaSortContactCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 4,
      "bangyiwu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/SortContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.SortContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Parses input arguments and creates a new {@code SortContactCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class SortContactCommandParser implements Parser\u003cSortContactCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code SortContactCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * and returns a {@code SortContactCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public SortContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            return new SortContactCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortContactCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    ive);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 12,
      "bangyiwu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/events/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SYMBOL_WILDCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand.AddEventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DATETIME, PREFIX_ADD_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventDescriptor addEventDescriptor \u003d new AddEventDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        addEventDescriptor.setDescription(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        addEventDescriptor.setTime(time);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADD_PERSON).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADD_PERSON).get().equals(SYMBOL_WILDCARD)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                addEventDescriptor.setWildCardAdd();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                addEventDescriptor.setPersonsToAdd("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_ADD_PERSON).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new AddEventCommand(addEventDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 61,
      "fyshhh": 7,
      "solkim-83": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/events/DeleteEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * and returns a DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 25,
      "fyshhh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/events/EditEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SYMBOL_WILDCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DATETIME, PREFIX_ADD_PERSON,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        PREFIX_REMOVE_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // set description for editEventDescriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            editEventDescriptor.setDescription("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // set time for editEventDescriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            editEventDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // set index of persons to add/remove for editEventDescriptor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADD_PERSON).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADD_PERSON).get().equals(SYMBOL_WILDCARD)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                editEventDescriptor.setWildCardAdd();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                editEventDescriptor.setPersonsToAdd("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_ADD_PERSON).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMOVE_PERSON).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_REMOVE_PERSON).get().equals(SYMBOL_WILDCARD)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                editEventDescriptor.setWildCardRemove();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                editEventDescriptor.setPersonsToRemove("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_REMOVE_PERSON).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 74,
      "fyshhh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/events/FindEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.FindEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Parses input arguments and creates a new FindEventCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindEventCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * and returns a FindEventCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public FindEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DescriptionContainsKeywordsPredicate findPredicate \u003d new DescriptionContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String[] eventKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        findPredicate.setKeywords(Arrays.asList(eventKeywords));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return new FindEventCommand(findPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 8,
      "solkim-83": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/events/RemindEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.logic.parser.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMIND_IN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.commands.reminders.RemindEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Parses input arguments and creates a new RemindEventCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class RemindEventCommandParser implements Parser\u003cRemindEventCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemindEventCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * and returns an RemindEventCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public RemindEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMIND_IN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMIND_IN)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindEventCommand.MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    RemindEventCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        int daysInAdvance \u003d Integer.parseInt(argMultimap.getValue(PREFIX_REMIND_IN).orElse(\"-1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new RemindEventCommand(index, daysInAdvance);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/events/SortEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.SortEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Parses input arguments and creates a new {@code SortCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class SortEventCommandParser implements Parser\u003cSortEventCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code SortCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * and returns a {@code SortCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public SortEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return new SortEventCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                    SortEventCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 4,
      "solkim-83": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tags/AddTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.tags.AddTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of an AddTagCommand and returns it for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Looks for the name of the added tag under PREFIX_NAME, and looks for indices and tag parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * There must be at least one index or sub-tag specified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INDEX, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasNoSpecifiedNewTagName \u003d argumentMultimap.getValue(PREFIX_NAME).isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasNoSpecifiedNewTagName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean areIndicesEmpty \u003d argumentMultimap.getAllValues(PREFIX_INDEX).isEmpty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean areTagsEmpty \u003d argumentMultimap.getAllValues(PREFIX_TAG).isEmpty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (areIndicesEmpty \u0026\u0026 areTagsEmpty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Tag tagToAdd \u003d ParserUtil.parseTag(argumentMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cIndex\u003e indicesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        List\u003cString\u003e listOfStringIndices \u003d argumentMultimap.getAllValues(PREFIX_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (String stringIndex : listOfStringIndices) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            indicesSet.add(ParserUtil.parseIndex(stringIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d ParserUtil.parseTags(argumentMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new AddTagCommand(tagToAdd, tagSet, indicesSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tags/DeleteTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURSIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.booleaninput.BooleanInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.tags.DeleteTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Parses input arguments and creates a DeleteTagCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses the given {@code args} in the context of a DeleteTagCommand and returns it for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Looks for a tag that matches given tag name under PREFIX_TAG and deletes it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If a boolean input is given and the boolean input is true, then a recursive delete is done for all sub-tags too."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If no boolean input is provided, the default is taken to be false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_RECURSIVE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasTagInput \u003d argumentMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!hasTagInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Tag tagToDelete \u003d ParserUtil.parseTag(argumentMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasBooleanInput \u003d argumentMultimap.getValue(PREFIX_RECURSIVE).isPresent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        BooleanInput isRecursive;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasBooleanInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            isRecursive \u003d ParserUtil.parseBooleanInput(argumentMultimap.getValue(PREFIX_RECURSIVE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            isRecursive \u003d BooleanInput.isFalse();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new DeleteTagCommand(tagToDelete, isRecursive);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tags/EditTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.tags.EditTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Parses input arguments and creates a new EditTagCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses the given string {@code args} in the context of an EditTagCommand and returns it for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * A tag name must be specified under PREFIX_NAME to indicate the tag to be edited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Separate sets are generated for indices of contacts to be added, indices of contacts to be removed,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * tags to be added as child-tags, and child-tags to be removed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * There must be at least one optional field to edit (i.e. all sets cannot be empty)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws ParseException if any of the required conditions are not met"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public EditTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INDEX, PREFIX_REMOVE_INDEX,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        PREFIX_TAG, PREFIX_REMOVE_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasTagSpecified \u003d argumentMultimap.getValue(PREFIX_NAME).isPresent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!hasTagSpecified) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Tag tagToEdit \u003d ParserUtil.parseTag(argumentMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cIndex\u003e indexSetToAdd \u003d ParserUtil.parseIndices(argumentMultimap.getAllValues(PREFIX_INDEX));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cIndex\u003e indexSetToRemove \u003d ParserUtil.parseIndices(argumentMultimap.getAllValues(PREFIX_REMOVE_INDEX));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e tagSetToAdd \u003d ParserUtil.parseTags(argumentMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e tagSetToRemove \u003d ParserUtil.parseTags(argumentMultimap.getAllValues(PREFIX_REMOVE_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isAllSetsEmpty \u003d indexSetToAdd.isEmpty() \u0026\u0026 indexSetToRemove.isEmpty()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 tagSetToAdd.isEmpty() \u0026\u0026 tagSetToRemove.isEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isAllSetsEmpty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(EditTagCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new EditTagCommand(tagToEdit, indexSetToAdd, indexSetToRemove, tagSetToAdd, tagSetToRemove);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/tags/ViewTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseTags;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.tags.ViewTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Parses input arguments and creates a new ViewTagCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ViewTagCommandParser implements Parser\u003cViewTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ViewTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        List\u003cString\u003e tagStringSet \u003d argumentMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (tagStringSet.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new ViewTagCommand(parseTags(argumentMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 31,
      "fyshhh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagManagerImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final TagManager tagManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager \u003d new TagManagerImpl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setTagManager(persons);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Resets the TagManager to contain only tag-person mappings from the given {@code persons} list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void setTagManager(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagManager.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagManager.addNewPersonsTags(persons);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setTagManager(newData.getPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if the {@code tag} can be found in the tagManager."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagManager.hasTag(tag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.addNewPersonTags(p);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds a {@code tag} to the designated {@code person}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addPersonToTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.add(tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person editedPerson \u003d new Person(person.getName(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getPhone(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getEmail(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getAddress(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setPerson(person, editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes {@code tag} from the designated {@code person}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removePersonFromTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.remove(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person editedPerson \u003d new Person(person.getName(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getPhone(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getEmail(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getAddress(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setPerson(person, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.updateExistingPersonTags(target, editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.deletePersonTags(key);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Sorts the address book\u0027s internal list according to the given comparator"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void sortPerson(Comparator\u003cPerson\u003e c) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        persons.sortPersons(c);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getPersonsWithTag(Tag tag) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagManager.getPersonsUnderTag(tag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagManager.getTags();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 60,
      "-": 124,
      "bangyiwu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Calendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Wraps all data at the calendar level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class Calendar implements ReadOnlyCalendar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Calendar() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Creates an Calendar using the Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Calendar(ReadOnlyCalendar toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Resets the existing data of this {@code Calendar} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void resetData(ReadOnlyCalendar newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /// event-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the calendar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Adds a event to the calendar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The event must not already exist in the calendar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code target} must exist in the calendar."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the calendar."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Removes {@code key} from this {@code Calendar}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code key} must exist in the calendar."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                || (other instanceof Calendar // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u0026\u0026 events.equals(((Calendar) other).events));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 58,
      "solkim-83": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ContactTagIntegrationManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class that controls {@code Tag} relationships and interactions between {@code Tag}s and {@Code Person}s."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ContactTagIntegrationManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TagTree tagTree;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a {@code ContactTagIntegrationManager} from the given {@code addressBook} and a new {@code tagTree}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ContactTagIntegrationManager(AddressBook addressBook) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree \u003d new TagTreeImpl();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a ContactTagIntegrationManager from the given {@code addressBook} and {@code tagTree}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ContactTagIntegrationManager(AddressBook addressBook, TagTree tagTree) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagTree \u003d tagTree;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public AddressBook getAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagTree getTagTree() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTree;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if either the addressBook has {@code tag} or the tagTree has {@code tag}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For a tag to exist, it must have at least one contact with the tag OR at least one child-tag assigned to it."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addressBook.hasTag(tag) || tagTree.hasTag(tag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a {@code set} of {@code person}s that falls under the given {@code tag} or any of its sub-tags."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag {@code tag} to begin search for matching {@code person}s."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Set of Persons falling under either the argument {@code tag} or its sub-tags."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getAllPersonsUnderTag(Tag tag) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e finalSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Consumer\u003cTag\u003e consumer \u003d new Consumer\u003cTag\u003e() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            public void accept(Tag tag) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                if (addressBook.getPersonsWithTag(tag) \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                finalSet.addAll(addressBook.getPersonsWithTag(tag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                tagTree.getSubTagsOf(tag).stream().forEach(subTag -\u003e accept(subTag));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        consumer.accept(tag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return finalSet;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes a {@code tag} from the existing tag tree."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code Person}s with the deleted {@code tag} will have the {@code tag} removed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag {@code tag} to be deleted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert tag !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.deleteTag(tag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeTagFromContactsInAddressBook(tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Replaces each instance of a {@code person} with {@code tag} with a {@code person} without it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void removeTagFromContactsInAddressBook(Tag tag) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e setCopy \u003d Set.copyOf(addressBook.getPersonsWithTag(tag));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setCopy.stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .forEach(person -\u003e addressBook.setPerson(person, copyPersonWithoutTag(person, tag)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes {@code tag} and all its sub-{@code tag}s directly below {@code tag} in the tag hierarchy."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * For example, given {@code CS2030 -\u003e COMPUTING -\u003e NUS}, deleting NUS with this method"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * will delete {@code CS2030} and {@code COMPUTING}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Affected {@code Person}s will be updated accordingly."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag {@code tag} to begin the deletion."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagRecursive(Tag tag) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeTagFromContactsInAddressBook(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.getSubTagsOf(tag).stream().forEach(subTag -\u003e deleteTagRecursive(subTag));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.deleteTagAndAllSubTags(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes {@code tag} and all {@code person} objects directly assigned to it."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag {@code tag} to be deleted together with the {@code person}s directly under this {@code tag}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndDirectContacts(Tag tag) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.deleteTag(tag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeContactsUnderTagFromAddressBook(tag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes all {@code person}s directly under {@code tag} from the {@code addressbook}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void removeContactsUnderTagFromAddressBook(Tag tag) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e setCopy \u003d Set.copyOf(addressBook.getPersonsWithTag(tag));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setCopy.stream()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .forEach(person -\u003e addressBook.removePerson(person));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes {@code tag} and all its sub-{@code tag}s directly below {@code tag} in the tag hierarchy."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * All {@code person}s under any deleted {@code tag} will also be deleted."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag {@code tag} to begin recursive deletion."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndDirectContactsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeContactsUnderTagFromAddressBook(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.getSubTagsOf(tag).stream().forEach(subTag -\u003e deleteTagAndDirectContactsRecursive(subTag));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.deleteTagAndAllSubTags(tag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a new {@code person} object which is nearly identical to {@code personToCopy} except with"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code tagRemoved} removed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Person copyPersonWithoutTag(Person personToCopy, Tag tagRemoved) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HashSet\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.remove(tagRemoved);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Person(personToCopy.getName(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                personToCopy.getPhone(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                personToCopy.getEmail(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                personToCopy.getAddress(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a new {@code person} object which is nearly identical to {@code personToCopy} except with"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code tagAdded} added."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Person copyPersonWithTag(Person personToCopy, Tag tagAdded) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HashSet\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.add(tagAdded);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Person(personToCopy.getName(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                personToCopy.getPhone(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                personToCopy.getEmail(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                personToCopy.getAddress(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(o instanceof ContactTagIntegrationManager)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            ContactTagIntegrationManager other \u003d (ContactTagIntegrationManager) o;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return other.addressBook.equals(addressBook) \u0026\u0026 other.tagTree.equals(tagTree);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns the user prefs\u0027 calendar file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the user prefs\u0027 tagtree file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Path getTagTreeFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the user prefs\u0027 reminder file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Sets the user prefs\u0027 calendar file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    void setCalendarFilePath(Path calendarFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Sets the user prefs\u0027 calender file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void setTagTreeFilePath(Path tagTreeFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Sets the user prefs\u0027 reminder file path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void setRemindersFilePath(Path remindersFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    void setCalendar(ReadOnlyCalendar calendar);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /** Returns the Calendar */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    ReadOnlyCalendar getCalendar();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Replaces the tag tree data with the data in {@code tagTree}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void setTagTree(ReadOnlyTagTree tagTree);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the TagTree."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    ReadOnlyTagTree getTagTree();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Replaces the reminders data with the data in {@code reminders}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void setReminders(ReadOnlyReminders reminders);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the Reminders."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    ReadOnlyReminders getReminders();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the calendar."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if the {@code tag} exists with at least one sub-tag and/or person assigned to it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns true if the {@code reminder} exists."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The person must exist in the calendar."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes the given {@code tag}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * All contacts with the assigned {@code tag} will have it removed as well."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * All parent-tags of {@code tag} will be reconnected with the child-tags of {@code tag}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes the given {@code tag} and all its sub-tags."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Sub-tags include child-tags of {@code tag}, child-tags of child-tags, etc."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void deleteTagRecursive(Tag tag);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Deletes the given {@code reminder}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void deleteReminder(Reminder reminder);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Adds the reminder."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code target} must exist in Athena."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the Athena."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    void setEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    ObservableList\u003cPerson\u003e getSortedFilteredPersonList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    ObservableList\u003cEvent\u003e getSortedFilteredEventList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns an unmodifiable view of the filtered reminders list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    ObservableList\u003cReminder\u003e getSortedFilteredReminderList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    // Tag-related operations"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all {@code person}s containing the {@code tag}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cPerson\u003e getPersonsWithTag(Tag tag);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all {@code tag}s with at least one {@code person} tagged, present in the {@code Model}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cTag\u003e getPersonTags();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all {@code tag}s with at least one sub-tag."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cTag\u003e getSuperTags();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all child-tags of {@code tag}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cTag\u003e getChildTags(Tag tag);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all tags below the provided {@code tag} in the tag hierarchy."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * I.e. all sub-tags, all sub-tags of those sub-tags, etc."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cTag\u003e getSubTagsRecursive(Tag tag);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all {@code person}s under the specified {@code tag} and any of the tags below {@code tag}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * in the tag hierarchy."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * I.e. all persons with either {@code tag}, and/or any of its sub-tags, sub-tag of sub-tags, etc."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cPerson\u003e getPersonsRecursive(Tag tag);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds {@code person} to {@code tag}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code person} will also reflect this change with a new {@code tag}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void addPersonToTag(Tag tag, Person person);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes {@code person} from {@code tag}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * {@code person} will also reflect this change with {@code tag} removed."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void removePersonFromTag(Tag tag, Person person);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds {@code subTag} as a sub-tag of {@code superTag}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void addSubTagTo(Tag superTag, Tag subTag);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes {@code childTag} as a child-tag of {@code parentTag}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void removeChildTagFrom(Tag parentTag, Tag childTag);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if {@code subTag} is a sub-tag of {@code superTag}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    boolean isSubTagOf(Tag superTag, Tag subTag);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    // Filter/sort-list methods"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Wraps the filtered list of persons in a sortedList with a specific comparator"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void sortPerson(Comparator\u003cPerson\u003e comparator);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Permanently sorts the address book by a specific comparator"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void permaSortContacts(Comparator\u003cPerson\u003e chooseComparator);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    void sortEvent(Comparator\u003cEvent\u003e comparator);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void deleteObsoleteReminders();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 109,
      "LinkedInk": 30,
      "solkim-83": 23,
      "-": 86,
      "bangyiwu": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final Calendar calendar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final TagTree tagTree;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final RemindersImpl reminders;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final ContactTagIntegrationManager contactTagIntegrationManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final SortedList\u003cPerson\u003e sortedPersons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final SortedList\u003cEvent\u003e sortedEvents;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminders;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final SortedList\u003cReminder\u003e sortedReminders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, calendar, tagTree, reminders and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        ReadOnlyCalendar calendar,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                        ReadOnlyTagTree tagTree,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                        ReadOnlyReminders reminders) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireAllNonNull(addressBook, tagTree, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Initializing with AddressBook: \" + addressBook + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + \", Calendar: \" + calendar + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + \", TagTree: \" + tagTree + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                + \", Reminders: \" + reminders + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + \" and UserPrefs \" + userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.calendar \u003d new Calendar(calendar);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagTree \u003d new TagTreeImpl(tagTree);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.reminders \u003d new RemindersImpl(reminders);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        contactTagIntegrationManager \u003d new ContactTagIntegrationManager(this.addressBook, this.tagTree);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sortedPersons \u003d new SortedList\u003c\u003e(filteredPersons);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.calendar.getEventList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        sortedEvents \u003d new SortedList\u003c\u003e(filteredEvents);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        filteredReminders \u003d new FilteredList\u003c\u003e(this.reminders.getRemindersList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        sortedReminders \u003d new SortedList\u003c\u003e(filteredReminders);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return userPrefs.getCalendarFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setCalendarFilePath(Path calendarFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(calendarFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        userPrefs.setCalendarFilePath(calendarFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getTagTreeFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return userPrefs.getTagTreeFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagTreeFilePath(Path tagTreeFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tagTreeFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        userPrefs.setTagTreeFilePath(tagTreeFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return userPrefs.getRemindersFilePath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setRemindersFilePath(Path remindersFilePath) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(remindersFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        userPrefs.setTagTreeFilePath(remindersFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setCalendar(ReadOnlyCalendar calendar) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.calendar.resetData(calendar);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagTree(ReadOnlyTagTree tagTree) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagTree.copy(tagTree);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ReadOnlyTagTree getTagTree() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTree;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminders(ReadOnlyReminders reminders) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.reminders.resetData(reminders);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ReadOnlyReminders getReminders() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return calendar.hasEvent(event);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return contactTagIntegrationManager.hasTag(tag);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders.hasReminder(reminder);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        calendar.removeEvent(target);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert tag !\u003d null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        contactTagIntegrationManager.deleteTag(tag);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagRecursive(Tag tag) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert tag !\u003d null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        contactTagIntegrationManager.deleteTagRecursive(tag);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        assert reminder !\u003d null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.removeReminder(reminder);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        calendar.addEvent(event);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.addReminder(reminder);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addSubTagTo(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.addSubTagTo(superTag, subTag);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removeChildTagFrom(Tag parentTag, Tag childTag) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.removeSubTagFrom(parentTag, childTag);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isSubTagOf(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTree.isSubTagOf(superTag, subTag);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addPersonToTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.addPersonToTag(tag, person);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removePersonFromTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.removePersonFromTag(tag, person);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        calendar.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void sortPerson(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        sortedPersons.comparatorProperty().setValue(comparator);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void permaSortContacts(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        addressBook.sortPerson(comparator);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void sortEvent(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        sortedEvents.comparatorProperty().setValue(comparator);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedFilteredPersonList() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return sortedPersons;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public ObservableList\u003cEvent\u003e getSortedFilteredEventList() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return sortedEvents;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedFilteredReminderList() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return sortedReminders;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    // Person-tag related methods"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getPersonsWithTag(Tag tag) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addressBook.getPersonsWithTag(tag);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getPersonTags() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addressBook.getTags();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSuperTags() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTree.getSuperTags();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getChildTags(Tag tag) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTree.getSubTagsOf(tag);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSubTagsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTree.getSubTagsRecursive(tag);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getPersonsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return contactTagIntegrationManager.getAllPersonsUnderTag(tag);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    // Filter/sort related methods"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void deleteObsoleteReminders() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.deleteObsoleteReminders();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    };"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 111,
      "LinkedInk": 22,
      "solkim-83": 56,
      "-": 142,
      "bangyiwu": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public interface ReadOnlyCalendar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 2,
      "solkim-83": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Path getTagTreeFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 2,
      "solkim-83": 2,
      "-": 16,
      "bangyiwu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RemindersImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.UniqueRemindersList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Wraps all data at the calendar level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Duplicates are not allowed (by .isSameReminder comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class RemindersImpl implements ReadOnlyReminders {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final UniqueRemindersList reminders;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders \u003d new UniqueRemindersList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public RemindersImpl() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Creates an RemindersImpl using the Reminders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public RemindersImpl(ReadOnlyReminders toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Replaces the contents of the reminder list with {@code reminders}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Resets the existing data of this {@code RemindersImpl} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void resetData(ReadOnlyReminders newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        setReminders(newData.getRemindersList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /// reminder-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in the calendar."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Adds a reminder to the calendar."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * The reminder must not already exist in the calendar."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void addReminder(Reminder r) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.add(r);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Replaces the given reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * {@code target} must exist in the calendar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(editedReminder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.setReminder(target, editedReminder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Removes {@code key} from this {@code RemindersImpl}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * {@code key} must exist in the calendar."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Removes all reminders for events that have expired."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void deleteObsoleteReminders() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        ArrayList\u003cReminder\u003e toBeDeleted \u003d new ArrayList\u003cReminder\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        for (Reminder r: reminders) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            if (r.getEventToRemind().getTime().getTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                toBeDeleted.add(r);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (toBeDeleted !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            toBeDeleted.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                        .forEach(reminder -\u003e removeReminder(reminder));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders.asUnmodifiableObservableList().size() + \" reminders\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ObservableList\u003cReminder\u003e getRemindersList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean hasRemindersDue() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders.hasRemindersDue();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                || (other instanceof RemindersImpl // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u0026\u0026 reminders.equals(((RemindersImpl) other).reminders));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminders.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Path calendarFilePath \u003d Paths.get(\"data\" , \"calendar.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Path tagTreeFilePath \u003d Paths.get(\"data\", \"tagtree.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private Path remindersFilePath \u003d Paths.get(\"data\", \"reminders.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        setCalendarFilePath(newUserPrefs.getCalendarFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setTagTreeFilePath(newUserPrefs.getTagTreeFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        setRemindersFilePath(newUserPrefs.getRemindersFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return calendarFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setCalendarFilePath(Path calendarFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(calendarFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.calendarFilePath \u003d calendarFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getTagTreeFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTreeFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagTreeFilePath(Path tagTreeFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tagTreeFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagTreeFilePath \u003d tagTreeFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return remindersFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setRemindersFilePath(Path remindersFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(remindersFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.remindersFilePath \u003d remindersFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 calendarFilePath.equals(o.calendarFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u0026\u0026 tagTreeFilePath.equals(o.tagTreeFilePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u0026\u0026 remindersFilePath.equals(o.remindersFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, calendarFilePath, tagTreeFilePath, remindersFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        sb.append(\"\\nLocal data file location for addressbook: \" + addressBookFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        sb.append(\"\\nLocal data file location for calendar: \" + calendarFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sb.append(\"\\nLocal data file location for tagtree: \" + tagTreeFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        sb.append(\"\\nLocal data file location for reminders: \" + remindersFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 13,
      "solkim-83": 14,
      "-": 84,
      "bangyiwu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Represents an Event\u0027s Description in the Calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            \"Description should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static boolean isValidDescription(String fullDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return !fullDescription.equals(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 31,
      "solkim-83": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public DescriptionContainsKeywordsPredicate() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void setKeywords(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(event.getDescription().fullDescription, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 4,
      "solkim-83": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.association.FauxPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Represents an Events in Calendar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final Set\u003cFauxPerson\u003e associatedPersons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Event(Description description, Time time, Set\u003cFauxPerson\u003e associatedPersons) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireAllNonNull(description, time, associatedPersons);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.associatedPersons.addAll(associatedPersons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns an immutable FauxPerson set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Set\u003cFauxPerson\u003e getAssociatedPersons() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return Collections.unmodifiableSet(associatedPersons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns true if both events have the same description and time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 otherEvent.getTime().equals(getTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return Objects.hash(description, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 otherEvent.getTime().equals(getTime())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 otherEvent.getAssociatedPersons().equals(getAssociatedPersons());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .append(\"\\nAt: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (associatedPersons.size() !\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            builder.append(\"\\n\\nPeople attending: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (FauxPerson fauxPerson : associatedPersons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                builder.append(\"\\n\" + counter + \") \").append(fauxPerson.displayName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 57,
      "solkim-83": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Represents an Event\u0027s Time in the Calendar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime (String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date time format not accepted, the following are accepted:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            + \"dd-MM-yyyy HH:mm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public final LocalDateTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param timeInput A valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Time(String timeInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(timeInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        checkArgument(isValidTime(timeInput), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.time \u003d parse(timeInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param timeInput A valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Time(LocalDateTime timeInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(timeInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.time \u003d timeInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns if a given string is a valid time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: change this checker whenever more formats are added in the method below"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static boolean isValidTime(String timeInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            LocalDateTime.parse(timeInput, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: add more formats to be parsed here, add them to the valid checking method above"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static LocalDateTime parse(String timeInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return LocalDateTime.parse(timeInput, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // toDisplayString controls the format of time displayed in the GUI panel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: make display prettier/more relevant to the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns a string that can be parsed to make another Time object of the same time value"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @return string representing part of a command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // toString() controls the format of time displayed in the response box"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // as well as the format saved in calendar.json file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 time.equals(((Time) other).time)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 70,
      "fyshhh": 3,
      "solkim-83": 4,
      "bangyiwu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals(Event) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 83,
      "solkim-83": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/association/FauxPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.model.event.association;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Represents a limited version of a Person"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * To be used only as part of associating contacts with events"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class FauxPerson {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_NAME \u003d \"Display name should not be empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_HASHCODE \u003d \"Hashcode is not a valid integer number\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public final String displayName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public final Integer personHashCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code FauxPerson}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param displayName name of this faux person"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param personHashCode hashCode of actual Person object this is representing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public FauxPerson(String displayName, Integer personHashCode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(displayName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(personHashCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.personHashCode \u003d personHashCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code FauxPerson}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param person Person to be converted into a FauxPerson"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public FauxPerson(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.displayName \u003d person.getName().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.personHashCode \u003d person.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Checks if a given string is a valid display name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param displayName string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static boolean isValidDisplayName(String displayName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (displayName.length() \u003c 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Checks if a given string can be converted into an integer to represent hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param hashCode string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static boolean isValidHashCode(String hashCode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            Integer.parseInt(hashCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                || (other instanceof FauxPerson) // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 displayName.equals(((FauxPerson) other).displayName) // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u0026\u0026 personHashCode.equals(((FauxPerson) other).personHashCode); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return Objects.hash(displayName, personHashCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return displayName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String PLACEHOLDER \u003d \"Address yet to be added\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.equals(PLACEHOLDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "bangyiwu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactContainsFieldsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * any of the {@code Person}\u0027s {@code phone}, {@code email}, {@code address} and {@code tags}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * contains the specified search fields."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * If a field is missing, it is considered \u0027matched\u0027 by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ContactContainsFieldsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String NON_TAG_CONSTRAINTS \u003d \"Search specifiers cannot be empty! \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Specify the field or remove the prefix!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String EMPTY_FIELD \u003d \"\\0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private List\u003cString\u003e nameKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String phoneKeyword \u003d EMPTY_FIELD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String emailKeyword \u003d EMPTY_FIELD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String addressKeyword \u003d EMPTY_FIELD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ContactContainsFieldsPredicate() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return hasNameMatch(person)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 hasNonTagMatch(person)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 hasTagMatch(person);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Checks for FULL name keyword matches between the person\u0027s name and the provided keywords."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * True if list is empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean hasNameMatch(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return nameKeywords.isEmpty() || nameKeywords.stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Checks that the field\u0027s string representation contains matchField. If matchField is empty, true by default."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean checkFieldMatch(Object field, String matchField) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return matchField.equals(EMPTY_FIELD) || field.toString().toLowerCase().contains(matchField.toLowerCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Checks that the person\u0027s phone, email and address matches the provided keywords."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean hasNonTagMatch(Person person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return checkFieldMatch(person.getPhone(), phoneKeyword)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 checkFieldMatch(person.getEmail(), emailKeyword)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 checkFieldMatch(person.getAddress(), addressKeyword);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Checks that the person contains all the tags specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean hasTagMatch(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .allMatch(tag -\u003e person.getTags().contains(tag));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setNameKeywords(List\u003cString\u003e nameKeywords) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.nameKeywords \u003d nameKeywords;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setPhoneKeyword(String phoneKeyword) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.phoneKeyword \u003d phoneKeyword;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setEmailKeyword(String emailKeyword) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.emailKeyword \u003d emailKeyword;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setAddressKeyword(String addressKeyword) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.addressKeyword \u003d addressKeyword;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagKeywords(List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if all of the fields are the default settings, indicating nothing to test."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isEmptyPredicate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return nameKeywords.size() \u003d\u003d 0"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 phoneKeyword.equals(EMPTY_FIELD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 emailKeyword.equals(EMPTY_FIELD)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 addressKeyword.equals(EMPTY_FIELD)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 tags.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Checks the validity of the predicate field"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static boolean isValidPredicateField(String predicateField) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return !predicateField.isBlank();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(object instanceof ContactContainsFieldsPredicate)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate otherObject \u003d (ContactContainsFieldsPredicate) object;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return this.nameKeywords.equals(otherObject.nameKeywords)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 phoneKeyword.equals(otherObject.phoneKeyword)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 emailKeyword.equals(otherObject.emailKeyword)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 addressKeyword.equals(otherObject.addressKeyword)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 tags.equals(otherObject.tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        String placeholder \u003d \"Email yet to be added\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.equals(placeholder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "bangyiwu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String PLACEHOLDER \u003d \"Phone number yet to be added\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return test.equals(PLACEHOLDER) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "bangyiwu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Sorts the address book\u0027s internal list according to the given comparator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void sortPersons(Comparator\u003cPerson\u003e c) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        internalList.sort(c);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "bangyiwu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReadOnlyReminders.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public interface ReadOnlyReminders {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns an unmodifiable view of the reminders list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * This list will not contain any duplicate reminders."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    ObservableList\u003cReminder\u003e getRemindersList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean hasRemindersDue();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final Event eventToRemind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final Time reminderDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param eventToRemind the event that you want the reminder for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param daysInAdvance how many days in advance do you want to start getting reminders for this event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Reminder(Event eventToRemind, int daysInAdvance) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.eventToRemind \u003d eventToRemind;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.reminderDate \u003d new Time(eventToRemind.getTime().time.minusDays(daysInAdvance));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param eventToRemind the index of the event that you want the reminder for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param date the starting date of when you will start getting reminders for this event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Reminder(Event eventToRemind, String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.eventToRemind \u003d eventToRemind;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.reminderDate \u003d new Time(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Event getEventToRemind() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return eventToRemind;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Time getReminderDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return reminderDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Checks if both reminders are the same"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean isSameReminder (Reminder otherReminder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u0026\u0026 otherReminder.getEventToRemind().equals(getEventToRemind());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return Objects.hash(eventToRemind, reminderDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Calculates the difference between the current date and the date of the event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String countdownFromNow() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        long diff \u003d ChronoUnit.DAYS.between(now, eventToRemind.getTime().time.toLocalDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return String.valueOf(diff);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return eventToRemind.toString() + \" in \" + countdownFromNow() + \" days\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/UniqueRemindersList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * A list of reminders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * An reminder is considered unique by comparing using {@code Reminder#isSameReminder(Reminder)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * As such, adding and updating of reminders uses Reminder#isSameReminder(Reminder)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * for equality so as to ensure that the reminder being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * unique in terms of identity in the UniqueRemindersList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * However, the removal of a reminder uses reminders#equals(Reminder) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * as to ensure that the reminder with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class UniqueRemindersList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns true if the list contains an equivalent reminder as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Adds an reminder to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * The reminder must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Replaces the reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * The reminder identity of {@code editedReminder} must not be the same as another existing reminder in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!target.isSameReminder(editedReminder) \u0026\u0026 contains(editedReminder)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        internalList.set(index, editedReminder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Removes the equivalent reminder from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminders(UniqueRemindersList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Replaces the contents of this list with {@code reminders}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                || (other instanceof UniqueRemindersList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRemindersList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns true if {@code reminders} contains only unique reminders."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                if (reminders.get(i).isSameReminder(reminders.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns true if there are active reminders."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean hasRemindersDue() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            if (internalList.get(i).getReminderDate().getTime().toLocalDate().isEqual(LocalDate.now())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    || internalList.get(i).getReminderDate().getTime().toLocalDate().isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Signals that the operation will result in duplicate Reminders (reminders"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        super(\"Operation would result in duplicate reminders\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/ReadOnlyTagTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Unmodifiable view of the tag tree."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public interface ReadOnlyTagTree {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an unmodifiable view of all tags and their subtags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Map\u003cTag, Set\u003cTag\u003e\u003e getTagSubTagMap();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String ALL_TAGS_IDENTIFIER \u003d \"*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Unique tag object to identify a tag that equates to all tags a Person has."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag ALL_TAGS_TAG \u003d new Tag(ALL_TAGS_IDENTIFIER, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagName \u003d tagName.toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The tag can be a wildcard {@code Tag} which represents all tags the entity has."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tagName A valid tag name or \u0027*\u0027."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param canBeWildcard Indicator for whether the wildcard tag is allowed in this field."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Tag(String tagName, boolean canBeWildcard) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        checkArgument(isValidTagName(tagName, canBeWildcard), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagName \u003d tagName.toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if a given string is a valid tag name or an all-tags indicator."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static boolean isValidTagName(String test, boolean canBeWildcard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (test.equals(ALL_TAGS_IDENTIFIER) \u0026\u0026 canBeWildcard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 24,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Interface dictating the behavior of a {@code TagManager} class that keeps track of {@code Person}s"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * under each {@code Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public interface TagManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all {@code Person}s that has this tag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag common {@code tag} that all persons we are looking for has."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return set of {@code Person}s that has {@tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cPerson\u003e getPersonsUnderTag(Tag tag);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a set of all {@code Tag}s found in the {@code TagManager}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return a set of {@code Tag}s."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if {@code tag} is found with at least one contact under it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updates the current tag references in the tag manager."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes all references to the {@code oldPerson} and adds new references to the {@code newPerson}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param oldPerson {@code Person} to remove references to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param newPerson {@code Person} to add new references to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void updateExistingPersonTags(Person oldPerson, Person newPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updates the tag manager with references to a newly added {@code person}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param person new {@code person} added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void addNewPersonTags(Person person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updates the tag manager with references to all {@code person} in {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param persons new {@code persons} added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    default void addNewPersonsTags(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addNewPersonTags(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updates the current {@code tag} references in the {@code tag manager} to remove all references to {@code person}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param person person being deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void deletePersonTags(Person person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Copies the content of the {@code otherTagManager} into this {@code TagManager}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The new copy must use a separate underlying structure, only sharing references"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * to the same {@code Person}s and {@code Tag}s."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void copy(TagManager otherTagManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Clears the TagManager of all current tagging."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagManagerImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Concrete implementation class of {@code TagManager} that uses a {@code HashMap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TagManagerImpl implements TagManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String MESSAGE_ERROR_PERSON_NOT_FOUND \u003d \"Person instance not found in tag manager!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Map\u003cTag, Set\u003cPerson\u003e\u003e tagPersonSetMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagManagerImpl() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagPersonSetMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getPersonsUnderTag(Tag tag) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagPersonSetMap.get(tag) \u003d\u003d null ? Set.of() : tagPersonSetMap.get(tag);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagPersonSetMap.keySet();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagPersonSetMap.containsKey(tag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes all references in {@code tagPersonSetMap} to this {@code person} based on the {@code tag}s it has."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void removeAllTagReferencesOfPerson(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert person !\u003d null : \"Invalid person object, person is a null.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag oldTag : person.getTags()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Set\u003cPerson\u003e tagSet \u003d tagPersonSetMap.get(oldTag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Objects.requireNonNull(tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (!tagSet.contains(person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new NoSuchElementException(MESSAGE_ERROR_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagSet.remove(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (tagSet.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                tagPersonSetMap.remove(oldTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds all references to {@code tagPersonSetMap} from this {@code person} based on the {@code tag}s it has."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void addAllTagReferencesOfPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert person !\u003d null : \"Invalid person object, person is a null.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag newTag : person.getTags()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Optional.ofNullable(tagPersonSetMap.get(newTag))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    .ifPresentOrElse("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        set -\u003e set.add(person), () -\u003e tagPersonSetMap.put(newTag, new HashSet\u003c\u003e(List.of(person))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void updateExistingPersonTags(Person oldPerson, Person newPerson) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeAllTagReferencesOfPerson(oldPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addAllTagReferencesOfPerson(newPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addNewPersonTags(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addAllTagReferencesOfPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deletePersonTags(Person person) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeAllTagReferencesOfPerson(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagPersonSetMap.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void copy(TagManager otherTagManager) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HashMap\u003cTag, Set\u003cPerson\u003e\u003e newMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag tag : otherTagManager.getTags()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            newMap.put(tag, new HashSet\u003c\u003e(otherTagManager.getPersonsUnderTag(tag)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagPersonSetMap.putAll(newMap);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(o instanceof TagManagerImpl)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagPersonSetMap.equals(((TagManagerImpl) o).tagPersonSetMap);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Abstract class that keeps track of the structure of {@code Tag} relations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * This is in-place of {@code Tag}s keeping track of their own sub-{@code tag}s and super-{@code tag}s."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * When relationships between {@code Tag}s are modified, the changes are updated here so that all parts of the program"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * have access to the most updated {@code Tag} relations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public abstract class TagTree implements ReadOnlyTagTree {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract Map\u003cTag, Set\u003cTag\u003e\u003e getTagSubTagMap();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns all {@code tag}s with at least one sub-tag."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract Set\u003cTag\u003e getSuperTags();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns all sub-{@code tag}s of the {@code tag} argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag {@code tag} which sub-{@code tag}s being queried."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return {@code Set} of {@code tag}s containing sub-{@code tag}s of the {@code tag} argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract Set\u003cTag\u003e getSubTagsOf(Tag tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns all sub-tags below {@code tag} in the tag-hierarchy."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * I.e. All sub-tags of {@code tag}, all sub-tags of those sub-tags, etc."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract Set\u003cTag\u003e getSubTagsRecursive(Tag tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds the {@code subTag} as a sub-tag of the {@code superTag}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This method should check for cyclic dependencies and prevent linking a lower-level tag as a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * parent to a higher-level tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param superTag {@code tag} to be assigned a sub-tag."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param subTag {@code tag} to be assigned as a sub-tag."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract void addSubTagTo(Tag superTag, Tag subTag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes the {@code subTag} from the set of sub-tags belonging to the {@code superTag}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param superTag {@code tag} to have a sub-tag removed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param subTag {@code tag} to be removed from the super-tag."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract void removeSubTagFrom(Tag superTag, Tag subTag);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes a {@code tag} from the tag tree."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Implementation should connect all child tags of the argument {@code tag}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * to all parent tags of the argument {@code tag}s."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag Tag to be deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if there is a direct path from the {@code superTag} to the {@code subTag} in the tag tree,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * returns false otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract boolean isSubTagOf(Tag superTag, Tag subTag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Copies the equivalent mapping of the {@code otherTree} to the current tag tree."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract void copy(ReadOnlyTagTree otherTree);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if the TagTree contains {@code tag} which indicates that it has at least one sub-tag."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return getTagSubTagMap().containsKey(tag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edits the sub-tags of a given {@code supertag}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If a sub-tag to add is already present, no change will be performed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If a sub-tag to be removed is not present, no change will be performed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param superTag {@code tag} for which the sub-tags will be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param subTagsToAdd Set of sub-{@code tag}s to be added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param subTagsToRemove Set of sub-{@code tag}s to be removed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void editSubTagsOf(Tag superTag, Set\u003cTag\u003e subTagsToAdd, Set\u003cTag\u003e subTagsToRemove) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeSubTagsFrom(superTag, subTagsToRemove);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addSubTagsTo(superTag, subTagsToAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes the {@code tag} and all its sub-tags from the tag tree."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag Tag to start the deletion."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndAllSubTags(Tag tag) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        getSubTagsOf(tag).stream().forEach(subTag -\u003e deleteTagAndAllSubTags(subTag));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        deleteTag(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds all tags in {@code tagSetToAdd} as sub-tags to {@code tag}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag Tag to be assigned with sub-tags."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tagSetToAdd Set of tags to be added as sub-tags."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addSubTagsTo(Tag tag, Set\u003cTag\u003e tagSetToAdd) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag tagToAdd : tagSetToAdd) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addSubTagTo(tag, tagToAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes all tags in {@code tagSetToRemove} as sub-tags from {@code tag}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tag Tag to have sub-tags removed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tagSetToRemove Set of tags to be removed from a super-tag."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removeSubTagsFrom(Tag tag, Set\u003cTag\u003e tagSetToRemove) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Tag tagToRemove : tagSetToRemove) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            removeSubTagFrom(tag, tagToRemove);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagTreeImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.exceptions.TagCyclicDependencyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * A concrete implementation of the TagTree. It uses two HashMaps to keep track of the two-way relationship of tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TagTreeImpl extends TagTree {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String MESSAGE_NOT_VALID_SUBTAG \u003d \"%s is not a valid subtag of %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String MESSAGE_NOT_VALID_SUPERTAG \u003d \"%s is not a valid supertag of %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String MESSAGE_CYCLIC_RELATIONSHIP \u003d \"%s is already a subtag of %s. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            + \"Avoid cyclic relationships!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Map\u003cTag, Set\u003cTag\u003e\u003e tagSubTagMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Map\u003cTag, Set\u003cTag\u003e\u003e tagSuperTagMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a clean TagTreeImpl."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagTreeImpl() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSubTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSuperTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Copies the argument {@code toCopy} tree into this tree."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagTreeImpl(ReadOnlyTagTree toCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        copy(toCopy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a TagTreeImpl with the given {@code tagSubTagMap} and {@code tagSuperTagMap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagTreeImpl(Map\u003cTag, Set\u003cTag\u003e\u003e tagSubTagMap, Map\u003cTag, Set\u003cTag\u003e\u003e tagSuperTagMap) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagSubTagMap \u003d tagSubTagMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagSuperTagMap \u003d tagSuperTagMap;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void copy(ReadOnlyTagTree toCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSubTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSuperTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        toCopy.getTagSubTagMap().entrySet().stream().forEach(entry -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            // Adds a copy of the key-value mapping to the subtag map."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagSubTagMap.put(entry.getKey(), new HashSet\u003c\u003e(Set.copyOf(entry.getValue())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            // For each sub-tag, adds an equivalent reverse mapping to the super tag map."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            entry.getValue().stream().forEach(subTag -\u003e tagSuperTagMap.merge("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                subTag, new HashSet\u003c\u003e(Set.of(entry.getKey())), (set1, set2) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    set1.addAll(set2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    return set1; })); });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSuperTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSubTagMap.keySet();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Map\u003cTag, Set\u003cTag\u003e\u003e getTagSubTagMap() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Map\u003cTag, Set\u003cTag\u003e\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSubTagMap.entrySet().stream().forEach(entry -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                tempMap.put(entry.getKey(), Set.copyOf(entry.getValue())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return Map.copyOf(tempMap);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Map\u003cTag, Set\u003cTag\u003e\u003e getInternalTagSubTagMap() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSubTagMap;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSubTagsOf(Tag tag) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSubTagMap.containsKey(tag) ? Set.copyOf(tagSubTagMap.get(tag)) : Set.of();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSubTagsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e finalSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Consumer\u003cTag\u003e consumer \u003d new Consumer\u003cTag\u003e() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            public void accept(Tag tag) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                if (tagSubTagMap.get(tag) \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                finalSet.addAll(tagSubTagMap.get(tag));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                tagSubTagMap.get(tag).forEach(subtag -\u003e accept(subtag));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        consumer.accept(tag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return finalSet;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addSubTagTo(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assert !superTag.equals(Tag.ALL_TAGS_TAG) \u0026\u0026 !subTag.equals(Tag.ALL_TAGS_TAG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isSubTagOf(subTag, superTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new TagCyclicDependencyException(superTag, subTag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addToMapSet(tagSubTagMap, superTag, subTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addToMapSet(tagSuperTagMap, subTag, superTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds the {@code tagToAdd} to the set of sub-tags assigned to {@code key}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds a new HashSet if the {@code key} did not have any sub-tags."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void addToMapSet(Map\u003cTag, Set\u003cTag\u003e\u003e map, Tag key, Tag tagToAdd) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        map.merge(key, new HashSet\u003c\u003e(Set.of(tagToAdd)), (set1, set2) -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            set1.addAll(set2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return set1; });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removeSubTagFrom(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (subTag.equals(Tag.ALL_TAGS_TAG)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            removeSubTagsFrom(superTag, tagSubTagMap.get(superTag));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeEntryFromMap(tagSubTagMap, superTag, subTag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        removeEntryFromMap(tagSuperTagMap, subTag, superTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes {@code tagToRemove} from the set corresponding to the {@code key}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If the resulting set is empty, the key-value pair is removed from the map."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void removeEntryFromMap(Map\u003cTag, Set\u003cTag\u003e\u003e map, Tag key, Tag tagToRemove) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        map.get(key).remove(tagToRemove);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (map.get(key).isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            map.remove(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e subTagSet \u003d tagSubTagMap.get(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasChildTags \u003d subTagSet !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e superTagSet \u003d tagSuperTagMap.get(tag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasParentTags \u003d superTagSet !\u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasParentTags \u0026\u0026 hasChildTags) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            connectParentWithChildTags(superTagSet, subTagSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasParentTags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            superTagSet.forEach(superTag -\u003e removeEntryFromMap(tagSubTagMap, superTag, tag));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasChildTags) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            subTagSet.forEach(subTag -\u003e removeEntryFromMap(tagSuperTagMap, subTag, tag));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSuperTagMap.remove(tag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSubTagMap.remove(tag);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds the {@code subTagSet} to existing sub-tags for each tag in the superTagSet."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void connectParentWithChildTags(Set\u003cTag\u003e superTagSet, Set\u003cTag\u003e subTagSet) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        superTagSet.forEach(superTag -\u003e addSubTagsTo(superTag, subTagSet));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if {@code subtag} is below {@code superTag} along the tag hierarchy."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isSubTagOf(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasNoSubTags \u003d tagSubTagMap.get(superTag) \u003d\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasNoSubTags) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean hasSubTagAsDirectChild \u003d tagSubTagMap.get(superTag).contains(subTag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (hasSubTagAsDirectChild) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSubTagMap.get(superTag).stream().anyMatch(childTag -\u003e isSubTagOf(childTag, subTag));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return \"Sub-tag map: \" + tagSubTagMap + \"\\nSuper-tag map: \" + tagSuperTagMap;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true if the superTag is a direct parent of the subTag. Method mainly used for testing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    boolean hasDirectSuperTag(Tag subTag, Tag superTag) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagSuperTagMap.get(subTag) !\u003d null \u0026\u0026 tagSuperTagMap.get(subTag).contains(superTag);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(object instanceof TagTreeImpl)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TagTreeImpl otherTree \u003d (TagTreeImpl) object;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return otherTree.tagSuperTagMap.equals(tagSuperTagMap)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    \u0026\u0026 otherTree.tagSubTagMap.equals(tagSubTagMap);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 217
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagCyclicDependencyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TagCyclicDependencyException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagCyclicDependencyException(Tag subTag, Tag superTag) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(String.format(\"Cyclic dependency detected! Avoid adding %s as a sub-tag of %s\", superTag, subTag));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.association.FauxPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: add associated persons to the following"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Set\u003cFauxPerson\u003e associatedPersonsTest1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest1.add(new FauxPerson(getSamplePersons()[2]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest1.add(new FauxPerson(getSamplePersons()[0]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest1.add(new FauxPerson(getSamplePersons()[4]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Set\u003cFauxPerson\u003e associatedPersonsTest2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest2.add(new FauxPerson(getSamplePersons()[5]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest2.add(new FauxPerson(getSamplePersons()[3]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest2.add(new FauxPerson(getSamplePersons()[1]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Set\u003cFauxPerson\u003e associatedPersonsTest3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest3.add(new FauxPerson(getSamplePersons()[1]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest3.add(new FauxPerson(getSamplePersons()[3]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersonsTest3.add(new FauxPerson(getSamplePersons()[5]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            new Event(new Description(\"Night run\"), new Time(\"25-10-2020 21:30\"), associatedPersonsTest1),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            new Event(new Description(\"CS2103 Meeting\"), new Time(\"30-10-2020 14:00\"), associatedPersonsTest2),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            new Event(new Description(\"CCA outing\"), new Time(\"03-11-2020 20:00\"), associatedPersonsTest3)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static ReadOnlyCalendar getSampleCalendar() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Calendar sampleCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            sampleCalendar.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return sampleCalendar;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 36,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Calendar}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public interface CalendarStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Returns Calendar data as a {@link ReadOnlyCalendar}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @see #getCalendarFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Saves the given {@link ReadOnlyCalendar} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param calendar cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @see #saveCalendar(ReadOnlyCalendar)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.association.FauxPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final List\u003cJsonAdaptedFauxPerson\u003e associatedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                            @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                            @JsonProperty(\"associatedPersons\") List\u003cJsonAdaptedFauxPerson\u003e associatedPersons) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (associatedPersons !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            this.associatedPersons.addAll(associatedPersons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        associatedPersons.addAll(source.getAssociatedPersons().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .map(JsonAdaptedFauxPerson::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                    Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // associatedPersons"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        final List\u003cFauxPerson\u003e attendees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        for (JsonAdaptedFauxPerson fauxPerson : associatedPersons) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            attendees.add(fauxPerson.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        final Set\u003cFauxPerson\u003e modelAssociatedPersons \u003d new HashSet\u003c\u003e(attendees);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Event(modelDescription, modelTime, modelAssociatedPersons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 89,
      "bangyiwu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFauxPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.association.FauxPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class JsonAdaptedFauxPerson {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static final String regex \u003d \" /break/ \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final String displayName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final String hashCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code JsonAdaptedFauxPerson} with the given data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonAdaptedFauxPerson(String data) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        String[] info \u003d data.split(regex, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        displayName \u003d info[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        hashCode \u003d info[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Converts a given {@code FauxPerson} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonAdaptedFauxPerson(FauxPerson source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        displayName \u003d source.displayName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        hashCode \u003d source.personHashCode.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return displayName + regex + hashCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Converts this Jackson-friendly adapted FauxPerson object into the model\u0027s {@code FauxPerson} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted FauxPerson."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public FauxPerson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!FauxPerson.isValidDisplayName(displayName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new IllegalValueException(FauxPerson.MESSAGE_CONSTRAINTS_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!FauxPerson.isValidHashCode(hashCode)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new IllegalValueException(FauxPerson.MESSAGE_CONSTRAINTS_HASHCODE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new FauxPerson(displayName, Integer.parseInt(hashCode));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final String eventDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final String eventTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final String startDateOfReminders;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given Reminder details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"eventDescription\") String eventDescription,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                               @JsonProperty(\"eventTime\") String eventTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                               @JsonProperty(\"startDateOfReminders\") String startDateOfReminders) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.startDateOfReminders \u003d startDateOfReminders;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        eventDescription \u003d source.getEventToRemind().getDescription().fullDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        eventTime \u003d source.getEventToRemind().getTime().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        startDateOfReminders \u003d source.getReminderDate().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (eventDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!Description.isValidDescription(eventDescription)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        final Description modelDescription \u003d new Description(eventDescription);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (eventTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!Time.isValidTime(eventTime)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        final Time modelTime \u003d new Time(eventTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        final Event modelEvent \u003d new Event(modelDescription, modelTime, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (startDateOfReminders \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    \"Starting date of reminders\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!Time.isValidTime(startDateOfReminders)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        final String modelStartDate \u003d startDateOfReminders;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return new Reminder(modelEvent, modelStartDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCalendarStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * A class to access Calendar data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class JsonCalendarStorage implements CalendarStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCalendarStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonCalendarStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return readCalendar(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Similar to {@link #readCalendar()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Optional\u003cJsonSerializableCalendar\u003e jsonCalendar \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                filePath, JsonSerializableCalendar.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        if (!jsonCalendar.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return Optional.of(jsonCalendar.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        saveCalendar(calendar, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Similar to {@link #saveCalendar(ReadOnlyCalendar)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(calendar);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCalendar(calendar), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRemindersStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * A class to access Calendar data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class JsonRemindersStorage implements RemindersStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCalendarStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public JsonRemindersStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Optional\u003cReadOnlyReminders\u003e readReminders() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return readReminders(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Similar to {@link #readReminders()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Optional\u003cReadOnlyReminders\u003e readReminders(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        Optional\u003cJsonSerializableReminders\u003e jsonReminders \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                filePath, JsonSerializableReminders.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (!jsonReminders.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return Optional.of(jsonReminders.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void saveReminders(ReadOnlyReminders reminders) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        saveReminders(reminders, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Similar to {@link #saveReminders(ReadOnlyReminders)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void saveReminders(ReadOnlyReminders reminders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(reminders);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReminders(reminders), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for json use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * An Immutable Calendar that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "@JsonRootName(value \u003d \"calendar\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "class JsonSerializableCalendar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Constructs a {@code JsonSerializableCalendar} with the given events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonSerializableCalendar(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Converts a given {@code ReadOnlyCalendar} into this class for json use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCalendar}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public JsonSerializableCalendar(ReadOnlyCalendar source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Converts this calendar into the model\u0027s {@code Calendar} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Calendar toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            if (calendar.hasEvent(event)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            calendar.addEvent(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableReminders.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.RemindersImpl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * An Immutable Reminders that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "@JsonRootName(value \u003d \"reminders\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "class JsonSerializableReminders {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Constructs a {@code JsonSerializableReminders} with the given events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public JsonSerializableReminders(@JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Converts a given {@code ReadOnlyReminders} into this class for json use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableReminders}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public JsonSerializableReminders(ReadOnlyReminders source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminders.addAll(source.getRemindersList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Converts this reminders into the model\u0027s {@code RemindersImpl} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public RemindersImpl toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        RemindersImpl remindersImpl \u003d new RemindersImpl();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            if (remindersImpl.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            remindersImpl.addReminder(reminder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return remindersImpl;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTagTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * An Immutable TagTree that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "@JsonRootName(value \u003d \"tagtree\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "class JsonSerializableTagTree {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final Map\u003cJsonAdaptedTag, Set\u003cJsonAdaptedTag\u003e\u003e tagSubTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructs a {@code JsonSerializableTagTree} with the given map."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public JsonSerializableTagTree(@JsonProperty(\"tagSubTagMap\") Map\u003cJsonAdaptedTag,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Set\u003cJsonAdaptedTag\u003e\u003e tagSubTagMap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagSubTagMap.putAll(tagSubTagMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Converts a given {@code ReadOnlyTagTree} into this class for json use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTagTree}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public JsonSerializableTagTree(ReadOnlyTagTree source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagSubTagMap.putAll(convertTagMapToJsonTagMap(source.getTagSubTagMap()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Converts the tag set map into a {@code JsonAdaptedTag} set map."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Map\u003cJsonAdaptedTag, Set\u003cJsonAdaptedTag\u003e\u003e convertTagMapToJsonTagMap(Map\u003cTag, Set\u003cTag\u003e\u003e tagMap) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HashMap\u003cJsonAdaptedTag, Set\u003cJsonAdaptedTag\u003e\u003e jsonMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagMap.entrySet().stream().forEach(entry -\u003e jsonMap.put("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                new JsonAdaptedTag(entry.getKey()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                entry.getValue().stream().map(JsonAdaptedTag::new).collect(Collectors.toSet())));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return jsonMap;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Converts this tag tree into the model\u0027s {@code TagTree} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws IllegalValueException if there were any data constaints violated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TagTree toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HashMap\u003cTag, Set\u003cTag\u003e\u003e modifiableTagSubTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HashMap\u003cTag, Set\u003cTag\u003e\u003e modifiableTagSuperTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Map.Entry\u003cJsonAdaptedTag, Set\u003cJsonAdaptedTag\u003e\u003e entry : tagSubTagMap.entrySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Tag superTag \u003d entry.getKey().toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Set\u003cTag\u003e subTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            for (JsonAdaptedTag adaptedTag : entry.getValue()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Tag subTag \u003d adaptedTag.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                subTagSet.add(subTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                modifiableTagSuperTagMap.merge(subTag,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        new HashSet\u003c\u003e(Set.of(superTag)), (set1, set2) -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        set1.addAll(set2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        return set1; });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            modifiableTagSubTagMap.put(superTag, subTagSet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new TagTreeImpl(modifiableTagSubTagMap, modifiableTagSuperTagMap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTagTreeStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class to access TagTree data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class JsonTagTreeStorage implements TagTreeStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTagTreeStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public JsonTagTreeStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getTagTreeFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Optional\u003cReadOnlyTagTree\u003e readTagTree() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return readTagTree(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Similar to {@link #readTagTree()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Optional\u003cReadOnlyTagTree\u003e readTagTree(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Optional\u003cJsonSerializableTagTree\u003e jsonTagTree \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                filePath, JsonSerializableTagTree.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!jsonTagTree.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Optional.of(jsonTagTree.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void saveTagTree(ReadOnlyTagTree tagTree) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        saveTagTree(tagTree, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Similar to {@link #saveTagTree(ReadOnlyTagTree)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tagTree tag tree to be saved. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void saveTagTree(ReadOnlyTagTree tagTree, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(tagTree);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTagTree(tagTree), filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RemindersStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RemindersImpl}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public interface RemindersStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Returns Reminders data as a {@link ReadOnlyReminders}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Optional\u003cReadOnlyReminders\u003e readReminders() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @see #getRemindersFilePath"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Optional\u003cReadOnlyReminders\u003e readReminders(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Saves the given {@link ReadOnlyReminders} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @param reminders cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void saveReminders(ReadOnlyReminders reminders) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @see #saveReminders(ReadOnlyReminders)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void saveReminders(ReadOnlyReminders reminders, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public interface Storage extends AddressBookStorage, CalendarStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        UserPrefsStorage, TagTreeStorage, RemindersStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    Optional\u003cReadOnlyReminders\u003e readReminders() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    void saveReminders(ReadOnlyReminders reminders) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Path getTagTreeFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Optional\u003cReadOnlyTagTree\u003e readTagTree() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void saveTagTree(ReadOnlyTagTree tagTree) throws IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 8,
      "LinkedInk": 11,
      "-": 32,
      "bangyiwu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TagTreeStorage tagTreeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private RemindersStorage remindersStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                          CalendarStorage calendarStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                          TagTreeStorage tagTreeStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                          RemindersStorage remindersStorage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.tagTreeStorage \u003d tagTreeStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.remindersStorage \u003d remindersStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Attempting to read AddressBook data from file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Attempting to write AddressBook to data file: \" + filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return readCalendar(calendarStorage.getCalendarFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Attempting to read Calendar data from file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return calendarStorage.readCalendar(filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        saveCalendar(calendar, calendarStorage.getCalendarFilePath());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Attempting to write Calendar to data file: \" + filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        calendarStorage.saveCalendar(calendar, filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TagTree methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getTagTreeFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTreeStorage.getTagTreeFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Optional\u003cReadOnlyTagTree\u003e readTagTree() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return readTagTree(tagTreeStorage.getTagTreeFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Optional\u003cReadOnlyTagTree\u003e readTagTree(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Attempting to read TagTree data from file: \" + filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagTreeStorage.readTagTree(filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void saveTagTree(ReadOnlyTagTree tagTree) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        saveTagTree(tagTree, tagTreeStorage.getTagTreeFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void saveTagTree(ReadOnlyTagTree tagTree, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        logger.fine(\"Attempting to write TagTree to data file: \" + filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTreeStorage.saveTagTree(tagTree, filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TagTree methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return remindersStorage.getRemindersFilePath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Optional\u003cReadOnlyReminders\u003e readReminders() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return readReminders(remindersStorage.getRemindersFilePath());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Optional\u003cReadOnlyReminders\u003e readReminders(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        logger.fine(\"Attempting to read Reminders data from file: \" + filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return remindersStorage.readReminders(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void saveReminders(ReadOnlyReminders reminders) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        saveReminders(reminders, remindersStorage.getRemindersFilePath());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void saveReminders(ReadOnlyReminders reminders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        logger.fine(\"Attempting to write reminders to data file: \" + filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        remindersStorage.saveReminders(reminders, filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 28,
      "LinkedInk": 43,
      "-": 76,
      "bangyiwu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TagTreeStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Represents a storage for {@link seedu.address.model.tag.ReadOnlyTagTree}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public interface TagTreeStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Path getTagTreeFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns TagTree data as a {@link ReadOnlyTagTree}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Optional\u003cReadOnlyTagTree\u003e readTagTree() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @see #readTagTree()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    Optional\u003cReadOnlyTagTree\u003e readTagTree(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Saves the given {@link ReadOnlyTagTree} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param tagTree cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void saveTagTree(ReadOnlyTagTree tagTree) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @see #saveTagTree(ReadOnlyTagTree)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    void saveTagTree(ReadOnlyTagTree tagTree, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // do not understand why, but when the following field is named anything else with the corresponding change"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // to EventListCard.fxml, the GUI breaks and the blue boxes are no longer shown around the display name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: fix problem mentioned right above, or maybe not"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Creates a {@code EventCode} with the given {@code Event} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        description.setText(event.getDescription().fullDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        time.setText(event.getTime().toDisplayString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        // no sorting here, as to show it in order of user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        event.getAssociatedPersons().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .forEach(fauxPerson -\u003e tags.getChildren().add(new Label(fauxPerson.displayName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 11,
      "solkim-83": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Creates a {@code EventListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "solkim-83": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w10-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to Athena\u0027s user guide here: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IntroWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Controller for an introduction page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class IntroWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String INTRO_MESSAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \"Hi! I\u0027m Athena! As this is your first time opening the app, I will give you a\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \" short run-through of some commands to get you started.\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Although Athena provides storage and management for contacts and events, the methods\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \" detailed below apply to the contacts component.\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Let\u0027s add a person named Jane Doe to the list; do: \\\"add n/Jane Doe\\\"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Hmm... it seems like we have quite a few contacts to sift through. Let\u0027s narrow the\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \" list down to her alone; do: \\\"find Jane Doe\\\"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Great! It seems like you\u0027ve managed to get Jane\u0027s number. Let\u0027s add it to her contact;\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \" do: \\\"edit 1 p/91234567\\\"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Looks like you no longer need Jane\u0027s contact - let\u0027s find her first, then delete it\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \" with \\\"delete 1\\\"\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"Good job! You\u0027ve just learnt how to add, find, edit and delete a contact.\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \"If you\u0027d like a more detailed guide, click on the \\\"Help\\\" button found in\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            + \" the toolbar.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(IntroWindow.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private static final String FXML \u003d \"IntroWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private Label introMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Creates a new IntroWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * @param root Stage to use as the root of the IntroWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public IntroWindow(Stage root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        introMessage.setWrapText(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        introMessage.setText(INTRO_MESSAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Creates a new IntroWindow."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public IntroWindow() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Shows the intro window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        logger.fine(\"Showing introduction page about the application.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Hides the intro window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Focuses on the intro window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private ResultPanel resultPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private IntroWindow introWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private ReminderWindow reminderWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private StackPane resultPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        introWindow \u003d new IntroWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminderWindow \u003d new ReminderWindow(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "         * ResultPanel contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "         * in CommandBox or ResultPanel."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        resultPanel \u003d new ResultPanel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        resultPanelPlaceholder.getChildren().add(resultPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                logic.getCalendarFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Opens the introduction window. Note that focusing is not required as the window opens as"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * the app opens."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void handleIntro() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        introWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Opens the reminder window. Note that focusing is not required as the window opens as"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * the app opens."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void handleReminders() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminderWindow.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Executes the command to show the introduction. As the introduction command should not be"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * accessible by the user, a commandText should not exist for it and the entire execution"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * should be handled in the back-end. Note that as this method cannot throw a CommandException"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * or a ParseException, handling can be ignored. The lack of an access modifier is intentional"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * - method is supposed to be package private."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    CommandResult executeIntroCommand() throws CommandException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        CommandResult commandResult \u003d logic.executeIntro();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        resultPanel.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        handleIntro();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Executes the command to show the reminders alert. As the ShowReminderEvent command should not be"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * accessible by the user, a commandText should not exist for it and the entire execution"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * should be handled in the back-end. Note that as this method cannot throw a CommandException"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * or a ParseException, handling can be ignored. The lack of an access modifier is intentional"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * - method is supposed to be package private."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    CommandResult executeShowReminderCommand() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        CommandResult commandResult \u003d logic.execute(\"show -r\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        resultPanel.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        handleReminders();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            resultPanel.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            resultPanel.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 2,
      "fyshhh": 35,
      "solkim-83": 9,
      "-": 187,
      "bangyiwu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "public class ReminderWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(IntroWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private static final String FXML \u003d \"ReminderWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    private Label reminderMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Creates a new ReminderWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ReminderWindow(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        super(FXML, new Stage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        System.out.println(logic \u003d\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminderMessage.setWrapText(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        reminderMessage.setText(buildAlertMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Shows the intro window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        logger.fine(\"Showing upcoming reminders\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Hides the reminder window."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Focuses on the reminder window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Builds the string for the pop up reminder window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public String buildAlertMessage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        String alertMessage \u003d \"Here are your active reminders: \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        System.out.println(logic \u003d\u003d null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        ObservableList\u003cReminder\u003e reminders \u003d logic.getFilteredReminderList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        if (reminders.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            return \"You currently do not have any reminders\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            for (Reminder r: reminders) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                if (r.getReminderDate().getTime().isAfter(LocalDateTime.now())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                        || r.getReminderDate().getTime().isEqual(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    alertMessage +\u003d r.toString() + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        return alertMessage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * A ui for the column that displays the results of the method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class ResultPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private static final String FXML \u003d \"ResultPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public ResultPanel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * This method is invoked when the command is executed successfully."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "      * @param feedbackToUser the feedback to display to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 8,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public StatusBarFooter(Path addressbookSaveLocation, Path calendarSaveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        saveLocationStatus.setText(\"Addressbook Save Location: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + Paths.get(\".\").resolve(addressbookSaveLocation).toString()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + \"Calendar Save Location: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                + Paths.get(\".\").resolve(calendarSaveLocation).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            File contactsSave \u003d new File(\"./data/addressbook.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            File eventsSave \u003d new File(\"./data/calendar.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            if (!contactsSave.isFile() \u0026\u0026 !eventsSave.isFile()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                mainWindow.executeIntroCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            if (logic.getReminders().hasRemindersDue()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                mainWindow.executeShowReminderCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 6,
      "-": 89,
      "bangyiwu": 3
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 1,
      "solkim-83": 33
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "solkim-83": 8
    }
  },
  {
    "path": "src/main/resources/view/IntroWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Introduction\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u003cLabel fx:id\u003d\"introMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 31
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "         title\u003d\"Athena\" minWidth\u003d\"990\" minHeight\u003d\"450\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \u003cVBox HBox.hgrow\u003d\"NEVER\" minWidth\u003d\"350\" maxWidth\u003d\"350\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"320\" prefWidth\u003d\"320\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                  HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            \u003cVBox fx:id\u003d\"eventList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"320\" prefWidth\u003d\"320\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                  HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "              \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 5,
      "fyshhh": 14,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/ReminderWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Reminders\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        \u003cImage url\u003d\"@/images/exclamation_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u003cLabel fx:id\u003d\"reminderMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bangyiwu": 31
    }
  },
  {
    "path": "src/main/resources/view/ResultPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"tagged\" : [ \"CS2103\" ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/data/JsonSerializableTagTreeTest/invalidTagTree.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "  \"tagSubTagMap\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"science\" : [ \"science comp\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"computing\" : [ \"science comp\" ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"sciencecomp\" : [ \"ma1101r\", \"cs2131s\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"nus\" : [ \"architecture\", \"science\", \"computing\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableTagTreeTest/sampleValidTagTree.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "  \"tagSubTagMap\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"science\" : [ \"sciencecomp\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"computing\" : [ \"sciencecomp\" ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"sciencecomp\" : [ \"ma1101r\", \"cs1231s\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"nus\" : [ \"architecture\", \"science\", \"computing\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 8
    }
  },
  {
    "path": "src/test/data/JsonTagTreeStorageTest/invalidTagTree.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "  \"map-variable-name-has-been-changed\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"science\" : [ \"sciencecomp\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"computing\" : [ \"sciencecomp\" ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"sciencecomp\" : [ \"ma1101r\", \"cs2131s\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    \"nus\" : [ \"architecture\", \"science\", \"computing\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 8
    }
  },
  {
    "path": "src/test/data/JsonTagTreeStorageTest/notJsonFormatTagTree.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/booleaninput/BooleanInputTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.commons.core.booleaninput;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class BooleanInputTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INPUT_BOOLEAN_VALID_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INPUT_BOOLEAN_VALID_FALSE \u003d \"f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INPUT_BOOLEAN_INVALID \u003d \"not valid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INPUT_BOOLEAN_EMPTY \u003d \"    \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final BooleanInput BOOLEAN_TRUE \u003d BooleanInput.isTrue();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final BooleanInput BOOLEAN_FALSE \u003d BooleanInput.isFalse();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void isValidBooleanInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(BooleanInput.isValidBooleanInput(INPUT_BOOLEAN_VALID_TRUE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(BooleanInput.isValidBooleanInput(INPUT_BOOLEAN_VALID_FALSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(BooleanInput.isValidBooleanInput(INPUT_BOOLEAN_INVALID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(BooleanInput.isValidBooleanInput(INPUT_BOOLEAN_EMPTY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void ofInput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(BOOLEAN_TRUE, BooleanInput.ofInput(INPUT_BOOLEAN_VALID_TRUE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(BOOLEAN_FALSE, BooleanInput.ofInput(INPUT_BOOLEAN_VALID_FALSE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e BooleanInput.ofInput(INPUT_BOOLEAN_INVALID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.AddContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.ListContactCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.storage.JsonCalendarStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.storage.JsonRemindersStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.storage.JsonTagTreeStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        JsonCalendarStorage calendarStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new JsonCalendarStorage(temporaryFolder.resolve(\"calendar.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonTagTreeStorage tagTreeStorage \u003d new JsonTagTreeStorage(temporaryFolder.resolve(\"tagtree.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        JsonRemindersStorage reminderStorage \u003d new JsonRemindersStorage(temporaryFolder.resolve(\"reminders.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                calendarStorage, userPrefsStorage, tagTreeStorage, reminderStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String deleteCommand \u003d \"delete -c 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String listCommand \u003d ListContactCommand.COMMAND_WORD + \" \" + ListContactCommand.COMMAND_TYPE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(listCommand, ListContactCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: implement testing for saving of calendar and tagtree"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        JsonCalendarStorage calendarStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new JsonCalendarIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCalendar.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonTagTreeStorage tagTreeStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                new JsonTagTreeStorage(temporaryFolder.resolve(\"ioExceptionTagTree.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        JsonRemindersStorage remindersStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                new JsonRemindersStorage(temporaryFolder.resolve(\"ioExceptionReminders.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                calendarStorage, userPrefsStorage, tagTreeStorage, remindersStorage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String addCommand \u003d AddContactCommand.COMMAND_WORD + \" \" + AddContactCommand.COMMAND_TYPE + NAME_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook(model.getAddressBook()).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private static class JsonCalendarIoExceptionThrowingStub extends JsonCalendarStorage {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private JsonCalendarIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 4,
      "LinkedInk": 27,
      "fyshhh": 7,
      "-": 149,
      "bangyiwu": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.AddEventDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddEventCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class AddEventCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event validEvent \u003d new EventBuilder().withDescription(\"Meeting\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(model.getCalendar()).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.addEvent(validEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand.AddEventDescriptor validEventDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(validEvent.getDescription())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(validEvent.getTime()).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        assertCommandSuccess(new AddEventCommand(validEventDescriptor), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event eventInList \u003d model.getCalendar().getEventList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand.AddEventDescriptor eventInListDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(eventInList.getDescription())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(eventInList.getTime()).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        assertCommandFailureEvent(new AddEventCommand(eventInListDescriptor),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                model, AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 14,
      "solkim-83": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.AddEventDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand.AddEventDescriptor validEventDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(validEvent.getDescription())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(validEvent.getTime()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEventDescriptor).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand.AddEventDescriptor validEventDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(validEvent.getDescription())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(validEvent.getTime()).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEventDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertThrows(CommandException.class, AddEventCommand.MESSAGE_DUPLICATE_EVENT, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                addEventCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event meeting \u003d new EventBuilder().withDescription(\"Meeting\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event consultation \u003d new EventBuilder().withDescription(\"Consultation\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand.AddEventDescriptor meetingDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(meeting.getDescription())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(meeting.getTime()).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand.AddEventDescriptor consultationDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(consultation.getDescription())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(consultation.getTime()).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand addMeetingCommand \u003d new AddEventCommand(meetingDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand addConsultationCommand \u003d new AddEventCommand(consultationDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventCommand addMeetingCommandCopy \u003d new AddEventCommand(meetingDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(addMeetingCommand.equals(addConsultationCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Contains a empty sortedPersons list to enable {@code getSortedFilteredPersonList()} as add event will use it."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private final SortedList\u003cPerson\u003e sortedPersons \u003d new SortedList\u003c\u003e("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(FXCollections.observableArrayList())));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public ObservableList\u003cPerson\u003e getSortedFilteredPersonList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return sortedPersons;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * A Model stub that always accept the event being added."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Contains a empty sortedPersons list to enable {@code getSortedFilteredPersonList()} as add event will use it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        private final SortedList\u003cPerson\u003e sortedPersons \u003d new SortedList\u003c\u003e("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(FXCollections.observableArrayList())));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        public ObservableList\u003cPerson\u003e getSortedFilteredPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "            return sortedPersons;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 46,
      "solkim-83": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.ClearEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class ClearEventCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_emptyCalendar_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model model \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(new ClearEventCommand(), model, ClearEventCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_nonEmptyCalendar_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model model \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.setCalendar(new Calendar());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(new ClearEventCommand(), model, ClearEventCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 5,
      "solkim-83": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String VALID_TAG_MODULE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String VALID_DESCRIPTION_LUNCH \u003d \"Lunch with Friends\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String VALID_DESCRIPTION_BREAKFAST \u003d \"Breakfast with Mum\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String VALID_TIME_LUNCH \u003d \"10-10-2020 13:00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String VALID_TIME_BREAKFAST \u003d \"15-12-2020 09:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String REMOVE_TAG_DESC_MODULE \u003d \" \" + PREFIX_REMOVE_TAG + VALID_TAG_MODULE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String REMOVE_TAG_DESC_FRIEND \u003d \" \" + PREFIX_REMOVE_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby/\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String INVALID_TAG_ADD_DESC \u003d \" \" + PREFIX_TAG + \"*\"; // wildcard not allowed for add tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToAdd(VALID_TAG_FRIEND).withTagsToRemove(VALID_TAG_MODULE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToAdd(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final EditEventCommand.EditEventDescriptor DESC_LUNCH;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final EditEventCommand.EditEventDescriptor DESC_BREAKFAST;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DESC_LUNCH \u003d new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_LUNCH)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                .withTime(VALID_TIME_LUNCH).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DESC_BREAKFAST \u003d new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAKFAST)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                .withTime(VALID_TIME_BREAKFAST).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredContactList \u003d new ArrayList\u003c\u003e(actualModel.getSortedFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertEquals(expectedFilteredContactList, actualModel.getSortedFilteredPersonList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * - the calendar, filtered event list and selected event in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static void assertCommandFailureEvent(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Calendar expectedCalendar \u003d new Calendar(actualModel.getCalendar());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        List\u003cEvent\u003e expectedFilteredEventList \u003d new ArrayList\u003c\u003e(actualModel.getSortedFilteredEventList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertEquals(expectedCalendar, actualModel.getCalendar());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertEquals(expectedFilteredEventList, actualModel.getSortedFilteredEventList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getSortedFilteredPersonList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person person \u003d model.getSortedFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(Arrays.asList(splitName[0]));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(1, model.getSortedFilteredPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static void showEventAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getSortedFilteredEventList().size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event event \u003d model.getSortedFilteredEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        final String[] splitDescription \u003d event.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        predicate.setKeywords(Arrays.asList(splitDescription[0]));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertEquals(1, model.getSortedFilteredEventList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 15,
      "fyshhh": 3,
      "solkim-83": 50,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.DeleteEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class DeleteEventCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event eventToDelete \u003d model.getSortedFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManagerBuilder().withCalendar(model.getCalendar()).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandFailureEvent(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event eventToDelete \u003d model.getSortedFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(model.getCalendar()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showNoEvent(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of calendar list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCalendar().getEventList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandFailureEvent(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteFirstCommand \u003d new DeleteEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteSecondCommand \u003d new DeleteEventCommand(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private void showNoEvent(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        model.updateFilteredEventList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(model.getSortedFilteredEventList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 4,
      "solkim-83": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BREAKFAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LUNCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAKFAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_BREAKFAST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.ClearEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * EditEventCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class EditEventCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(new Calendar(model.getCalendar())).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.setEvent(model.getSortedFilteredEventList().get(0), editedEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Index indexLastEvent \u003d Index.fromOneBased(model.getSortedFilteredEventList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event lastEvent \u003d model.getSortedFilteredEventList().get(indexLastEvent.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EventBuilder eventInList \u003d new EventBuilder(lastEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event editedEvent \u003d eventInList.withDescription("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                VALID_DESCRIPTION_BREAKFAST).withTime(VALID_TIME_BREAKFAST).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAKFAST)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                        .withTime(VALID_TIME_BREAKFAST).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(indexLastEvent, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(new Calendar(model.getCalendar())).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.setEvent(lastEvent, editedEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventCommand(INDEX_FIRST_EVENT, new EditEventCommand.EditEventDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event editedEvent \u003d model.getSortedFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(new Calendar(model.getCalendar())).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event eventInFilteredList \u003d model.getSortedFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(eventInFilteredList).withDescription(VALID_DESCRIPTION_BREAKFAST).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                        new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAKFAST).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withCalendar(new Calendar(model.getCalendar())).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        expectedModel.setEvent(model.getSortedFilteredEventList().get(0), editedEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_duplicateEventUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event firstEvent \u003d model.getSortedFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(firstEvent).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_SECOND_EVENT, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandFailureEvent(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_duplicateEventFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // edit event in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Event eventInList \u003d model.getCalendar().getEventList().get(INDEX_SECOND_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventDescriptorBuilder(eventInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandFailureEvent(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAKFAST).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandFailureEvent(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_invalidEventIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCalendar().getEventList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_BREAKFAST).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandFailureEvent(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        final EditEventCommand standardCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, DESC_LUNCH);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor copyDescriptor \u003d new EditEventCommand.EditEventDescriptor(DESC_LUNCH);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand commandWithSameValues \u003d new EditEventCommand(INDEX_FIRST_EVENT, copyDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearEventCommand()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_EVENT, DESC_LUNCH)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_EVENT, DESC_BREAKFAST)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 6,
      "solkim-83": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BREAKFAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LUNCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAKFAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_BREAKFAST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class EditEventDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventCommand.EditEventDescriptor(DESC_LUNCH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(DESC_LUNCH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(DESC_LUNCH.equals(DESC_LUNCH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(DESC_LUNCH.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(DESC_LUNCH.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(DESC_LUNCH.equals(DESC_BREAKFAST));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        EditEventCommand.EditEventDescriptor editedLunch \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "                new EditEventDescriptorBuilder(DESC_LUNCH).withDescription(VALID_DESCRIPTION_BREAKFAST).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(DESC_LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        editedLunch \u003d new EditEventDescriptorBuilder(DESC_LUNCH).withTime(VALID_TIME_BREAKFAST).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(DESC_LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "solkim-83": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.FindEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindEventCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class FindEventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d new DescriptionContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        firstPredicate.setKeywords(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d new DescriptionContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        secondPredicate.setKeywords(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "solkim-83": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.logic.commands.events.ListEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListEventCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class ListEventCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model \u003d new ModelManagerBuilder().withCalendar(getTypicalCalendar()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        expectedModel \u003d new ModelManagerBuilder().withCalendar(model.getCalendar()).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, ListEventCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, ListEventCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "solkim-83": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddContactCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withName(\"George\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook(model.getAddressBook()).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validPerson), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(new AddContactCommand(personInList), model, AddContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "LinkedInk": 3,
      "fyshhh": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        AddContactCommand addContactCommand \u003d new AddContactCommand(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertThrows(CommandException.class, AddContactCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            addContactCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 12,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/ClearContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class ClearContactCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model model \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(new ClearContactCommand(), model, ClearContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(new ClearContactCommand(), model, ClearContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 5,
      "fyshhh": 4,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/DeleteContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * {@code DeleteContactCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person personToDelete \u003d model.getSortedFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManagerBuilder().withAddressBook(model.getAddressBook()).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person personToDelete \u003d model.getSortedFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook(model.getAddressBook()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteFirstCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteSecondCommand \u003d new DeleteContactCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand deleteFirstCommandCopy \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.getSortedFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 4,
      "LinkedInk": 4,
      "fyshhh": 16,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/EditContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * EditContactCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EditContactCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new AddressBook(model.getAddressBook())).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedModel.setPerson(model.getSortedFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getSortedFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person lastPerson \u003d model.getSortedFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTagsToAdd(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToRemove(\"*\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new AddressBook(model.getAddressBook())).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person editedPerson \u003d model.getSortedFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new AddressBook(model.getAddressBook())).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person personInFilteredList \u003d model.getSortedFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        Model expectedModel \u003d new ModelManagerBuilder().withAddressBook("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                new AddressBook(model.getAddressBook())).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedModel.setPerson(model.getSortedFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person firstPerson \u003d model.getSortedFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_removeTagNotPresent_throwCommandException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Only one invalid tag"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                new EditPersonDescriptorBuilder().withTagsToRemove(\"doesnotexist\").build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e editContactCommand.execute(model));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // An invalid tag amongst other valid tag inputs"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditContactCommand editContactCommand2 \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        .withTagsToRemove(\"doesnotexist\", \"*\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        .withName(\"someName\").build());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditContactCommand editContactCommand3 \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        .withTagsToRemove(\"doesnotexist\", \"friends\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        .withName(\"someName\").build());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e editContactCommand2.execute(model));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e editContactCommand3.execute(model));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        final EditContactCommand standardCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand commandWithSameValues \u003d new EditContactCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearContactCommand()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 33,
      "LinkedInk": 10,
      "fyshhh": 30,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // different tags to add -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTagsToAdd(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // different tags to remove -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTagsToRemove(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 7,
      "fyshhh": 2,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/FindContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.parser.contacts.FindContactCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindContactCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class FindContactCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate firstPredicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        firstPredicate.setNameKeywords(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate secondPredicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        secondPredicate.setNameKeywords(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand findFirstCommand \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand findSecondCommand \u003d new FindContactCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand findFirstCommandCopy \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommandParser().parse(\" n/Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedModel.updateFilteredPersonList(command.getPredicate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getSortedFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        command \u003d new FindContactCommandParser().parse(\" e/example\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedModel.updateFilteredPersonList(command.getPredicate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        assertEquals(getTypicalPersons(), model.getSortedFilteredPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 13,
      "LinkedInk": 3,
      "fyshhh": 9,
      "-": 48,
      "bangyiwu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/ListContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListContactCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        expectedModel \u003d new ModelManagerBuilder().withAddressBook(model.getAddressBook()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/contacts/PermaSortContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " * Contains unit tests for PermaSortCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class PermaSortContactCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().withAddressBook(getTypicalAddressBook()).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void execute_validSortingOfInternalList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        PermaSortContactCommand permaSortContactCommand \u003d new PermaSortContactCommand(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        String expectedMessage \u003d \"Sorted by name in alphabetical order\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManagerBuilder().withAddressBook(model.getAddressBook()).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        expectedModel.permaSortContacts(new Comparator\u003cPerson\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                return o1.getName().fullName.compareToIgnoreCase(o2.getName().fullName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        assertCommandSuccess(permaSortContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void execute_invalidIndexSortAddressBook_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        PermaSortContactCommand permaSortContactCommand \u003d new PermaSortContactCommand(Index.fromZeroBased(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        assertCommandFailure(permaSortContactCommand, model, PermaSortContactCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 2,
      "bangyiwu": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.general.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 3,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.general.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model model \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 3,
      "fyshhh": 3,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tags/AddTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.buildTestContactTagIntegrationManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS1231S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_NOT_IN_TREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.ContactTagIntegrationManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_tagAlreadyPresent_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddTagCommand command \u003d new AddTagCommand(TAG_SCIENCE, Set.of(TAG_CS1231S), Set.of());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_indicesOutOfRange_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddTagCommand command \u003d new AddTagCommand(TAG_CS2040S_NOT_TREE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_CS1231S), Set.of(Index.fromOneBased(999)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_subTagNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddTagCommand command \u003d new AddTagCommand(TAG_CS2040S_NOT_TREE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_NOT_IN_TREE), Set.of());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddTagCommand command \u003d new AddTagCommand(TAG_CS2040S_NOT_TREE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_CS1231S), Set.of(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.getTagTree().getTagSubTagMap().containsKey(TAG_CS2040S_NOT_TREE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.getTagTree().getSubTagsOf(TAG_CS2040S_NOT_TREE).contains(TAG_CS1231S));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.getAddressBook().getPersonsWithTag(TAG_CS2040S_NOT_TREE).isEmpty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private class ModelStubWithTagAndPersons extends ModelStub {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private AddressBook addressBook \u003d manager.getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private TagTree tagTree \u003d manager.getTagTree();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void addSubTagTo(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagTree.addSubTagTo(superTag, subTag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void addPersonToTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addressBook.addPersonToTag(tag, person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return manager.hasTag(tag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public ObservableList\u003cPerson\u003e getSortedFilteredPersonList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook.getPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public TagTree getTagTree() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagTree;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public AddressBook getAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 102,
      "LinkedInk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tags/DeleteTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.PERSON_MA1101R;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.buildTestContactTagIntegrationManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS1231S;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_MA1101R;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE_COMP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.booleaninput.BooleanInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.ContactTagIntegrationManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_tagNotPresent_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagsAndPersons model \u003d new ModelStubWithTagsAndPersons();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        DeleteTagCommand command \u003d new DeleteTagCommand(TAG_CS2040S_NOT_TREE, BooleanInput.isFalse());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_deleteTag_success() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagsAndPersons model \u003d new ModelStubWithTagsAndPersons();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        DeleteTagCommand command \u003d new DeleteTagCommand(TAG_SCIENCE_COMP, BooleanInput.isFalse());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person person \u003d model.getPersonsWithTag(TAG_SCIENCE_COMP).stream().findAny().get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.remove(TAG_SCIENCE_COMP);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person expectedPerson \u003d new Person(person.getName(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getPhone(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getEmail(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                person.getAddress(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Checks if the parent-tag child-tag reassignment has been done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.getTagTree().getSubTagsOf(TAG_SCIENCE).containsAll(Set.of(TAG_CS1231S, TAG_MA1101R)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Checks if tag is removed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.hasTag(TAG_SCIENCE_COMP));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Checks if person has tag removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.hasPerson(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_deleteTagRecursive_success() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagsAndPersons model \u003d new ModelStubWithTagsAndPersons();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        DeleteTagCommand command \u003d new DeleteTagCommand(TAG_SCIENCE, BooleanInput.isTrue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.hasTag(TAG_SCIENCE)); //tag deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.hasTag(TAG_SCIENCE_COMP)); //1 level away deleted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.hasTag(TAG_MA1101R)); //2 levels away deleted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Check if a person with a recursively deleted tag has the tag removed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(PERSON_MA1101R.getTags());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.remove(TAG_MA1101R);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person expectedMA1101RPersonWithoutTag \u003d new Person(PERSON_MA1101R.getName(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_MA1101R.getPhone(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_MA1101R.getEmail(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_MA1101R.getAddress(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.hasPerson(expectedMA1101RPersonWithoutTag));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private class ModelStubWithTagsAndPersons extends ModelStub {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private AddressBook addressBook \u003d manager.getAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private TagTree tagTree \u003d manager.getTagTree();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return manager.hasTag(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public TagTree getTagTree() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagTree;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public AddressBook getAddressBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            manager.deleteTag(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void deleteTagRecursive(Tag tag) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            manager.deleteTagRecursive(tag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public Set\u003cPerson\u003e getPersonsWithTag(Tag tag) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook.getPersonsWithTag(tag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public Set\u003cTag\u003e getSubTagsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagTree.getSubTagsRecursive(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 129,
      "LinkedInk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tags/EditTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.PERSON_CS1231S_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.buildTestContactTagIntegrationManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_ARCHITECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS1231S;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_MA1101R;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_NUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE_COMP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.ContactTagIntegrationManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class EditTagCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_tagToEditNotPresent_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command \u003d new EditTagCommand(TAG_CS2040S_NOT_TREE, Set.of(), Set.of(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_CS1231S), Set.of());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_argumentNotValid_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Remove person who already does not have the tag"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command \u003d new EditTagCommand(TAG_MA1101R, Set.of(), Set.of(Index.fromZeroBased(0)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(), Set.of());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Add person who already has the tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command2 \u003d new EditTagCommand(TAG_CS1231S, Set.of(Index.fromZeroBased(0)), Set.of(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(), Set.of());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command2.execute(model));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Remove child-tag that is not a child-tag"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command3 \u003d new EditTagCommand(TAG_SCIENCE, Set.of(), Set.of(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(), Set.of(TAG_NUS));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command3.execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Add child-tag that is already a child-tag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command4 \u003d new EditTagCommand(TAG_SCIENCE, Set.of(), Set.of(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_SCIENCE_COMP), Set.of());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command4.execute(model));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_attemptedCyclicTagAdded_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command \u003d new EditTagCommand(TAG_SCIENCE, Set.of(), Set.of(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_NUS), Set.of());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command2 \u003d new EditTagCommand(TAG_MA1101R, Set.of(), Set.of(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(TAG_NUS), Set.of());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command2.execute(model));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ModelStubWithTagAndPersons model \u003d new ModelStubWithTagAndPersons();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand command \u003d new EditTagCommand(TAG_CS1231S, Set.of(Index.fromZeroBased(2)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Set.of(Index.fromZeroBased(0)), Set.of(TAG_MA1101R), Set.of());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Test case depends on the underlying order in ContactTagIntegrationManagerTest"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.getPersonsWithTag(TAG_CS1231S).contains(PERSON_CS1231S_1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.getPersonsWithTag(TAG_CS1231S).size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.getChildTags(TAG_CS1231S).contains(TAG_MA1101R));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e(PERSON_CS1231S_1.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        newTagSet.remove(TAG_CS1231S);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person expectedPerson \u003d new Person(PERSON_CS1231S_1.getName(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_CS1231S_1.getPhone(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_CS1231S_1.getEmail(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_CS1231S_1.getAddress(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newTagSet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(model.hasPerson(expectedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        command \u003d new EditTagCommand(TAG_NUS, Set.of(), Set.of(), Set.of(), Set.of(TAG_ARCHITECTURE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(model.getChildTags(TAG_NUS).contains(TAG_ARCHITECTURE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private class ModelStubWithTagAndPersons extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private AddressBook addressBook \u003d manager.getAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        private TagTree tagTree \u003d manager.getTagTree();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void addSubTagTo(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagTree.addSubTagTo(superTag, subTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void addPersonToTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addressBook.addPersonToTag(tag, person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return manager.hasTag(tag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void removePersonFromTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addressBook.removePersonFromTag(tag, person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public void removeChildTagFrom(Tag parentTag, Tag childTag) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tagTree.removeSubTagFrom(parentTag, childTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public ObservableList\u003cPerson\u003e getSortedFilteredPersonList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook.getPersonList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public TagTree getTagTree() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagTree;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public AddressBook getAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public Set\u003cTag\u003e getChildTags(Tag tag) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagTree.getSubTagsOf(tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public boolean isSubTagOf(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return tagTree.isSubTagOf(superTag, subTag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public Set\u003cPerson\u003e getPersonsWithTag(Tag tag) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook.getPersonsWithTag(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 167,
      "LinkedInk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tags/ListTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ListTagCommand.INDICATOR_SUPERTAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ListTagCommand.constructTagSummaryMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ListTagCommand.parsePersonSetIntoString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.PERSON_CS1231S_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.PERSON_CS1231S_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.ContactTagIntegrationManagerTest.buildTestIntegrationAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_COMPUTING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_NUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.buildTestTree;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ListTagCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String STRING_IF_EMPTY \u003d \"empty string rep\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Model createTestModel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new ModelManagerBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withAddressBook(buildTestIntegrationAddressBook())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTagTree(buildTestTree()).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parsePersonSetIntoString_validSet_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String message \u003d parsePersonSetIntoString(Set.of(PERSON_CS1231S_1, PERSON_CS1231S_2),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                STRING_IF_EMPTY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(message.contains(PERSON_CS1231S_1.getName().toString())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                \u0026\u0026 message.contains(PERSON_CS1231S_2.getName().toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parsePersonSetIntoString_emptySet_emptyStringReturned() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(STRING_IF_EMPTY, parsePersonSetIntoString(Set.of(), STRING_IF_EMPTY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void constructTagSummaryMessage_validTags_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Model model \u003d createTestModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String message \u003d constructTagSummaryMessage(model, model.getPersonTags(), model.getSuperTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Check if supertag identification is shown"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(message.contains(TAG_NUS + INDICATOR_SUPERTAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Check if persons are shown"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(message.contains(parsePersonSetIntoString(model.getPersonsWithTag(TAG_COMPUTING), STRING_IF_EMPTY)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 51,
      "LinkedInk": 4,
      "fyshhh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/tags/ViewTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.commands.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ListTagCommandTest.createTestModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ViewTagCommand.INDICATOR_NO_DIRECTLY_TAGGED_CONTACTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ViewTagCommand.INDICATOR_NO_RELATED_CONTACTS_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ViewTagCommand.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.commands.tags.ViewTagCommand.constructSetTagDetails;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_NUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ViewTagCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void constructSetTagDetails_validAndInvalidTags_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Model model \u003d createTestModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String message \u003d constructSetTagDetails(model, Set.of(TAG_CS2040S_NOT_TREE, TAG_NUS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(message.contains(String.format(MESSAGE_INVALID_TAG, TAG_CS2040S_NOT_TREE)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(message.contains(INDICATOR_NO_DIRECTLY_TAGGED_CONTACTS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(message.contains(INDICATOR_NO_RELATED_CONTACTS_FOUND));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 24,
      "fyshhh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.AddContactCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.ClearContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteContactCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.FindContactCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.ListContactCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand.AddEventDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.DeleteEventCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.FindEventCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.ListEventCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.AddEventDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.testutil.EventUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_addContact() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(new AddContactCommand(person), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_clearContact() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearContactCommand.COMMAND_WORD + \" \" + ClearContactCommand.COMMAND_TYPE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                instanceof ClearContactCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                ClearContactCommand.COMMAND_WORD + \" \" + ClearContactCommand.COMMAND_TYPE + \" 3\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                instanceof ClearContactCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_deleteContact() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                DeleteContactCommand.COMMAND_WORD + \" \" + DeleteContactCommand.COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(new DeleteContactCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_editContact() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand command \u003d (EditContactCommand) parser.parseCommand(EditContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + EditContactCommand.COMMAND_TYPE + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditContactCommand actualCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(command, actualCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_findContact() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String phoneKeyword \u003d \"96789\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String emailKeyword \u003d \"hotmail\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand command \u003d (FindContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                FindContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                        + FindContactCommand.COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        + PREFIX_NAME + keywords.stream().collect(Collectors.joining(\" \")) + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        + PREFIX_PHONE + phoneKeyword + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                        + PREFIX_EMAIL + emailKeyword);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate builtPredicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        builtPredicate.setNameKeywords(keywords);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        builtPredicate.setPhoneKeyword(phoneKeyword);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        builtPredicate.setEmailKeyword(emailKeyword);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(new FindContactCommand(builtPredicate), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_listContact() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertTrue(parser.parseCommand(ListContactCommand.COMMAND_WORD + \" \" + ListContactCommand.COMMAND_TYPE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                instanceof ListContactCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                ListContactCommand.COMMAND_WORD + \" \" + ListContactCommand.COMMAND_TYPE + \" 3\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                instanceof ListContactCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        AddEventDescriptor addEventDescriptor \u003d new AddEventDescriptorBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withDescription(event.getDescription())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withTime(event.getTime()).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(EventUtil.getAddCommand(event));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        assertEquals(new AddEventCommand(addEventDescriptor), command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_deleteEvent() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                DeleteEventCommand.COMMAND_WORD + \" \" + DeleteEventCommand.COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                        + INDEX_FIRST_EVENT.getOneBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(new DeleteEventCommand(INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_editEvent() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(event).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditEventCommand command \u003d (EditEventCommand) parser.parseCommand(EditEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + EditEventCommand.COMMAND_TYPE + \" \" + INDEX_FIRST_EVENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + EventUtil.getEditEventDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(new EditEventCommand(INDEX_FIRST_EVENT, descriptor), command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_findEvent() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindEventCommand command \u003d (FindEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                FindEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                        + FindEventCommand.COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                        + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        DescriptionContainsKeywordsPredicate builtPredicate \u003d new DescriptionContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        builtPredicate.setKeywords(keywords);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertEquals(new FindEventCommand(builtPredicate), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public void parseCommand_listEvent() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD + \" \" + ListEventCommand.COMMAND_TYPE)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                instanceof ListEventCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                ListEventCommand.COMMAND_WORD + \" \" + ListEventCommand.COMMAND_TYPE + \" 3\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                instanceof ListEventCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 17,
      "LinkedInk": 6,
      "fyshhh": 95,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.Tag.ALL_TAGS_IDENTIFIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.Tag.ALL_TAGS_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parseTagWildcard_wildcardInputWithWildcardFalse_throwsParseException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(ALL_TAGS_IDENTIFIER));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parseTagWildcard_validInputWithWildcardFalse_returnsTag() throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1, false));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parseTagWildcard_wildcardInputWithWildcardTrue_returnsWildcardTag() throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(ALL_TAGS_TAG, ParserUtil.parseTag(ALL_TAGS_IDENTIFIER, true));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parseTagsWildcard_collectionWithWildcardTagAndFalse_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ParserUtil.parseTags(Arrays.asList(ALL_TAGS_IDENTIFIER, VALID_TAG_1), false));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parseTagsWildcard_collectionWithWildcardTagAndTrue_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(ALL_TAGS_IDENTIFIER, VALID_TAG_1), true);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d Set.of(ALL_TAGS_TAG, new Tag(VALID_TAG_1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 32,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.AddContactCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private AddContactCommandParser parser \u003d new AddContactCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddContactCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 12,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/DeleteContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.DeleteContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * outside of the DeleteContactCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * same path through the DeleteContactCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class DeleteContactCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private DeleteContactCommandParser parser \u003d new DeleteContactCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteContactCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 9,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/EditContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_ADD_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMOVE_TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMOVE_TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MODULE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.Tag.ALL_TAGS_IDENTIFIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EditContactCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_REMOVE_TAG + ALL_TAGS_IDENTIFIER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private EditContactCommandParser parser \u003d new EditContactCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseFailure(parser, \"1\", EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_ADD_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + REMOVE_TAG_DESC_FRIEND + REMOVE_TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToAdd(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToRemove(VALID_TAG_FRIEND, VALID_TAG_MODULE).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // tags to add"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTagsToAdd(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // tags to remove"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMOVE_TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTagsToRemove(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + REMOVE_TAG_DESC_MODULE + REMOVE_TAG_DESC_FRIEND + REMOVE_TAG_DESC_MODULE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToAdd(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToRemove(VALID_TAG_MODULE, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTagsToRemove(ALL_TAGS_IDENTIFIER).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 30,
      "fyshhh": 19,
      "-": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/contacts/FindContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.FindContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class FindContactCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private FindContactCommandParser parser \u003d new FindContactCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_validNameArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice Bob\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" \\n Alice \\n \\t Bob  \\t\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_validPhoneArg_returnsFindCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setPhoneKeyword(\"91234\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_PHONE + \"91234\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_PHONE + \"\\n \\t 91234  \\t\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_validTagArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setTagKeywords(List.of(\"CS2103\", \"CS2030\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \"CS2103 \" + PREFIX_TAG + \"CS2030\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \" \\n \\t CS2103  \\t \" + PREFIX_TAG + \" \\nCS2030\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                expectedFindContactCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_multipleValidArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(List.of(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setEmailKeyword(\"hotmail\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setPhoneKeyword(\"91234\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String parseString \u003d \" \" + PREFIX_NAME + \"Alice Bob \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + PREFIX_EMAIL + \"hotmail \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + PREFIX_PHONE + \"91234\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        assertParseSuccess(parser, parseString, new FindContactCommand(predicate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_oneEmptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \" n/\", ContactContainsFieldsPredicate.NON_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \" n/Alex Bob p/91234 e/\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ContactContainsFieldsPredicate.NON_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \" t/CS2103 t/\", Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 49,
      "fyshhh": 16,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tags/AddTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.tags.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_NAME_VALID \u003d \" n/testtag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Tag TAG_VALID \u003d new Tag(\"testtag\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_NAME_INVALID \u003d \"n/   \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INDEX_STRING_ONE \u003d \" i/1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INDEX_STRING_TWO \u003d \" i/2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INDEX_STRING_INVALID \u003d \" i/c\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cIndex\u003e INDEX_SET \u003d Set.of(Index.fromOneBased(1), Index.fromOneBased(2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_CS2030 \u003d \" t/cs2030\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_CS2040 \u003d \" t/cs2040\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_INVALID \u003d \" t/+-*/\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cTag\u003e TAG_SET \u003d Set.of(new Tag(\"cs2030\"), new Tag(\"cs2040\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Only indices specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddTagCommand expectedCommand \u003d new AddTagCommand(TAG_VALID, Set.of(), INDEX_SET);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseSuccess(parser, TAG_NAME_VALID + INDEX_STRING_ONE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + INDEX_STRING_TWO, expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Only tags specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedCommand \u003d new AddTagCommand(TAG_VALID, TAG_SET, Set.of());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseSuccess(parser, TAG_NAME_VALID + TAG_STRING_CS2030"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + TAG_STRING_CS2040, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Both tags and indices specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedCommand \u003d new AddTagCommand(TAG_VALID, TAG_SET, INDEX_SET);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseSuccess(parser, TAG_NAME_VALID + INDEX_STRING_TWO + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + TAG_STRING_CS2040 + INDEX_STRING_ONE + TAG_STRING_CS2030, expectedCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_invalidTagNameInput_parseExceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(TAG_NAME_INVALID));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(TAG_NAME_INVALID + INDEX_STRING_ONE + TAG_STRING_CS2030));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_invalidOptionalArguments_parseExceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(TAG_NAME_VALID + INDEX_STRING_INVALID + INDEX_STRING_ONE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(TAG_NAME_VALID + INDEX_STRING_ONE + TAG_STRING_INVALID));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_noOptionalArguments_parseExceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(TAG_NAME_VALID));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tags/DeleteTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.booleaninput.BooleanInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.tags.DeleteTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeleteTagCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String BOOLEAN_STRING_INVALID \u003d \" r/not valid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String BOOLEAN_STRING_TRUE \u003d \" r/true\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String BOOLEAN_STRING_FALSE \u003d \" r/false\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final BooleanInput BOOLEAN_TRUE \u003d BooleanInput.isTrue();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final BooleanInput BOOLEAN_FALSE \u003d BooleanInput.isFalse();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_NAME_VALID \u003d \"validtag\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_VALID \u003d \" t/\" + TAG_NAME_VALID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Tag TAG_VALID \u003d new Tag(TAG_NAME_VALID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_INVALID \u003d \" t/invalid tag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_validInputs_success() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        DeleteTagCommand expectedCommand \u003d new DeleteTagCommand(TAG_VALID, BOOLEAN_TRUE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(TAG_STRING_VALID + BOOLEAN_STRING_TRUE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedCommand \u003d new DeleteTagCommand(TAG_VALID, BOOLEAN_FALSE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(TAG_STRING_VALID + BOOLEAN_STRING_FALSE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // No recursive boolean input given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(TAG_STRING_VALID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_invalidInputs_parseExceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Invalid tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(TAG_STRING_INVALID + BOOLEAN_STRING_TRUE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Missing tag"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                parser.parse(BOOLEAN_STRING_TRUE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tags/EditTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.commands.tags.EditTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class EditTagCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_NAME_VALID \u003d \" n/testtag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Tag TAG_VALID \u003d new Tag(\"testtag\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_NAME_INVALID \u003d \"n/   \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INDEX_STRING_ONE \u003d \" i/1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String INDEX_STRING_TWO \u003d \" i/2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cIndex\u003e INDEX_SET \u003d Set.of(Index.fromOneBased(1), Index.fromOneBased(2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String REMOVE_INDEX_STRING_ONE \u003d \" ri/1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String REMOVE_INDEX_STRING_TWO \u003d \" ri/2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String REMOVE_INDEX_STRING_INVALID \u003d \" ri/c\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cIndex\u003e REMOVE_INDEX_SET \u003d Set.of(Index.fromOneBased(1), Index.fromOneBased(2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_CS2030 \u003d \" t/cs2030\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_CS2040 \u003d \" t/cs2040\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String TAG_STRING_EMPTY \u003d \" t/   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cTag\u003e TAG_SET \u003d Set.of(new Tag(\"cs2030\"), new Tag(\"cs2040\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String REMOVE_TAG_STRING_CS2030 \u003d \" rt/cs2030\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String REMOVE_TAG_STRING_CS2040 \u003d \" rt/cs2040\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String REMOVE_TAG_STRING_INVALID \u003d \" rt/+-*/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Set\u003cTag\u003e REMOVE_TAG_SET \u003d Set.of(new Tag(\"cs2030\"), new Tag(\"cs2040\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private EditTagCommandParser parser \u003d new EditTagCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_missingName_throwParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(REMOVE_TAG_STRING_CS2030 + INDEX_STRING_ONE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(REMOVE_TAG_STRING_CS2030 + TAG_NAME_INVALID"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + INDEX_STRING_ONE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_noEditArguments_throwParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(TAG_NAME_VALID));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(TAG_NAME_VALID + TAG_STRING_EMPTY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_invalidEditArgumentFormat_throwParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(TAG_NAME_VALID + REMOVE_INDEX_STRING_INVALID));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(TAG_NAME_VALID + TAG_STRING_CS2030"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + REMOVE_TAG_STRING_INVALID));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_validArguments_success() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand expectedCommand \u003d new EditTagCommand(TAG_VALID, INDEX_SET, Set.of(), TAG_SET, Set.of());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        EditTagCommand actualCommand \u003d parser.parse(TAG_NAME_VALID + INDEX_STRING_ONE + INDEX_STRING_TWO"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + TAG_STRING_CS2030 + TAG_STRING_CS2040);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedCommand \u003d new EditTagCommand(TAG_VALID, INDEX_SET, REMOVE_INDEX_SET, TAG_SET, REMOVE_TAG_SET);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(TAG_NAME_VALID + REMOVE_TAG_STRING_CS2030 + TAG_STRING_CS2040"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + REMOVE_TAG_STRING_CS2040 + INDEX_STRING_TWO + INDEX_STRING_ONE + REMOVE_INDEX_STRING_ONE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + REMOVE_INDEX_STRING_TWO + TAG_STRING_CS2030));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/tags/ViewTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.logic.parser.tags;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.tags.ViewTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ViewTagCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private ViewTagCommandParser parser \u003d new ViewTagCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \"1 e/\" + VALID_EMAIL_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \" \\n   \\t\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_invalidTag_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TAG + \"@ #\", Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void parse_validMessage_success() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input \u003d TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e setToSearch \u003d Set.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ViewTagCommand expectedCommand \u003d new ViewTagCommand(setToSearch);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedCommand, parser.parse(input));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 52,
      "fyshhh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.TagManagerImplTest.BENSON_EDITED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.TagManagerImplTest.TAG_FRIENDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.TagManagerImplTest.TAG_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.TagManagerImplTest.TAG_OWES_MONEY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getPersonsWithTag_newPerson_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(addressBook.getPersonsWithTag(TAG_FRIENDS).contains(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getPersonWithTag_editPerson_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.addPerson(BENSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.setPerson(BENSON, BENSON_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(addressBook.getPersonsWithTag(TAG_OWES_MONEY).isEmpty());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(addressBook.getPersonsWithTag(TAG_MODULE).contains(BENSON_EDITED));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Checks that the Person object under the friends tag is the new edited Person object instead of the old."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(addressBook.getPersonsWithTag(TAG_FRIENDS).contains(BENSON));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(addressBook.getPersonsWithTag(TAG_FRIENDS).contains(BENSON_EDITED));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getPersonWithTag_deletePerson_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.removePerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(addressBook.getPersonsWithTag(TAG_FRIENDS).contains(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getPersonWithTag_emptyTag_emptySetReturned() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(new AddressBook().getPersonsWithTag(TAG_FRIENDS).isEmpty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 39,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ContactTagIntegrationManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_COMPUTING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_MA1101R;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE_COMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.buildTestTree;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ContactTagIntegrationManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_CS1231S_1 \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person1\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"cs1231s\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_CS1231S_2 \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person2\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"cs1231s\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_MA1101R \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person3\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"ma1101r\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_SCIENCECOMP \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person4\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"sciencecomp\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_COMPUTING \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person5\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"computing\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_COMPUTING_SCIENCE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person6\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"computing\", \"science\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person PERSON_CS2040S_NOT_IN \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withName(\"person7\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withTags(\"CS2040S\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final List\u003cPerson\u003e TEST_PERSONS \u003d List.of(PERSON_CS1231S_1, PERSON_CS1231S_2,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            PERSON_MA1101R, PERSON_SCIENCECOMP, PERSON_COMPUTING, PERSON_COMPUTING_SCIENCE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static AddressBook buildTestIntegrationAddressBook() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        addressBook.setPersons(TEST_PERSONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ContactTagIntegrationManager buildTestContactTagIntegrationManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new ContactTagIntegrationManager(buildTestIntegrationAddressBook(), buildTestTree());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getAllPersonsUnderTag_validTag_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e expectedSet1 \u003d Set.of(PERSON_COMPUTING_SCIENCE, PERSON_COMPUTING, PERSON_SCIENCECOMP,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                PERSON_CS1231S_1, PERSON_CS1231S_2, PERSON_MA1101R);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSet1, manager.getAllPersonsUnderTag(TAG_COMPUTING));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e expectedSet2 \u003d Set.of(PERSON_SCIENCECOMP, PERSON_CS1231S_1, PERSON_CS1231S_2, PERSON_MA1101R);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSet2, manager.getAllPersonsUnderTag(TAG_SCIENCE_COMP));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e expectedSet3 \u003d Set.of(PERSON_MA1101R);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSet3, manager.getAllPersonsUnderTag(TAG_MA1101R));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getAllPersonsUnderTag_tagNotInTree_emptySetReturned() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(buildTestContactTagIntegrationManager().getAllPersonsUnderTag(TAG_CS2040S_NOT_TREE).isEmpty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag_validTag_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTag(TAG_SCIENCE_COMP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person expectedScienceCompPerson \u003d new PersonBuilder(PERSON_SCIENCECOMP)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(manager.getAddressBook().hasPerson(expectedScienceCompPerson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(manager.getAddressBook().getPersonsWithTag(TAG_SCIENCE_COMP).isEmpty());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag_tagNotInTree_noChange() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTag(TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(manager, buildTestContactTagIntegrationManager());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagRecursive_validTag_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTagRecursive(TAG_SCIENCE_COMP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person expectedPersonMA1101R \u003d new PersonBuilder(PERSON_MA1101R).withTags().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person expectedPersonScienceComp \u003d new PersonBuilder(PERSON_SCIENCECOMP).withTags().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(manager.getAddressBook().hasPerson(expectedPersonMA1101R));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(manager.getAddressBook().hasPerson(expectedPersonScienceComp));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagRecursive_tagNotInTree_noChange() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTagRecursive(TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(manager, buildTestContactTagIntegrationManager());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndDirectContacts_validTag_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int expectedSize \u003d manager.getAddressBook().getPersonList().size()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "               - manager.getAddressBook().getPersonsWithTag(TAG_SCIENCE_COMP).size();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTagAndDirectContacts(TAG_SCIENCE_COMP);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSize, manager.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndDirectContacts_tagNotInTree_noChange() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTagAndDirectContacts(TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(manager, buildTestContactTagIntegrationManager());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndDirectContactsRecursive_validTag_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int expectedSize \u003d manager.getAddressBook().getPersonList().size()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                - manager.getAllPersonsUnderTag(TAG_COMPUTING).size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTagAndDirectContactsRecursive(TAG_COMPUTING);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSize, manager.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagAndDirectContactsRecursive_tagNotInTree_noChange() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactTagIntegrationManager manager \u003d buildTestContactTagIntegrationManager();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        manager.deleteTagAndDirectContactsRecursive(TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(manager, buildTestContactTagIntegrationManager());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.ContactContainsFieldsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "// TODO: include/edit tests to include calendar and tagtree, split them into different methods if needed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManagerBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void getSortedFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getSortedFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: edit this test case with calendar and tagTree"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        modelManager \u003d new ModelManagerBuilder().withAddressBook(addressBook).withUserPrefs(userPrefs).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManagerBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withAddressBook(addressBook).withUserPrefs(userPrefs).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManagerBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withAddressBook(differentAddressBook).withUserPrefs(userPrefs).build()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        modelManager.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManagerBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withAddressBook(addressBook).withUserPrefs(userPrefs).build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManagerBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "                .withAddressBook(addressBook).withUserPrefs(differentUserPrefs).build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 5,
      "LinkedInk": 13,
      "-": 122,
      "bangyiwu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagTreeFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTagTreeFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ContactContainsFieldsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ContactContainsFieldsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate firstPredicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        firstPredicate.setNameKeywords(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate secondPredicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        secondPredicate.setNameKeywords(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate firstPredicateCopy \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        firstPredicateCopy.setNameKeywords(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        PersonBuilder testPerson1 \u003d new PersonBuilder().withName(\"Alice John\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        PersonBuilder testPerson2 \u003d new PersonBuilder().withName(\"Doe Dark\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(List.of(\"Alice\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson1.build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(List.of(\"Alice\", \"Doe\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson1.build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson2.build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Matching email with matching name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setEmailKeyword(\"hotmail\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testPerson1.withEmail(\"abcde@hotmail\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson1.build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Matching email with no name keywords specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testPerson2.withEmail(\"bcdef@hotmail.com\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(List.of());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson1.build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson2.build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Match tags contained by person1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setTagKeywords(List.of(\"CS2103\", \"CS2101\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testPerson1.withTags(\"CS2103\", \"CS2100\", \"CS2101\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(predicate.test(testPerson1.build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        PersonBuilder testPerson1 \u003d new PersonBuilder().withName(\"Alice John\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        PersonBuilder testPerson2 \u003d new PersonBuilder().withName(\"Doe Dark\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ContactContainsFieldsPredicate predicate \u003d new ContactContainsFieldsPredicate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setNameKeywords(List.of(\"Alice\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Matching email without matching name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testPerson2.withEmail(\"bcdef@hotmail.com\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setEmailKeyword(\"hotmail\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(predicate.test(testPerson2.build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Matching name and email without matching phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testPerson1.withEmail(\"abcde@hotmail\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testPerson1.withPhone(\"91234567\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        predicate.setPhoneKeyword(\"7654\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(predicate.test(testPerson1.build()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 50,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagManagerImplTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TagManagerImplTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_FRIENDS \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_OWES_MONEY \u003d new Tag(\"owesMoney\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_MODULE \u003d new Tag(\"CS2103\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_NOT_FOUND \u003d new Tag(\"asdimsad\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_SCHOOL \u003d new Tag(\"NUS\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Person BENSON_EDITED \u003d new PersonBuilder(BENSON).withTags(\"friends\", \"CS2103\", \"NUS\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static TagManagerImpl createEmptyTagManager() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new TagManagerImpl();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Contains the tags \"friends\" (ALICE \u0026 BENSON) and \"owesMoney\" (BENSON)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static TagManagerImpl createNonEmptyTagManager() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagManagerImpl tagManager \u003d new TagManagerImpl();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.addNewPersonTags(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.addNewPersonTags(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return tagManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getTags_nonExistentTag_emptyCollectionReturn() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(createNonEmptyTagManager().getPersonsUnderTag(TAG_NOT_FOUND).isEmpty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getTags_existingTag_correctCollectionReturn() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cPerson\u003e personSet \u003d createNonEmptyTagManager().getPersonsUnderTag(TAG_FRIENDS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(personSet.contains(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(personSet.contains(BENSON));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        personSet \u003d createNonEmptyTagManager().getPersonsUnderTag(TAG_OWES_MONEY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(personSet.contains(BENSON));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(personSet.contains(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addNewPerson_newTags_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // This relies on the fact that GEORGE\u0027s tag CS2103 is not inside the non-empty tag manager."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagManagerImpl tagManager \u003d createEmptyTagManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.addNewPersonTags(GEORGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagManager.getPersonsUnderTag(TAG_MODULE).contains(GEORGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager \u003d createNonEmptyTagManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.addNewPersonTags(GEORGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagManager.getPersonsUnderTag(TAG_MODULE).contains(GEORGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deletePerson_validPersonWithTags_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagManagerImpl tagManager \u003d createNonEmptyTagManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.deletePersonTags(BENSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(tagManager.getPersonsUnderTag(TAG_FRIENDS).contains(BENSON));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagManager.getPersonsUnderTag(TAG_OWES_MONEY).isEmpty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void editPerson_personWithChangedTags_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagManagerImpl tagManager \u003d createNonEmptyTagManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.updateExistingPersonTags(BENSON, BENSON_EDITED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagManager.getPersonsUnderTag(TAG_OWES_MONEY).isEmpty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagManager.getPersonsUnderTag(TAG_MODULE).contains(BENSON_EDITED));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Checks that the Person object under the friends tag is the new edited Person object instead of the old."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(tagManager.getPersonsUnderTag(TAG_FRIENDS).contains(BENSON));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagManager.getPersonsUnderTag(TAG_FRIENDS).contains(BENSON_EDITED));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void allMethods_personWithNoTags_noChange() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person personNoTags \u003d new PersonBuilder(FIONA).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Person personNoTagsNewAddress \u003d new PersonBuilder(personNoTags).withAddress(\"some place\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagManagerImpl tagManager \u003d createNonEmptyTagManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // add makes no change"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.addNewPersonTags(personNoTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(tagManager, createNonEmptyTagManager());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // edit makes no change"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.updateExistingPersonTags(personNoTags, personNoTagsNewAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(tagManager, createNonEmptyTagManager());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // delete makes no change"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagManager.deletePersonTags(personNoTagsNewAddress);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(tagManager, createNonEmptyTagManager());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void constructor_differentCaseNames_sameTagReturned() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new Tag(\"CS2103\"), new Tag(\"cS2103\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTreeImplTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.SET_FACULTIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.SET_MODULES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.SET_SCIENCE_COMP_SUPERTAGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_ARCHITECTURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_COMPUTING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS1231S;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_NOT_IN_TREE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_NUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_SCIENCE_COMP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.buildTestTree;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.exceptions.TagCyclicDependencyException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TagTreeImplTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getTagSubTagMap_editAttempt_errorThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Map\u003cTag, Set\u003cTag\u003e\u003e tagMap \u003d buildTestTree().getTagSubTagMap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(tagMap, buildTestTree().getInternalTagSubTagMap());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tagMap.put(TAG_NUS, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tagMap.get(TAG_NUS).add(TAG_CS2040S_NOT_TREE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void copy_validTree_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree tagTree \u003d new TagTreeImpl();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.copy(buildTestTree());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(tagTree, buildTestTree());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getSubTagsOf_validTag_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(buildTestTree().getSubTagsOf(TAG_NUS), SET_FACULTIES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getSubTagsOf_invalidTag_emptySetReturned() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(buildTestTree().getSubTagsOf(TAG_NOT_IN_TREE), Set.of());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getSubTagsRecursive_validTag_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree tagTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e expectedSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedSet.add(TAG_SCIENCE_COMP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        expectedSet.addAll(SET_MODULES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSet, tagTree.getSubTagsRecursive(TAG_COMPUTING));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void getSubTagsRecursive_tagNotInTree_emptySetReturned() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(buildTestTree().getSubTagsRecursive(TAG_CS2040S_NOT_TREE).isEmpty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void editSubTagsOf_validTags_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree tagTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        tagTree.editSubTagsOf(TAG_COMPUTING, Set.of(TAG_CS2040S_NOT_TREE), Set.of(TAG_SCIENCE_COMP));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(tagTree.getSubTagsOf(TAG_COMPUTING).contains(TAG_CS2040S_NOT_TREE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(tagTree.getSubTagsOf(TAG_COMPUTING).contains(TAG_SCIENCE_COMP));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addSubTag_nonCyclicTag_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeImpl testTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testTree.addSubTagTo(TAG_COMPUTING, TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(testTree.getSubTagsOf(TAG_COMPUTING).contains(TAG_CS2040S_NOT_TREE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(testTree.hasDirectSuperTag(TAG_CS2040S_NOT_TREE, TAG_COMPUTING));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addSubTag_cyclicTag_errorThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(TagCyclicDependencyException.class, () -\u003e buildTestTree().addSubTagTo(TAG_COMPUTING, TAG_NUS));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removeSubTag_validTag_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeImpl testTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testTree.removeSubTagFrom(TAG_NUS, TAG_ARCHITECTURE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(testTree.getSubTagsOf(TAG_NUS).contains(TAG_ARCHITECTURE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(testTree.hasDirectSuperTag(TAG_ARCHITECTURE, TAG_NUS));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removeSubTag_invalidTag_errorThrown() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeImpl tagTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        buildTestTree().removeSubTagFrom(TAG_NUS, TAG_CS1231S);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(buildTestTree(), tagTree);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag_validTagToRemove_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeImpl testTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testTree.deleteTag(TAG_SCIENCE_COMP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(SET_SCIENCE_COMP_SUPERTAGS.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                .allMatch(tag -\u003e testTree.getSubTagsOf(tag).containsAll(SET_MODULES)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(SET_MODULES.stream().allMatch(tag -\u003e testTree.hasDirectSuperTag(tag, TAG_COMPUTING)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(SET_MODULES.stream().allMatch(tag -\u003e testTree.hasDirectSuperTag(tag, TAG_SCIENCE)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag_tagInTree_noChange() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeImpl testTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        testTree.deleteTag(TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(testTree, buildTestTree());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void isSubTag_validSubTag_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTreeImpl testTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(testTree.isSubTagOf(TAG_NUS, TAG_COMPUTING));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(testTree.isSubTagOf(TAG_COMPUTING, TAG_CS1231S));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void isSubTag_invalidSubTag_returnsFalse() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertFalse(buildTestTree().isSubTagOf(TAG_COMPUTING, TAG_CS2040S_NOT_TREE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTagTreeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.buildTestTree;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class JsonSerializableTagTreeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTagTreeTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Path VALID_TAG_TREE_FILE \u003d TEST_DATA_FOLDER.resolve(\"sampleValidTagTree.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Path INVALID_TAG_TREE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTagTree.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void toModelType_validTagTreeFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonSerializableTagTree dataFromFile \u003d JsonUtil.readJsonFile(VALID_TAG_TREE_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                JsonSerializableTagTree.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree tagTreeFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree expectedTagTree \u003d buildTestTree();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedTagTree, tagTreeFromFile);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void toModelType_invalidTagTreeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonSerializableTagTree dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TAG_TREE_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                JsonSerializableTagTree.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e dataFromFile.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTagTreeStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_COMPUTING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.TAG_CS2040S_NOT_TREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.testutil.TagTreeUtil.buildTestTree;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTree;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class JsonTagTreeStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTagTreeStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void readTagTree_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTagTree(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Optional\u003cReadOnlyTagTree\u003e readTagTree(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new JsonTagTreeStorage(Paths.get(filePath)).readTagTree(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertTrue(readTagTree(\"NonExistentFile.json\").isEmpty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTagTree(\"notJsonFormatTagTree.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void readTagTree_invalidTagTree_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTagTree(\"invalidTagTree.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void readAndSaveTagTree_validTagTree_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"tempTagTree.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree original \u003d buildTestTree();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonTagTreeStorage jsonTagTreeStorage \u003d new JsonTagTreeStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        jsonTagTreeStorage.saveTagTree(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ReadOnlyTagTree readBack \u003d jsonTagTreeStorage.readTagTree(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // Modify data, overwrite existing file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TagTree editedTree \u003d new TagTreeImpl();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        editedTree.copy(readBack);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        editedTree.addSubTagTo(TAG_COMPUTING, TAG_CS2040S_NOT_TREE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        jsonTagTreeStorage.saveTagTree(editedTree, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        readBack \u003d jsonTagTreeStorage.readTagTree(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertNotEquals(original, readBack);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void saveTagTree_nullTagTree_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTagTree(null, \"inconsequentialName.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Saves {@code tagTree} at the specified {@code filePath}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void saveTagTree(ReadOnlyTagTree tagTree, String filePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new JsonTagTreeStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    .saveTagTree(tagTree, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void saveTagTree_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTagTree(new TagTreeImpl(), null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        JsonCalendarStorage calendarStorage \u003d new JsonCalendarStorage(getTempFilePath(\"calendar\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        JsonTagTreeStorage tagTreeStorage \u003d new JsonTagTreeStorage(getTempFilePath(\"tagtree\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        JsonRemindersStorage remindersStorage \u003d new JsonRemindersStorage(getTempFilePath(\"reminders\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, calendarStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                userPrefsStorage, tagTreeStorage, remindersStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "LinkedInk": 1,
      "-": 67,
      "bangyiwu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddEventDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand.AddEventDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * A utility class to help with building AddEventDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class AddEventDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private AddEventDescriptor addEventDescriptor \u003d new AddEventDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Sets the {@code Description} of the {@code AddEventDescriptor} that we are building."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public AddEventDescriptorBuilder withDescription(Description description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        addEventDescriptor.setDescription(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Sets the {@code Time} of the {@code AddEventDescriptor} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public AddEventDescriptorBuilder withTime(Time time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        addEventDescriptor.setTime(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Sets the {@code personsToAdd} of the {@code AddEventDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public AddEventDescriptorBuilder withPersonsToAdd(ArrayList\u003cIndex\u003e personsToAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        addEventDescriptor.setPersonsToAdd(personsToAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public AddEventDescriptor build() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return addEventDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * A utility class to help with building EditEventDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EditEventDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private EditEventDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditEventDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditEventDescriptorBuilder(EditEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        this.descriptor \u003d new EditEventDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditEventDescriptorBuilder(Event event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor.setDescription(event.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor.setTime(event.getTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Sets the {@code Description} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditEventDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Sets the {@code Time} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditEventDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor.setTime(new Time(time));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EditEventDescriptor build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.model.tag.Tag.ALL_TAGS_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The tags are such that all prior tags will be removed and the {@code person}\u0027s tags are added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor.setTagsToAdd(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor.setTagsToRemove(Set.of(ALL_TAGS_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} to be added and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public EditPersonDescriptorBuilder withTagsToAdd(String... tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor.setTagsToAdd(tagSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} to be removed and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public EditPersonDescriptorBuilder withTagsToRemove(String... tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(tag -\u003e new Tag(tag, true)).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor.setTagsToRemove(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 17,
      "fyshhh": 1,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    // TODO: incorporate person associations into this builder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Group Meeting\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"01-01-2001 01:01\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Creates an {@code EventBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        time \u003d eventToCopy.getTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Sets the {@code Time} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public EventBuilder withTime(String time) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return new Event(description, time, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 4,
      "fyshhh": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.events.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " * A utility class for Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "public class EventUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Returns an add command string for adding the {@code event}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static String getAddCommand(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return AddEventCommand.COMMAND_WORD + \" \" + AddEventCommand.COMMAND_TYPE + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static String getEventDetails(Event event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION).append(event.getDescription().fullDescription).append(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        sb.append(PREFIX_DATETIME).append(event.getTime().toString()).append(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     * Returns the part of command string for the given {@code EditEventDescriptor}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static String getEditEventDescriptorDetails(EditEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.fullDescription).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        descriptor.getTime().ifPresent(time -\u003e sb.append(PREFIX_DATETIME).append(time.toString()).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fyshhh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelManagerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.RemindersImpl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * A utility class to help with building ModelManager objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " *     {@code ModelManager model \u003d new ModelManagerBuilder().withAddressBook(new AddressBook()).build();}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "public class ModelManagerBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     * Constructs a model manager builder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManagerBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new Calendar(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "                new TagTreeImpl(), new UserPrefs(), new RemindersImpl());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManagerBuilder(ModelManager model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the {@code AddressBook} in the {@code ModelManager} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManagerBuilder withAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.setAddressBook(addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the {@code Calendar} in the {@code ModelManager} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManagerBuilder withCalendar(ReadOnlyCalendar calendar) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.setCalendar(calendar);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the {@code RTagTree} in the {@code ModelManager} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManagerBuilder withTagTree(ReadOnlyTagTree tagTree) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.setTagTree(tagTree);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     * Replaces the {@code UserPrefs} in the {@code ModelManager} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManagerBuilder withUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        model.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    public ModelManager build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LinkedInk": 62,
      "bangyiwu": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LinkedInk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.ReadOnlyReminders;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.ReadOnlyTagTree;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Path getTagTreeFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setCalendarFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagTreeFilePath(Path tagTreeFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addPersonToTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removePersonFromTag(Tag tag, Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void addSubTagTo(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void removeChildTagFrom(Tag parentTag, Tag childTag) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isSubTagOf(Tag superTag, Tag subTag) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setCalendar(ReadOnlyCalendar newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setTagTree(ReadOnlyTagTree tagTree) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ReadOnlyTagTree getTagTree() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void deleteTagRecursive(Tag tag) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void sortPerson(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void sortEvent(Comparator\u003cEvent\u003e comparator) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedFilteredPersonList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ObservableList\u003cEvent\u003e getSortedFilteredEventList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getPersonsWithTag(Tag tag) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getPersonTags() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSuperTags() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getChildTags(Tag tag) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cTag\u003e getSubTagsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Set\u003cPerson\u003e getPersonsRecursive(Tag tag) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void permaSortContacts(Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void deleteObsoleteReminders() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedFilteredReminderList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public ReadOnlyReminders getReminders() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setReminders(ReadOnlyReminders reminders) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public void setRemindersFilePath(Path remindersFilePath) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bangyiwu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 245,
      "LinkedInk": 1,
      "bangyiwu": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.AddContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "import seedu.address.logic.commands.contacts.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + AddContactCommand.COMMAND_TYPE + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor.getTagsToAdd().filter(set -\u003e !set.isEmpty()).ifPresent(tagsToAdd -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                convertTagsToStringDetails(sb, PREFIX_TAG, tagsToAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        descriptor.getTagsToRemove().filter(set -\u003e !set.isEmpty()).ifPresent(tagsToRemove -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                convertTagsToStringDetails(sb, PREFIX_REMOVE_TAG, tagsToRemove));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Converts the tags into a continuous string and appends it to the string builder."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static void convertTagsToStringDetails(StringBuilder stringBuilder, Prefix prefix, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            stringBuilder.append(prefix).append(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            tags.forEach(s -\u003e stringBuilder.append(prefix).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 16,
      "fyshhh": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagTreeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import seedu.address.model.tag.TagTreeImpl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Utility class to help testing of tag trees."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TagTreeUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_NUS \u003d new Tag(\"nus\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Set\u003cTag\u003e SET_NUS \u003d new HashSet\u003c\u003e(Set.of(TAG_NUS));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_COMPUTING \u003d new Tag(\"computing\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_SCIENCE \u003d new Tag(\"science\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_ARCHITECTURE \u003d new Tag(\"architecture\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Set\u003cTag\u003e SET_FACULTIES \u003d new HashSet\u003c\u003e(Set.of(TAG_COMPUTING, TAG_SCIENCE, TAG_ARCHITECTURE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Set\u003cTag\u003e SET_SCIENCE_COMP_SUPERTAGS \u003d new HashSet\u003c\u003e(Set.of(TAG_SCIENCE, TAG_COMPUTING));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_SCIENCE_COMP \u003d new Tag(\"sciencecomp\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Set\u003cTag\u003e SET_SCIENCE_COMP \u003d new HashSet\u003c\u003e(Set.of(TAG_SCIENCE_COMP));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_MA1101R \u003d new Tag(\"ma1101r\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_CS1231S \u003d new Tag(\"cs1231s\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Set\u003cTag\u003e SET_MODULES \u003d new HashSet\u003c\u003e(Set.of(TAG_MA1101R, TAG_CS1231S));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_NOT_IN_TREE \u003d new Tag(\"notintree\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final Tag TAG_CS2040S_NOT_TREE \u003d new Tag(\"cs2040s\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a sample tag tree for testing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static TagTreeImpl buildTestTree() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Map\u003cTag, Set\u003cTag\u003e\u003e mapSubTag \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Map\u003cTag, Set\u003cTag\u003e\u003e mapSuperTag \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSubTag.put(TAG_NUS, new HashSet\u003c\u003e(SET_FACULTIES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSubTag.put(TAG_COMPUTING, new HashSet\u003c\u003e(SET_SCIENCE_COMP));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSubTag.put(TAG_SCIENCE, new HashSet\u003c\u003e(SET_SCIENCE_COMP));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSubTag.put(TAG_SCIENCE_COMP, new HashSet\u003c\u003e(SET_MODULES));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSuperTag.put(TAG_CS1231S, new HashSet\u003c\u003e(SET_SCIENCE_COMP));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSuperTag.put(TAG_MA1101R, new HashSet\u003c\u003e(SET_SCIENCE_COMP));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSuperTag.put(TAG_SCIENCE_COMP, new HashSet\u003c\u003e(SET_SCIENCE_COMP_SUPERTAGS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSuperTag.put(TAG_ARCHITECTURE, new HashSet\u003c\u003e(SET_NUS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSuperTag.put(TAG_COMPUTING, new HashSet\u003c\u003e(SET_NUS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mapSuperTag.put(TAG_SCIENCE, new HashSet\u003c\u003e(SET_NUS));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new TagTreeImpl(new HashMap\u003c\u003e(mapSubTag), new HashMap\u003c\u003e(mapSuperTag));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return Index.fromOneBased(model.getSortedFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return Index.fromOneBased(model.getSortedFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return model.getSortedFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BREAKFAST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LUNCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event MEETING \u003d new EventBuilder().withDescription(\"CS2103 Meeting\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            .withTime(\"12-10-2020 12:00\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event CONSULTATION \u003d new EventBuilder().withDescription(\"IS1103 Consultation\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            .withTime(\"15-11-2020 13:15\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event GATHERING \u003d new EventBuilder().withDescription(\"Family Gathering\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event DINNER \u003d new EventBuilder().withDescription(\"Welcome Dinner\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event SHOPPING \u003d new EventBuilder().withDescription(\"Shopping\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event WEBINAR \u003d new EventBuilder().withDescription(\"Webinar Meeting\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event OUTING \u003d new EventBuilder().withDescription(\"Family Outing\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event LESSON \u003d new EventBuilder().withDescription(\"Piano Lesson\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event PROJECT \u003d new EventBuilder().withDescription(\"Project Discussion\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event LUNCH \u003d new EventBuilder().withDescription(VALID_DESCRIPTION_LUNCH).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Event BREAKFAST \u003d new EventBuilder().withDescription(VALID_DESCRIPTION_BREAKFAST).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEETING \u003d \"Meeting\"; // A keyword that matches MEETING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     * Returns an {@code TimeBook} with all the typical events."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static Calendar getTypicalCalendar() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        Calendar ab \u003d new Calendar();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, CONSULTATION, GATHERING, DINNER, SHOPPING, WEBINAR, OUTING));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "solkim-83": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fyshhh"
        },
        "content": "    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "solkim-83"
        },
        "content": "    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "solkim-83"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fyshhh": 1,
      "solkim-83": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTags(VALID_TAG_MODULE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 3,
      "-": 75
    }
  }
]
